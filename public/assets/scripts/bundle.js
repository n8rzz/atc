(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
"use strict";

require("core-js/shim");

require("regenerator-runtime/runtime");

require("core-js/fn/regexp/escape");

if (global._babelPolyfill) {
  throw new Error("only one instance of babel-polyfill is allowed");
}
global._babelPolyfill = true;

var DEFINE_PROPERTY = "defineProperty";
function define(O, key, value) {
  O[key] || Object[DEFINE_PROPERTY](O, key, {
    writable: true,
    configurable: true,
    value: value
  });
}

define(String.prototype, "padLeft", "".padStart);
define(String.prototype, "padRight", "".padEnd);

"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
  [][key] && define(Array, key, Function.call.bind([][key]));
});
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"core-js/fn/regexp/escape":2,"core-js/shim":295,"regenerator-runtime/runtime":518}],2:[function(require,module,exports){
require('../../modules/core.regexp.escape');
module.exports = require('../../modules/_core').RegExp.escape;
},{"../../modules/_core":23,"../../modules/core.regexp.escape":119}],3:[function(require,module,exports){
module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};
},{}],4:[function(require,module,exports){
var cof = require('./_cof');
module.exports = function(it, msg){
  if(typeof it != 'number' && cof(it) != 'Number')throw TypeError(msg);
  return +it;
};
},{"./_cof":18}],5:[function(require,module,exports){
// 22.1.3.31 Array.prototype[@@unscopables]
var UNSCOPABLES = require('./_wks')('unscopables')
  , ArrayProto  = Array.prototype;
if(ArrayProto[UNSCOPABLES] == undefined)require('./_hide')(ArrayProto, UNSCOPABLES, {});
module.exports = function(key){
  ArrayProto[UNSCOPABLES][key] = true;
};
},{"./_hide":40,"./_wks":117}],6:[function(require,module,exports){
module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};
},{}],7:[function(require,module,exports){
var isObject = require('./_is-object');
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};
},{"./_is-object":49}],8:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');

module.exports = [].copyWithin || function copyWithin(target/*= 0*/, start/*= 0, end = @length*/){
  var O     = toObject(this)
    , len   = toLength(O.length)
    , to    = toIndex(target, len)
    , from  = toIndex(start, len)
    , end   = arguments.length > 2 ? arguments[2] : undefined
    , count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to)
    , inc   = 1;
  if(from < to && to < from + count){
    inc  = -1;
    from += count - 1;
    to   += count - 1;
  }
  while(count-- > 0){
    if(from in O)O[to] = O[from];
    else delete O[to];
    to   += inc;
    from += inc;
  } return O;
};
},{"./_to-index":105,"./_to-length":108,"./_to-object":109}],9:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
'use strict';
var toObject = require('./_to-object')
  , toIndex  = require('./_to-index')
  , toLength = require('./_to-length');
module.exports = function fill(value /*, start = 0, end = @length */){
  var O      = toObject(this)
    , length = toLength(O.length)
    , aLen   = arguments.length
    , index  = toIndex(aLen > 1 ? arguments[1] : undefined, length)
    , end    = aLen > 2 ? arguments[2] : undefined
    , endPos = end === undefined ? length : toIndex(end, length);
  while(endPos > index)O[index++] = value;
  return O;
};
},{"./_to-index":105,"./_to-length":108,"./_to-object":109}],10:[function(require,module,exports){
var forOf = require('./_for-of');

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};

},{"./_for-of":37}],11:[function(require,module,exports){
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length')
  , toIndex   = require('./_to-index');
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};
},{"./_to-index":105,"./_to-iobject":107,"./_to-length":108}],12:[function(require,module,exports){
// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = require('./_ctx')
  , IObject  = require('./_iobject')
  , toObject = require('./_to-object')
  , toLength = require('./_to-length')
  , asc      = require('./_array-species-create');
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};
},{"./_array-species-create":15,"./_ctx":25,"./_iobject":45,"./_to-length":108,"./_to-object":109}],13:[function(require,module,exports){
var aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , IObject   = require('./_iobject')
  , toLength  = require('./_to-length');

module.exports = function(that, callbackfn, aLen, memo, isRight){
  aFunction(callbackfn);
  var O      = toObject(that)
    , self   = IObject(O)
    , length = toLength(O.length)
    , index  = isRight ? length - 1 : 0
    , i      = isRight ? -1 : 1;
  if(aLen < 2)for(;;){
    if(index in self){
      memo = self[index];
      index += i;
      break;
    }
    index += i;
    if(isRight ? index < 0 : length <= index){
      throw TypeError('Reduce of empty array with no initial value');
    }
  }
  for(;isRight ? index >= 0 : length > index; index += i)if(index in self){
    memo = callbackfn(memo, self[index], index, O);
  }
  return memo;
};
},{"./_a-function":3,"./_iobject":45,"./_to-length":108,"./_to-object":109}],14:[function(require,module,exports){
var isObject = require('./_is-object')
  , isArray  = require('./_is-array')
  , SPECIES  = require('./_wks')('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};
},{"./_is-array":47,"./_is-object":49,"./_wks":117}],15:[function(require,module,exports){
// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = require('./_array-species-constructor');

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};
},{"./_array-species-constructor":14}],16:[function(require,module,exports){
'use strict';
var aFunction  = require('./_a-function')
  , isObject   = require('./_is-object')
  , invoke     = require('./_invoke')
  , arraySlice = [].slice
  , factories  = {};

var construct = function(F, len, args){
  if(!(len in factories)){
    for(var n = [], i = 0; i < len; i++)n[i] = 'a[' + i + ']';
    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
  } return factories[len](F, args);
};

module.exports = Function.bind || function bind(that /*, args... */){
  var fn       = aFunction(this)
    , partArgs = arraySlice.call(arguments, 1);
  var bound = function(/* args... */){
    var args = partArgs.concat(arraySlice.call(arguments));
    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
  };
  if(isObject(fn.prototype))bound.prototype = fn.prototype;
  return bound;
};
},{"./_a-function":3,"./_invoke":44,"./_is-object":49}],17:[function(require,module,exports){
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof')
  , TAG = require('./_wks')('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};
},{"./_cof":18,"./_wks":117}],18:[function(require,module,exports){
var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};
},{}],19:[function(require,module,exports){
'use strict';
var dP          = require('./_object-dp').f
  , create      = require('./_object-create')
  , redefineAll = require('./_redefine-all')
  , ctx         = require('./_ctx')
  , anInstance  = require('./_an-instance')
  , defined     = require('./_defined')
  , forOf       = require('./_for-of')
  , $iterDefine = require('./_iter-define')
  , step        = require('./_iter-step')
  , setSpecies  = require('./_set-species')
  , DESCRIPTORS = require('./_descriptors')
  , fastKey     = require('./_meta').fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};
},{"./_an-instance":6,"./_ctx":25,"./_defined":27,"./_descriptors":28,"./_for-of":37,"./_iter-define":53,"./_iter-step":55,"./_meta":62,"./_object-create":66,"./_object-dp":67,"./_redefine-all":86,"./_set-species":91}],20:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = require('./_classof')
  , from    = require('./_array-from-iterable');
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};
},{"./_array-from-iterable":10,"./_classof":17}],21:[function(require,module,exports){
'use strict';
var redefineAll       = require('./_redefine-all')
  , getWeak           = require('./_meta').getWeak
  , anObject          = require('./_an-object')
  , isObject          = require('./_is-object')
  , anInstance        = require('./_an-instance')
  , forOf             = require('./_for-of')
  , createArrayMethod = require('./_array-methods')
  , $has              = require('./_has')
  , arrayFind         = createArrayMethod(5)
  , arrayFindIndex    = createArrayMethod(6)
  , id                = 0;

// fallback for uncaught frozen keys
var uncaughtFrozenStore = function(that){
  return that._l || (that._l = new UncaughtFrozenStore);
};
var UncaughtFrozenStore = function(){
  this.a = [];
};
var findUncaughtFrozen = function(store, key){
  return arrayFind(store.a, function(it){
    return it[0] === key;
  });
};
UncaughtFrozenStore.prototype = {
  get: function(key){
    var entry = findUncaughtFrozen(this, key);
    if(entry)return entry[1];
  },
  has: function(key){
    return !!findUncaughtFrozen(this, key);
  },
  set: function(key, value){
    var entry = findUncaughtFrozen(this, key);
    if(entry)entry[1] = value;
    else this.a.push([key, value]);
  },
  'delete': function(key){
    var index = arrayFindIndex(this.a, function(it){
      return it[0] === key;
    });
    if(~index)this.a.splice(index, 1);
    return !!~index;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = id++;      // collection id
      that._l = undefined; // leak store for uncaught frozen objects
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.3.3.2 WeakMap.prototype.delete(key)
      // 23.4.3.3 WeakSet.prototype.delete(value)
      'delete': function(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this)['delete'](key);
        return data && $has(data, this._i) && delete data[this._i];
      },
      // 23.3.3.4 WeakMap.prototype.has(key)
      // 23.4.3.4 WeakSet.prototype.has(value)
      has: function has(key){
        if(!isObject(key))return false;
        var data = getWeak(key);
        if(data === true)return uncaughtFrozenStore(this).has(key);
        return data && $has(data, this._i);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var data = getWeak(anObject(key), true);
    if(data === true)uncaughtFrozenStore(that).set(key, value);
    else data[that._i] = value;
    return that;
  },
  ufstore: uncaughtFrozenStore
};
},{"./_an-instance":6,"./_an-object":7,"./_array-methods":12,"./_for-of":37,"./_has":39,"./_is-object":49,"./_meta":62,"./_redefine-all":86}],22:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , $export           = require('./_export')
  , redefine          = require('./_redefine')
  , redefineAll       = require('./_redefine-all')
  , meta              = require('./_meta')
  , forOf             = require('./_for-of')
  , anInstance        = require('./_an-instance')
  , isObject          = require('./_is-object')
  , fails             = require('./_fails')
  , $iterDetect       = require('./_iter-detect')
  , setToStringTag    = require('./_set-to-string-tag')
  , inheritIfRequired = require('./_inherit-if-required');

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  var fixMethod = function(KEY){
    var fn = proto[KEY];
    redefine(proto, KEY,
      KEY == 'delete' ? function(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a){
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a){
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a){ fn.call(this, a === 0 ? 0 : a); return this; }
        : function set(a, b){ fn.call(this, a === 0 ? 0 : a, b); return this; }
    );
  };
  if(typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    var instance             = new C
      // early implementations not supports chaining
      , HASNT_CHAINING       = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      , THROWS_ON_PRIMITIVES = fails(function(){ instance.has(1); })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      , ACCEPT_ITERABLES     = $iterDetect(function(iter){ new C(iter); }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      , BUGGY_ZERO = !IS_WEAK && fails(function(){
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C()
          , index     = 5;
        while(index--)$instance[ADDER](index, index);
        return !$instance.has(-0);
      });
    if(!ACCEPT_ITERABLES){ 
      C = wrapper(function(target, iterable){
        anInstance(target, C, NAME);
        var that = inheritIfRequired(new Base, target, C);
        if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
        return that;
      });
      C.prototype = proto;
      proto.constructor = C;
    }
    if(THROWS_ON_PRIMITIVES || BUGGY_ZERO){
      fixMethod('delete');
      fixMethod('has');
      IS_MAP && fixMethod('get');
    }
    if(BUGGY_ZERO || HASNT_CHAINING)fixMethod(ADDER);
    // weak collections should not contains .clear method
    if(IS_WEAK && proto.clear)delete proto.clear;
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F * (C != Base), O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};
},{"./_an-instance":6,"./_export":32,"./_fails":34,"./_for-of":37,"./_global":38,"./_inherit-if-required":43,"./_is-object":49,"./_iter-detect":54,"./_meta":62,"./_redefine":87,"./_redefine-all":86,"./_set-to-string-tag":92}],23:[function(require,module,exports){
var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef
},{}],24:[function(require,module,exports){
'use strict';
var $defineProperty = require('./_object-dp')
  , createDesc      = require('./_property-desc');

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};
},{"./_object-dp":67,"./_property-desc":85}],25:[function(require,module,exports){
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};
},{"./_a-function":3}],26:[function(require,module,exports){
'use strict';
var anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive')
  , NUMBER      = 'number';

module.exports = function(hint){
  if(hint !== 'string' && hint !== NUMBER && hint !== 'default')throw TypeError('Incorrect hint');
  return toPrimitive(anObject(this), hint != NUMBER);
};
},{"./_an-object":7,"./_to-primitive":110}],27:[function(require,module,exports){
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};
},{}],28:[function(require,module,exports){
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_fails":34}],29:[function(require,module,exports){
var isObject = require('./_is-object')
  , document = require('./_global').document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};
},{"./_global":38,"./_is-object":49}],30:[function(require,module,exports){
// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');
},{}],31:[function(require,module,exports){
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys')
  , gOPS    = require('./_object-gops')
  , pIE     = require('./_object-pie');
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};
},{"./_object-gops":73,"./_object-keys":76,"./_object-pie":77}],32:[function(require,module,exports){
var global    = require('./_global')
  , core      = require('./_core')
  , hide      = require('./_hide')
  , redefine  = require('./_redefine')
  , ctx       = require('./_ctx')
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE]
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE] || (exports[PROTOTYPE] = {})
    , key, own, out, exp;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    // export native or passed
    out = (own ? target : source)[key];
    // bind timers to global for call from export context
    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // extend global
    if(target)redefine(target, key, out, type & $export.U);
    // export
    if(exports[key] != out)hide(exports, key, exp);
    if(IS_PROTO && expProto[key] != out)expProto[key] = out;
  }
};
global.core = core;
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;
},{"./_core":23,"./_ctx":25,"./_global":38,"./_hide":40,"./_redefine":87}],33:[function(require,module,exports){
var MATCH = require('./_wks')('match');
module.exports = function(KEY){
  var re = /./;
  try {
    '/./'[KEY](re);
  } catch(e){
    try {
      re[MATCH] = false;
      return !'/./'[KEY](re);
    } catch(f){ /* empty */ }
  } return true;
};
},{"./_wks":117}],34:[function(require,module,exports){
module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};
},{}],35:[function(require,module,exports){
'use strict';
var hide     = require('./_hide')
  , redefine = require('./_redefine')
  , fails    = require('./_fails')
  , defined  = require('./_defined')
  , wks      = require('./_wks');

module.exports = function(KEY, length, exec){
  var SYMBOL   = wks(KEY)
    , fns      = exec(defined, SYMBOL, ''[KEY])
    , strfn    = fns[0]
    , rxfn     = fns[1];
  if(fails(function(){
    var O = {};
    O[SYMBOL] = function(){ return 7; };
    return ''[KEY](O) != 7;
  })){
    redefine(String.prototype, KEY, strfn);
    hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function(string, arg){ return rxfn.call(string, this, arg); }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function(string){ return rxfn.call(string, this); }
    );
  }
};
},{"./_defined":27,"./_fails":34,"./_hide":40,"./_redefine":87,"./_wks":117}],36:[function(require,module,exports){
'use strict';
// 21.2.5.3 get RegExp.prototype.flags
var anObject = require('./_an-object');
module.exports = function(){
  var that   = anObject(this)
    , result = '';
  if(that.global)     result += 'g';
  if(that.ignoreCase) result += 'i';
  if(that.multiline)  result += 'm';
  if(that.unicode)    result += 'u';
  if(that.sticky)     result += 'y';
  return result;
};
},{"./_an-object":7}],37:[function(require,module,exports){
var ctx         = require('./_ctx')
  , call        = require('./_iter-call')
  , isArrayIter = require('./_is-array-iter')
  , anObject    = require('./_an-object')
  , toLength    = require('./_to-length')
  , getIterFn   = require('./core.get-iterator-method')
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;
},{"./_an-object":7,"./_ctx":25,"./_is-array-iter":46,"./_iter-call":51,"./_to-length":108,"./core.get-iterator-method":118}],38:[function(require,module,exports){
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef
},{}],39:[function(require,module,exports){
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};
},{}],40:[function(require,module,exports){
var dP         = require('./_object-dp')
  , createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};
},{"./_descriptors":28,"./_object-dp":67,"./_property-desc":85}],41:[function(require,module,exports){
module.exports = require('./_global').document && document.documentElement;
},{"./_global":38}],42:[function(require,module,exports){
module.exports = !require('./_descriptors') && !require('./_fails')(function(){
  return Object.defineProperty(require('./_dom-create')('div'), 'a', {get: function(){ return 7; }}).a != 7;
});
},{"./_descriptors":28,"./_dom-create":29,"./_fails":34}],43:[function(require,module,exports){
var isObject       = require('./_is-object')
  , setPrototypeOf = require('./_set-proto').set;
module.exports = function(that, target, C){
  var P, S = target.constructor;
  if(S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf){
    setPrototypeOf(that, P);
  } return that;
};
},{"./_is-object":49,"./_set-proto":90}],44:[function(require,module,exports){
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};
},{}],45:[function(require,module,exports){
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};
},{"./_cof":18}],46:[function(require,module,exports){
// check on default Array iterator
var Iterators  = require('./_iterators')
  , ITERATOR   = require('./_wks')('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};
},{"./_iterators":56,"./_wks":117}],47:[function(require,module,exports){
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};
},{"./_cof":18}],48:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var isObject = require('./_is-object')
  , floor    = Math.floor;
module.exports = function isInteger(it){
  return !isObject(it) && isFinite(it) && floor(it) === it;
};
},{"./_is-object":49}],49:[function(require,module,exports){
module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};
},{}],50:[function(require,module,exports){
// 7.2.8 IsRegExp(argument)
var isObject = require('./_is-object')
  , cof      = require('./_cof')
  , MATCH    = require('./_wks')('match');
module.exports = function(it){
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
};
},{"./_cof":18,"./_is-object":49,"./_wks":117}],51:[function(require,module,exports){
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};
},{"./_an-object":7}],52:[function(require,module,exports){
'use strict';
var create         = require('./_object-create')
  , descriptor     = require('./_property-desc')
  , setToStringTag = require('./_set-to-string-tag')
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};
},{"./_hide":40,"./_object-create":66,"./_property-desc":85,"./_set-to-string-tag":92,"./_wks":117}],53:[function(require,module,exports){
'use strict';
var LIBRARY        = require('./_library')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , hide           = require('./_hide')
  , has            = require('./_has')
  , Iterators      = require('./_iterators')
  , $iterCreate    = require('./_iter-create')
  , setToStringTag = require('./_set-to-string-tag')
  , getPrototypeOf = require('./_object-gpo')
  , ITERATOR       = require('./_wks')('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};
},{"./_export":32,"./_has":39,"./_hide":40,"./_iter-create":52,"./_iterators":56,"./_library":58,"./_object-gpo":74,"./_redefine":87,"./_set-to-string-tag":92,"./_wks":117}],54:[function(require,module,exports){
var ITERATOR     = require('./_wks')('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};
},{"./_wks":117}],55:[function(require,module,exports){
module.exports = function(done, value){
  return {value: value, done: !!done};
};
},{}],56:[function(require,module,exports){
module.exports = {};
},{}],57:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject');
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};
},{"./_object-keys":76,"./_to-iobject":107}],58:[function(require,module,exports){
module.exports = false;
},{}],59:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $expm1 = Math.expm1;
module.exports = (!$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17
) ? function expm1(x){
  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
} : $expm1;
},{}],60:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
module.exports = Math.log1p || function log1p(x){
  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
};
},{}],61:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
module.exports = Math.sign || function sign(x){
  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
};
},{}],62:[function(require,module,exports){
var META     = require('./_uid')('meta')
  , isObject = require('./_is-object')
  , has      = require('./_has')
  , setDesc  = require('./_object-dp').f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !require('./_fails')(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};
},{"./_fails":34,"./_has":39,"./_is-object":49,"./_object-dp":67,"./_uid":114}],63:[function(require,module,exports){
var Map     = require('./es6.map')
  , $export = require('./_export')
  , shared  = require('./_shared')('metadata')
  , store   = shared.store || (shared.store = new (require('./es6.weak-map')));

var getOrCreateMetadataMap = function(target, targetKey, create){
  var targetMetadata = store.get(target);
  if(!targetMetadata){
    if(!create)return undefined;
    store.set(target, targetMetadata = new Map);
  }
  var keyMetadata = targetMetadata.get(targetKey);
  if(!keyMetadata){
    if(!create)return undefined;
    targetMetadata.set(targetKey, keyMetadata = new Map);
  } return keyMetadata;
};
var ordinaryHasOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
};
var ordinaryGetOwnMetadata = function(MetadataKey, O, P){
  var metadataMap = getOrCreateMetadataMap(O, P, false);
  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
};
var ordinaryDefineOwnMetadata = function(MetadataKey, MetadataValue, O, P){
  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
};
var ordinaryOwnMetadataKeys = function(target, targetKey){
  var metadataMap = getOrCreateMetadataMap(target, targetKey, false)
    , keys        = [];
  if(metadataMap)metadataMap.forEach(function(_, key){ keys.push(key); });
  return keys;
};
var toMetaKey = function(it){
  return it === undefined || typeof it == 'symbol' ? it : String(it);
};
var exp = function(O){
  $export($export.S, 'Reflect', O);
};

module.exports = {
  store: store,
  map: getOrCreateMetadataMap,
  has: ordinaryHasOwnMetadata,
  get: ordinaryGetOwnMetadata,
  set: ordinaryDefineOwnMetadata,
  keys: ordinaryOwnMetadataKeys,
  key: toMetaKey,
  exp: exp
};
},{"./_export":32,"./_shared":94,"./es6.map":149,"./es6.weak-map":255}],64:[function(require,module,exports){
var global    = require('./_global')
  , macrotask = require('./_task').set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = require('./_cof')(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};
},{"./_cof":18,"./_global":38,"./_task":104}],65:[function(require,module,exports){
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = require('./_object-keys')
  , gOPS     = require('./_object-gops')
  , pIE      = require('./_object-pie')
  , toObject = require('./_to-object')
  , IObject  = require('./_iobject')
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || require('./_fails')(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;
},{"./_fails":34,"./_iobject":45,"./_object-gops":73,"./_object-keys":76,"./_object-pie":77,"./_to-object":109}],66:[function(require,module,exports){
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = require('./_an-object')
  , dPs         = require('./_object-dps')
  , enumBugKeys = require('./_enum-bug-keys')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = require('./_dom-create')('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  require('./_html').appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":7,"./_dom-create":29,"./_enum-bug-keys":30,"./_html":41,"./_object-dps":68,"./_shared-key":93}],67:[function(require,module,exports){
var anObject       = require('./_an-object')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , toPrimitive    = require('./_to-primitive')
  , dP             = Object.defineProperty;

exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};
},{"./_an-object":7,"./_descriptors":28,"./_ie8-dom-define":42,"./_to-primitive":110}],68:[function(require,module,exports){
var dP       = require('./_object-dp')
  , anObject = require('./_an-object')
  , getKeys  = require('./_object-keys');

module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};
},{"./_an-object":7,"./_descriptors":28,"./_object-dp":67,"./_object-keys":76}],69:[function(require,module,exports){
// Forced replacement prototype accessors methods
module.exports = require('./_library')|| !require('./_fails')(function(){
  var K = Math.random();
  // In FF throws only define methods
  __defineSetter__.call(null, K, function(){ /* empty */});
  delete require('./_global')[K];
});
},{"./_fails":34,"./_global":38,"./_library":58}],70:[function(require,module,exports){
var pIE            = require('./_object-pie')
  , createDesc     = require('./_property-desc')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , has            = require('./_has')
  , IE8_DOM_DEFINE = require('./_ie8-dom-define')
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};
},{"./_descriptors":28,"./_has":39,"./_ie8-dom-define":42,"./_object-pie":77,"./_property-desc":85,"./_to-iobject":107,"./_to-primitive":110}],71:[function(require,module,exports){
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject')
  , gOPN      = require('./_object-gopn').f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_object-gopn":72,"./_to-iobject":107}],72:[function(require,module,exports){
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = require('./_object-keys-internal')
  , hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};
},{"./_enum-bug-keys":30,"./_object-keys-internal":75}],73:[function(require,module,exports){
exports.f = Object.getOwnPropertySymbols;
},{}],74:[function(require,module,exports){
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = require('./_has')
  , toObject    = require('./_to-object')
  , IE_PROTO    = require('./_shared-key')('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};
},{"./_has":39,"./_shared-key":93,"./_to-object":109}],75:[function(require,module,exports){
var has          = require('./_has')
  , toIObject    = require('./_to-iobject')
  , arrayIndexOf = require('./_array-includes')(false)
  , IE_PROTO     = require('./_shared-key')('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};
},{"./_array-includes":11,"./_has":39,"./_shared-key":93,"./_to-iobject":107}],76:[function(require,module,exports){
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = require('./_object-keys-internal')
  , enumBugKeys = require('./_enum-bug-keys');

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};
},{"./_enum-bug-keys":30,"./_object-keys-internal":75}],77:[function(require,module,exports){
exports.f = {}.propertyIsEnumerable;
},{}],78:[function(require,module,exports){
// most Object methods by ES6 should accept primitives
var $export = require('./_export')
  , core    = require('./_core')
  , fails   = require('./_fails');
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};
},{"./_core":23,"./_export":32,"./_fails":34}],79:[function(require,module,exports){
var getKeys   = require('./_object-keys')
  , toIObject = require('./_to-iobject')
  , isEnum    = require('./_object-pie').f;
module.exports = function(isEntries){
  return function(it){
    var O      = toIObject(it)
      , keys   = getKeys(O)
      , length = keys.length
      , i      = 0
      , result = []
      , key;
    while(length > i)if(isEnum.call(O, key = keys[i++])){
      result.push(isEntries ? [key, O[key]] : O[key]);
    } return result;
  };
};
},{"./_object-keys":76,"./_object-pie":77,"./_to-iobject":107}],80:[function(require,module,exports){
// all object keys, includes non-enumerable and symbols
var gOPN     = require('./_object-gopn')
  , gOPS     = require('./_object-gops')
  , anObject = require('./_an-object')
  , Reflect  = require('./_global').Reflect;
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it){
  var keys       = gOPN.f(anObject(it))
    , getSymbols = gOPS.f;
  return getSymbols ? keys.concat(getSymbols(it)) : keys;
};
},{"./_an-object":7,"./_global":38,"./_object-gopn":72,"./_object-gops":73}],81:[function(require,module,exports){
var $parseFloat = require('./_global').parseFloat
  , $trim       = require('./_string-trim').trim;

module.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str){
  var string = $trim(String(str), 3)
    , result = $parseFloat(string);
  return result === 0 && string.charAt(0) == '-' ? -0 : result;
} : $parseFloat;
},{"./_global":38,"./_string-trim":102,"./_string-ws":103}],82:[function(require,module,exports){
var $parseInt = require('./_global').parseInt
  , $trim     = require('./_string-trim').trim
  , ws        = require('./_string-ws')
  , hex       = /^[\-+]?0[xX]/;

module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){
  var string = $trim(String(str), 3);
  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));
} : $parseInt;
},{"./_global":38,"./_string-trim":102,"./_string-ws":103}],83:[function(require,module,exports){
'use strict';
var path      = require('./_path')
  , invoke    = require('./_invoke')
  , aFunction = require('./_a-function');
module.exports = function(/* ...pargs */){
  var fn     = aFunction(this)
    , length = arguments.length
    , pargs  = Array(length)
    , i      = 0
    , _      = path._
    , holder = false;
  while(length > i)if((pargs[i] = arguments[i++]) === _)holder = true;
  return function(/* ...args */){
    var that = this
      , aLen = arguments.length
      , j = 0, k = 0, args;
    if(!holder && !aLen)return invoke(fn, pargs, that);
    args = pargs.slice();
    if(holder)for(;length > j; j++)if(args[j] === _)args[j] = arguments[k++];
    while(aLen > k)args.push(arguments[k++]);
    return invoke(fn, args, that);
  };
};
},{"./_a-function":3,"./_invoke":44,"./_path":84}],84:[function(require,module,exports){
module.exports = require('./_global');
},{"./_global":38}],85:[function(require,module,exports){
module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};
},{}],86:[function(require,module,exports){
var redefine = require('./_redefine');
module.exports = function(target, src, safe){
  for(var key in src)redefine(target, key, src[key], safe);
  return target;
};
},{"./_redefine":87}],87:[function(require,module,exports){
var global    = require('./_global')
  , hide      = require('./_hide')
  , has       = require('./_has')
  , SRC       = require('./_uid')('src')
  , TO_STRING = 'toString'
  , $toString = Function[TO_STRING]
  , TPL       = ('' + $toString).split(TO_STRING);

require('./_core').inspectSource = function(it){
  return $toString.call(it);
};

(module.exports = function(O, key, val, safe){
  var isFunction = typeof val == 'function';
  if(isFunction)has(val, 'name') || hide(val, 'name', key);
  if(O[key] === val)return;
  if(isFunction)has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
  if(O === global){
    O[key] = val;
  } else {
    if(!safe){
      delete O[key];
      hide(O, key, val);
    } else {
      if(O[key])O[key] = val;
      else hide(O, key, val);
    }
  }
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, TO_STRING, function toString(){
  return typeof this == 'function' && this[SRC] || $toString.call(this);
});
},{"./_core":23,"./_global":38,"./_has":39,"./_hide":40,"./_uid":114}],88:[function(require,module,exports){
module.exports = function(regExp, replace){
  var replacer = replace === Object(replace) ? function(part){
    return replace[part];
  } : replace;
  return function(it){
    return String(it).replace(regExp, replacer);
  };
};
},{}],89:[function(require,module,exports){
// 7.2.9 SameValue(x, y)
module.exports = Object.is || function is(x, y){
  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
};
},{}],90:[function(require,module,exports){
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = require('./_is-object')
  , anObject = require('./_an-object');
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};
},{"./_an-object":7,"./_ctx":25,"./_is-object":49,"./_object-gopd":70}],91:[function(require,module,exports){
'use strict';
var global      = require('./_global')
  , dP          = require('./_object-dp')
  , DESCRIPTORS = require('./_descriptors')
  , SPECIES     = require('./_wks')('species');

module.exports = function(KEY){
  var C = global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};
},{"./_descriptors":28,"./_global":38,"./_object-dp":67,"./_wks":117}],92:[function(require,module,exports){
var def = require('./_object-dp').f
  , has = require('./_has')
  , TAG = require('./_wks')('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};
},{"./_has":39,"./_object-dp":67,"./_wks":117}],93:[function(require,module,exports){
var shared = require('./_shared')('keys')
  , uid    = require('./_uid');
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};
},{"./_shared":94,"./_uid":114}],94:[function(require,module,exports){
var global = require('./_global')
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};
},{"./_global":38}],95:[function(require,module,exports){
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = require('./_an-object')
  , aFunction = require('./_a-function')
  , SPECIES   = require('./_wks')('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};
},{"./_a-function":3,"./_an-object":7,"./_wks":117}],96:[function(require,module,exports){
var fails = require('./_fails');

module.exports = function(method, arg){
  return !!method && fails(function(){
    arg ? method.call(null, function(){}, 1) : method.call(null);
  });
};
},{"./_fails":34}],97:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};
},{"./_defined":27,"./_to-integer":106}],98:[function(require,module,exports){
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('./_is-regexp')
  , defined  = require('./_defined');

module.exports = function(that, searchString, NAME){
  if(isRegExp(searchString))throw TypeError('String#' + NAME + " doesn't accept regex!");
  return String(defined(that));
};
},{"./_defined":27,"./_is-regexp":50}],99:[function(require,module,exports){
var $export = require('./_export')
  , fails   = require('./_fails')
  , defined = require('./_defined')
  , quot    = /"/g;
// B.2.3.2.1 CreateHTML(string, tag, attribute, value)
var createHTML = function(string, tag, attribute, value) {
  var S  = String(defined(string))
    , p1 = '<' + tag;
  if(attribute !== '')p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
  return p1 + '>' + S + '</' + tag + '>';
};
module.exports = function(NAME, exec){
  var O = {};
  O[NAME] = exec(createHTML);
  $export($export.P + $export.F * fails(function(){
    var test = ''[NAME]('"');
    return test !== test.toLowerCase() || test.split('"').length > 3;
  }), 'String', O);
};
},{"./_defined":27,"./_export":32,"./_fails":34}],100:[function(require,module,exports){
// https://github.com/tc39/proposal-string-pad-start-end
var toLength = require('./_to-length')
  , repeat   = require('./_string-repeat')
  , defined  = require('./_defined');

module.exports = function(that, maxLength, fillString, left){
  var S            = String(defined(that))
    , stringLength = S.length
    , fillStr      = fillString === undefined ? ' ' : String(fillString)
    , intMaxLength = toLength(maxLength);
  if(intMaxLength <= stringLength || fillStr == '')return S;
  var fillLen = intMaxLength - stringLength
    , stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
  if(stringFiller.length > fillLen)stringFiller = stringFiller.slice(0, fillLen);
  return left ? stringFiller + S : S + stringFiller;
};

},{"./_defined":27,"./_string-repeat":101,"./_to-length":108}],101:[function(require,module,exports){
'use strict';
var toInteger = require('./_to-integer')
  , defined   = require('./_defined');

module.exports = function repeat(count){
  var str = String(defined(this))
    , res = ''
    , n   = toInteger(count);
  if(n < 0 || n == Infinity)throw RangeError("Count can't be negative");
  for(;n > 0; (n >>>= 1) && (str += str))if(n & 1)res += str;
  return res;
};
},{"./_defined":27,"./_to-integer":106}],102:[function(require,module,exports){
var $export = require('./_export')
  , defined = require('./_defined')
  , fails   = require('./_fails')
  , spaces  = require('./_string-ws')
  , space   = '[' + spaces + ']'
  , non     = '\u200b\u0085'
  , ltrim   = RegExp('^' + space + space + '*')
  , rtrim   = RegExp(space + space + '*$');

var exporter = function(KEY, exec, ALIAS){
  var exp   = {};
  var FORCE = fails(function(){
    return !!spaces[KEY]() || non[KEY]() != non;
  });
  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
  if(ALIAS)exp[ALIAS] = fn;
  $export($export.P + $export.F * FORCE, 'String', exp);
};

// 1 -> String#trimLeft
// 2 -> String#trimRight
// 3 -> String#trim
var trim = exporter.trim = function(string, TYPE){
  string = String(defined(string));
  if(TYPE & 1)string = string.replace(ltrim, '');
  if(TYPE & 2)string = string.replace(rtrim, '');
  return string;
};

module.exports = exporter;
},{"./_defined":27,"./_export":32,"./_fails":34,"./_string-ws":103}],103:[function(require,module,exports){
module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
  '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
},{}],104:[function(require,module,exports){
var ctx                = require('./_ctx')
  , invoke             = require('./_invoke')
  , html               = require('./_html')
  , cel                = require('./_dom-create')
  , global             = require('./_global')
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(require('./_cof')(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};
},{"./_cof":18,"./_ctx":25,"./_dom-create":29,"./_global":38,"./_html":41,"./_invoke":44}],105:[function(require,module,exports){
var toInteger = require('./_to-integer')
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};
},{"./_to-integer":106}],106:[function(require,module,exports){
// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};
},{}],107:[function(require,module,exports){
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject')
  , defined = require('./_defined');
module.exports = function(it){
  return IObject(defined(it));
};
},{"./_defined":27,"./_iobject":45}],108:[function(require,module,exports){
// 7.1.15 ToLength
var toInteger = require('./_to-integer')
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};
},{"./_to-integer":106}],109:[function(require,module,exports){
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it){
  return Object(defined(it));
};
},{"./_defined":27}],110:[function(require,module,exports){
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};
},{"./_is-object":49}],111:[function(require,module,exports){
'use strict';
if(require('./_descriptors')){
  var LIBRARY             = require('./_library')
    , global              = require('./_global')
    , fails               = require('./_fails')
    , $export             = require('./_export')
    , $typed              = require('./_typed')
    , $buffer             = require('./_typed-buffer')
    , ctx                 = require('./_ctx')
    , anInstance          = require('./_an-instance')
    , propertyDesc        = require('./_property-desc')
    , hide                = require('./_hide')
    , redefineAll         = require('./_redefine-all')
    , toInteger           = require('./_to-integer')
    , toLength            = require('./_to-length')
    , toIndex             = require('./_to-index')
    , toPrimitive         = require('./_to-primitive')
    , has                 = require('./_has')
    , same                = require('./_same-value')
    , classof             = require('./_classof')
    , isObject            = require('./_is-object')
    , toObject            = require('./_to-object')
    , isArrayIter         = require('./_is-array-iter')
    , create              = require('./_object-create')
    , getPrototypeOf      = require('./_object-gpo')
    , gOPN                = require('./_object-gopn').f
    , getIterFn           = require('./core.get-iterator-method')
    , uid                 = require('./_uid')
    , wks                 = require('./_wks')
    , createArrayMethod   = require('./_array-methods')
    , createArrayIncludes = require('./_array-includes')
    , speciesConstructor  = require('./_species-constructor')
    , ArrayIterators      = require('./es6.array.iterator')
    , Iterators           = require('./_iterators')
    , $iterDetect         = require('./_iter-detect')
    , setSpecies          = require('./_set-species')
    , arrayFill           = require('./_array-fill')
    , arrayCopyWithin     = require('./_array-copy-within')
    , $DP                 = require('./_object-dp')
    , $GOPD               = require('./_object-gopd')
    , dP                  = $DP.f
    , gOPD                = $GOPD.f
    , RangeError          = global.RangeError
    , TypeError           = global.TypeError
    , Uint8Array          = global.Uint8Array
    , ARRAY_BUFFER        = 'ArrayBuffer'
    , SHARED_BUFFER       = 'Shared' + ARRAY_BUFFER
    , BYTES_PER_ELEMENT   = 'BYTES_PER_ELEMENT'
    , PROTOTYPE           = 'prototype'
    , ArrayProto          = Array[PROTOTYPE]
    , $ArrayBuffer        = $buffer.ArrayBuffer
    , $DataView           = $buffer.DataView
    , arrayForEach        = createArrayMethod(0)
    , arrayFilter         = createArrayMethod(2)
    , arraySome           = createArrayMethod(3)
    , arrayEvery          = createArrayMethod(4)
    , arrayFind           = createArrayMethod(5)
    , arrayFindIndex      = createArrayMethod(6)
    , arrayIncludes       = createArrayIncludes(true)
    , arrayIndexOf        = createArrayIncludes(false)
    , arrayValues         = ArrayIterators.values
    , arrayKeys           = ArrayIterators.keys
    , arrayEntries        = ArrayIterators.entries
    , arrayLastIndexOf    = ArrayProto.lastIndexOf
    , arrayReduce         = ArrayProto.reduce
    , arrayReduceRight    = ArrayProto.reduceRight
    , arrayJoin           = ArrayProto.join
    , arraySort           = ArrayProto.sort
    , arraySlice          = ArrayProto.slice
    , arrayToString       = ArrayProto.toString
    , arrayToLocaleString = ArrayProto.toLocaleString
    , ITERATOR            = wks('iterator')
    , TAG                 = wks('toStringTag')
    , TYPED_CONSTRUCTOR   = uid('typed_constructor')
    , DEF_CONSTRUCTOR     = uid('def_constructor')
    , ALL_CONSTRUCTORS    = $typed.CONSTR
    , TYPED_ARRAY         = $typed.TYPED
    , VIEW                = $typed.VIEW
    , WRONG_LENGTH        = 'Wrong length!';

  var $map = createArrayMethod(1, function(O, length){
    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
  });

  var LITTLE_ENDIAN = fails(function(){
    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
  });

  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function(){
    new Uint8Array(1).set({});
  });

  var strictToLength = function(it, SAME){
    if(it === undefined)throw TypeError(WRONG_LENGTH);
    var number = +it
      , length = toLength(it);
    if(SAME && !same(number, length))throw RangeError(WRONG_LENGTH);
    return length;
  };

  var toOffset = function(it, BYTES){
    var offset = toInteger(it);
    if(offset < 0 || offset % BYTES)throw RangeError('Wrong offset!');
    return offset;
  };

  var validate = function(it){
    if(isObject(it) && TYPED_ARRAY in it)return it;
    throw TypeError(it + ' is not a typed array!');
  };

  var allocate = function(C, length){
    if(!(isObject(C) && TYPED_CONSTRUCTOR in C)){
      throw TypeError('It is not a typed array constructor!');
    } return new C(length);
  };

  var speciesFromList = function(O, list){
    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
  };

  var fromList = function(C, list){
    var index  = 0
      , length = list.length
      , result = allocate(C, length);
    while(length > index)result[index] = list[index++];
    return result;
  };

  var addGetter = function(it, key, internal){
    dP(it, key, {get: function(){ return this._d[internal]; }});
  };

  var $from = function from(source /*, mapfn, thisArg */){
    var O       = toObject(source)
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , iterFn  = getIterFn(O)
      , i, length, values, result, step, iterator;
    if(iterFn != undefined && !isArrayIter(iterFn)){
      for(iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++){
        values.push(step.value);
      } O = values;
    }
    if(mapping && aLen > 2)mapfn = ctx(mapfn, arguments[2], 2);
    for(i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++){
      result[i] = mapping ? mapfn(O[i], i) : O[i];
    }
    return result;
  };

  var $of = function of(/*...items*/){
    var index  = 0
      , length = arguments.length
      , result = allocate(this, length);
    while(length > index)result[index] = arguments[index++];
    return result;
  };

  // iOS Safari 6.x fails here
  var TO_LOCALE_BUG = !!Uint8Array && fails(function(){ arrayToLocaleString.call(new Uint8Array(1)); });

  var $toLocaleString = function toLocaleString(){
    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
  };

  var proto = {
    copyWithin: function copyWithin(target, start /*, end */){
      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
    },
    every: function every(callbackfn /*, thisArg */){
      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    fill: function fill(value /*, start, end */){ // eslint-disable-line no-unused-vars
      return arrayFill.apply(validate(this), arguments);
    },
    filter: function filter(callbackfn /*, thisArg */){
      return speciesFromList(this, arrayFilter(validate(this), callbackfn,
        arguments.length > 1 ? arguments[1] : undefined));
    },
    find: function find(predicate /*, thisArg */){
      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    findIndex: function findIndex(predicate /*, thisArg */){
      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
    },
    forEach: function forEach(callbackfn /*, thisArg */){
      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    indexOf: function indexOf(searchElement /*, fromIndex */){
      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    includes: function includes(searchElement /*, fromIndex */){
      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
    },
    join: function join(separator){ // eslint-disable-line no-unused-vars
      return arrayJoin.apply(validate(this), arguments);
    },
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */){ // eslint-disable-line no-unused-vars
      return arrayLastIndexOf.apply(validate(this), arguments);
    },
    map: function map(mapfn /*, thisArg */){
      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    reduce: function reduce(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduce.apply(validate(this), arguments);
    },
    reduceRight: function reduceRight(callbackfn /*, initialValue */){ // eslint-disable-line no-unused-vars
      return arrayReduceRight.apply(validate(this), arguments);
    },
    reverse: function reverse(){
      var that   = this
        , length = validate(that).length
        , middle = Math.floor(length / 2)
        , index  = 0
        , value;
      while(index < middle){
        value         = that[index];
        that[index++] = that[--length];
        that[length]  = value;
      } return that;
    },
    some: function some(callbackfn /*, thisArg */){
      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    },
    sort: function sort(comparefn){
      return arraySort.call(validate(this), comparefn);
    },
    subarray: function subarray(begin, end){
      var O      = validate(this)
        , length = O.length
        , $begin = toIndex(begin, length);
      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(
        O.buffer,
        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,
        toLength((end === undefined ? length : toIndex(end, length)) - $begin)
      );
    }
  };

  var $slice = function slice(start, end){
    return speciesFromList(this, arraySlice.call(validate(this), start, end));
  };

  var $set = function set(arrayLike /*, offset */){
    validate(this);
    var offset = toOffset(arguments[1], 1)
      , length = this.length
      , src    = toObject(arrayLike)
      , len    = toLength(src.length)
      , index  = 0;
    if(len + offset > length)throw RangeError(WRONG_LENGTH);
    while(index < len)this[offset + index] = src[index++];
  };

  var $iterators = {
    entries: function entries(){
      return arrayEntries.call(validate(this));
    },
    keys: function keys(){
      return arrayKeys.call(validate(this));
    },
    values: function values(){
      return arrayValues.call(validate(this));
    }
  };

  var isTAIndex = function(target, key){
    return isObject(target)
      && target[TYPED_ARRAY]
      && typeof key != 'symbol'
      && key in target
      && String(+key) == String(key);
  };
  var $getDesc = function getOwnPropertyDescriptor(target, key){
    return isTAIndex(target, key = toPrimitive(key, true))
      ? propertyDesc(2, target[key])
      : gOPD(target, key);
  };
  var $setDesc = function defineProperty(target, key, desc){
    if(isTAIndex(target, key = toPrimitive(key, true))
      && isObject(desc)
      && has(desc, 'value')
      && !has(desc, 'get')
      && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable
      && (!has(desc, 'writable') || desc.writable)
      && (!has(desc, 'enumerable') || desc.enumerable)
    ){
      target[key] = desc.value;
      return target;
    } else return dP(target, key, desc);
  };

  if(!ALL_CONSTRUCTORS){
    $GOPD.f = $getDesc;
    $DP.f   = $setDesc;
  }

  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
    getOwnPropertyDescriptor: $getDesc,
    defineProperty:           $setDesc
  });

  if(fails(function(){ arrayToString.call({}); })){
    arrayToString = arrayToLocaleString = function toString(){
      return arrayJoin.call(this);
    }
  }

  var $TypedArrayPrototype$ = redefineAll({}, proto);
  redefineAll($TypedArrayPrototype$, $iterators);
  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
  redefineAll($TypedArrayPrototype$, {
    slice:          $slice,
    set:            $set,
    constructor:    function(){ /* noop */ },
    toString:       arrayToString,
    toLocaleString: $toLocaleString
  });
  addGetter($TypedArrayPrototype$, 'buffer', 'b');
  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
  addGetter($TypedArrayPrototype$, 'byteLength', 'l');
  addGetter($TypedArrayPrototype$, 'length', 'e');
  dP($TypedArrayPrototype$, TAG, {
    get: function(){ return this[TYPED_ARRAY]; }
  });

  module.exports = function(KEY, BYTES, wrapper, CLAMPED){
    CLAMPED = !!CLAMPED;
    var NAME       = KEY + (CLAMPED ? 'Clamped' : '') + 'Array'
      , ISNT_UINT8 = NAME != 'Uint8Array'
      , GETTER     = 'get' + KEY
      , SETTER     = 'set' + KEY
      , TypedArray = global[NAME]
      , Base       = TypedArray || {}
      , TAC        = TypedArray && getPrototypeOf(TypedArray)
      , FORCED     = !TypedArray || !$typed.ABV
      , O          = {}
      , TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
    var getter = function(that, index){
      var data = that._d;
      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
    };
    var setter = function(that, index, value){
      var data = that._d;
      if(CLAMPED)value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
    };
    var addElement = function(that, index){
      dP(that, index, {
        get: function(){
          return getter(this, index);
        },
        set: function(value){
          return setter(this, index, value);
        },
        enumerable: true
      });
    };
    if(FORCED){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME, '_d');
        var index  = 0
          , offset = 0
          , buffer, byteLength, length, klass;
        if(!isObject(data)){
          length     = strictToLength(data, true)
          byteLength = length * BYTES;
          buffer     = new $ArrayBuffer(byteLength);
        } else if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          buffer = data;
          offset = toOffset($offset, BYTES);
          var $len = data.byteLength;
          if($length === undefined){
            if($len % BYTES)throw RangeError(WRONG_LENGTH);
            byteLength = $len - offset;
            if(byteLength < 0)throw RangeError(WRONG_LENGTH);
          } else {
            byteLength = toLength($length) * BYTES;
            if(byteLength + offset > $len)throw RangeError(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if(TYPED_ARRAY in data){
          return fromList(TypedArray, data);
        } else {
          return $from.call(TypedArray, data);
        }
        hide(that, '_d', {
          b: buffer,
          o: offset,
          l: byteLength,
          e: length,
          v: new $DataView(buffer)
        });
        while(index < length)addElement(that, index++);
      });
      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
      hide(TypedArrayPrototype, 'constructor', TypedArray);
    } else if(!$iterDetect(function(iter){
      // V8 works with iterators, but fails in many other cases
      // https://code.google.com/p/v8/issues/detail?id=4552
      new TypedArray(null); // eslint-disable-line no-new
      new TypedArray(iter); // eslint-disable-line no-new
    }, true)){
      TypedArray = wrapper(function(that, data, $offset, $length){
        anInstance(that, TypedArray, NAME);
        var klass;
        // `ws` module bug, temporarily remove validation length for Uint8Array
        // https://github.com/websockets/ws/pull/645
        if(!isObject(data))return new Base(strictToLength(data, ISNT_UINT8));
        if(data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER){
          return $length !== undefined
            ? new Base(data, toOffset($offset, BYTES), $length)
            : $offset !== undefined
              ? new Base(data, toOffset($offset, BYTES))
              : new Base(data);
        }
        if(TYPED_ARRAY in data)return fromList(TypedArray, data);
        return $from.call(TypedArray, data);
      });
      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function(key){
        if(!(key in TypedArray))hide(TypedArray, key, Base[key]);
      });
      TypedArray[PROTOTYPE] = TypedArrayPrototype;
      if(!LIBRARY)TypedArrayPrototype.constructor = TypedArray;
    }
    var $nativeIterator   = TypedArrayPrototype[ITERATOR]
      , CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined)
      , $iterator         = $iterators.values;
    hide(TypedArray, TYPED_CONSTRUCTOR, true);
    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
    hide(TypedArrayPrototype, VIEW, true);
    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

    if(CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)){
      dP(TypedArrayPrototype, TAG, {
        get: function(){ return NAME; }
      });
    }

    O[NAME] = TypedArray;

    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

    $export($export.S, NAME, {
      BYTES_PER_ELEMENT: BYTES,
      from: $from,
      of: $of
    });

    if(!(BYTES_PER_ELEMENT in TypedArrayPrototype))hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

    $export($export.P, NAME, proto);

    setSpecies(NAME);

    $export($export.P + $export.F * FORCED_SET, NAME, {set: $set});

    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

    $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, {toString: arrayToString});

    $export($export.P + $export.F * fails(function(){
      new TypedArray(1).slice();
    }), NAME, {slice: $slice});

    $export($export.P + $export.F * (fails(function(){
      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString()
    }) || !fails(function(){
      TypedArrayPrototype.toLocaleString.call([1, 2]);
    })), NAME, {toLocaleString: $toLocaleString});

    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
    if(!LIBRARY && !CORRECT_ITER_NAME)hide(TypedArrayPrototype, ITERATOR, $iterator);
  };
} else module.exports = function(){ /* empty */ };
},{"./_an-instance":6,"./_array-copy-within":8,"./_array-fill":9,"./_array-includes":11,"./_array-methods":12,"./_classof":17,"./_ctx":25,"./_descriptors":28,"./_export":32,"./_fails":34,"./_global":38,"./_has":39,"./_hide":40,"./_is-array-iter":46,"./_is-object":49,"./_iter-detect":54,"./_iterators":56,"./_library":58,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_object-gpo":74,"./_property-desc":85,"./_redefine-all":86,"./_same-value":89,"./_set-species":91,"./_species-constructor":95,"./_to-index":105,"./_to-integer":106,"./_to-length":108,"./_to-object":109,"./_to-primitive":110,"./_typed":113,"./_typed-buffer":112,"./_uid":114,"./_wks":117,"./core.get-iterator-method":118,"./es6.array.iterator":130}],112:[function(require,module,exports){
'use strict';
var global         = require('./_global')
  , DESCRIPTORS    = require('./_descriptors')
  , LIBRARY        = require('./_library')
  , $typed         = require('./_typed')
  , hide           = require('./_hide')
  , redefineAll    = require('./_redefine-all')
  , fails          = require('./_fails')
  , anInstance     = require('./_an-instance')
  , toInteger      = require('./_to-integer')
  , toLength       = require('./_to-length')
  , gOPN           = require('./_object-gopn').f
  , dP             = require('./_object-dp').f
  , arrayFill      = require('./_array-fill')
  , setToStringTag = require('./_set-to-string-tag')
  , ARRAY_BUFFER   = 'ArrayBuffer'
  , DATA_VIEW      = 'DataView'
  , PROTOTYPE      = 'prototype'
  , WRONG_LENGTH   = 'Wrong length!'
  , WRONG_INDEX    = 'Wrong index!'
  , $ArrayBuffer   = global[ARRAY_BUFFER]
  , $DataView      = global[DATA_VIEW]
  , Math           = global.Math
  , RangeError     = global.RangeError
  , Infinity       = global.Infinity
  , BaseBuffer     = $ArrayBuffer
  , abs            = Math.abs
  , pow            = Math.pow
  , floor          = Math.floor
  , log            = Math.log
  , LN2            = Math.LN2
  , BUFFER         = 'buffer'
  , BYTE_LENGTH    = 'byteLength'
  , BYTE_OFFSET    = 'byteOffset'
  , $BUFFER        = DESCRIPTORS ? '_b' : BUFFER
  , $LENGTH        = DESCRIPTORS ? '_l' : BYTE_LENGTH
  , $OFFSET        = DESCRIPTORS ? '_o' : BYTE_OFFSET;

// IEEE754 conversions based on https://github.com/feross/ieee754
var packIEEE754 = function(value, mLen, nBytes){
  var buffer = Array(nBytes)
    , eLen   = nBytes * 8 - mLen - 1
    , eMax   = (1 << eLen) - 1
    , eBias  = eMax >> 1
    , rt     = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0
    , i      = 0
    , s      = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0
    , e, m, c;
  value = abs(value)
  if(value != value || value === Infinity){
    m = value != value ? 1 : 0;
    e = eMax;
  } else {
    e = floor(log(value) / LN2);
    if(value * (c = pow(2, -e)) < 1){
      e--;
      c *= 2;
    }
    if(e + eBias >= 1){
      value += rt / c;
    } else {
      value += rt * pow(2, 1 - eBias);
    }
    if(value * c >= 2){
      e++;
      c /= 2;
    }
    if(e + eBias >= eMax){
      m = 0;
      e = eMax;
    } else if(e + eBias >= 1){
      m = (value * c - 1) * pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * pow(2, eBias - 1) * pow(2, mLen);
      e = 0;
    }
  }
  for(; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
  e = e << mLen | m;
  eLen += mLen;
  for(; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
  buffer[--i] |= s * 128;
  return buffer;
};
var unpackIEEE754 = function(buffer, mLen, nBytes){
  var eLen  = nBytes * 8 - mLen - 1
    , eMax  = (1 << eLen) - 1
    , eBias = eMax >> 1
    , nBits = eLen - 7
    , i     = nBytes - 1
    , s     = buffer[i--]
    , e     = s & 127
    , m;
  s >>= 7;
  for(; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
  m = e & (1 << -nBits) - 1;
  e >>= -nBits;
  nBits += mLen;
  for(; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
  if(e === 0){
    e = 1 - eBias;
  } else if(e === eMax){
    return m ? NaN : s ? -Infinity : Infinity;
  } else {
    m = m + pow(2, mLen);
    e = e - eBias;
  } return (s ? -1 : 1) * m * pow(2, e - mLen);
};

var unpackI32 = function(bytes){
  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
};
var packI8 = function(it){
  return [it & 0xff];
};
var packI16 = function(it){
  return [it & 0xff, it >> 8 & 0xff];
};
var packI32 = function(it){
  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
};
var packF64 = function(it){
  return packIEEE754(it, 52, 8);
};
var packF32 = function(it){
  return packIEEE754(it, 23, 4);
};

var addGetter = function(C, key, internal){
  dP(C[PROTOTYPE], key, {get: function(){ return this[internal]; }});
};

var get = function(view, bytes, index, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = store.slice(start, start + bytes);
  return isLittleEndian ? pack : pack.reverse();
};
var set = function(view, bytes, index, conversion, value, isLittleEndian){
  var numIndex = +index
    , intIndex = toInteger(numIndex);
  if(numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH])throw RangeError(WRONG_INDEX);
  var store = view[$BUFFER]._b
    , start = intIndex + view[$OFFSET]
    , pack  = conversion(+value);
  for(var i = 0; i < bytes; i++)store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
};

var validateArrayBufferArguments = function(that, length){
  anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
  var numberLength = +length
    , byteLength   = toLength(numberLength);
  if(numberLength != byteLength)throw RangeError(WRONG_LENGTH);
  return byteLength;
};

if(!$typed.ABV){
  $ArrayBuffer = function ArrayBuffer(length){
    var byteLength = validateArrayBufferArguments(this, length);
    this._b       = arrayFill.call(Array(byteLength), 0);
    this[$LENGTH] = byteLength;
  };

  $DataView = function DataView(buffer, byteOffset, byteLength){
    anInstance(this, $DataView, DATA_VIEW);
    anInstance(buffer, $ArrayBuffer, DATA_VIEW);
    var bufferLength = buffer[$LENGTH]
      , offset       = toInteger(byteOffset);
    if(offset < 0 || offset > bufferLength)throw RangeError('Wrong offset!');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
    if(offset + byteLength > bufferLength)throw RangeError(WRONG_LENGTH);
    this[$BUFFER] = buffer;
    this[$OFFSET] = offset;
    this[$LENGTH] = byteLength;
  };

  if(DESCRIPTORS){
    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
    addGetter($DataView, BUFFER, '_b');
    addGetter($DataView, BYTE_LENGTH, '_l');
    addGetter($DataView, BYTE_OFFSET, '_o');
  }

  redefineAll($DataView[PROTOTYPE], {
    getInt8: function getInt8(byteOffset){
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset){
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /*, littleEndian */){
      var bytes = get(this, 2, byteOffset, arguments[1]);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1]));
    },
    getUint32: function getUint32(byteOffset /*, littleEndian */){
      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
    },
    getFloat64: function getFloat64(byteOffset /*, littleEndian */){
      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
    },
    setInt8: function setInt8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setUint8: function setUint8(byteOffset, value){
      set(this, 1, byteOffset, packI8, value);
    },
    setInt16: function setInt16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setUint16: function setUint16(byteOffset, value /*, littleEndian */){
      set(this, 2, byteOffset, packI16, value, arguments[2]);
    },
    setInt32: function setInt32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setUint32: function setUint32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packI32, value, arguments[2]);
    },
    setFloat32: function setFloat32(byteOffset, value /*, littleEndian */){
      set(this, 4, byteOffset, packF32, value, arguments[2]);
    },
    setFloat64: function setFloat64(byteOffset, value /*, littleEndian */){
      set(this, 8, byteOffset, packF64, value, arguments[2]);
    }
  });
} else {
  if(!fails(function(){
    new $ArrayBuffer;     // eslint-disable-line no-new
  }) || !fails(function(){
    new $ArrayBuffer(.5); // eslint-disable-line no-new
  })){
    $ArrayBuffer = function ArrayBuffer(length){
      return new BaseBuffer(validateArrayBufferArguments(this, length));
    };
    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
    for(var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j; ){
      if(!((key = keys[j++]) in $ArrayBuffer))hide($ArrayBuffer, key, BaseBuffer[key]);
    };
    if(!LIBRARY)ArrayBufferProto.constructor = $ArrayBuffer;
  }
  // iOS Safari 7.x bug
  var view = new $DataView(new $ArrayBuffer(2))
    , $setInt8 = $DataView[PROTOTYPE].setInt8;
  view.setInt8(0, 2147483648);
  view.setInt8(1, 2147483649);
  if(view.getInt8(0) || !view.getInt8(1))redefineAll($DataView[PROTOTYPE], {
    setInt8: function setInt8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value){
      $setInt8.call(this, byteOffset, value << 24 >> 24);
    }
  }, true);
}
setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);
hide($DataView[PROTOTYPE], $typed.VIEW, true);
exports[ARRAY_BUFFER] = $ArrayBuffer;
exports[DATA_VIEW] = $DataView;
},{"./_an-instance":6,"./_array-fill":9,"./_descriptors":28,"./_fails":34,"./_global":38,"./_hide":40,"./_library":58,"./_object-dp":67,"./_object-gopn":72,"./_redefine-all":86,"./_set-to-string-tag":92,"./_to-integer":106,"./_to-length":108,"./_typed":113}],113:[function(require,module,exports){
var global = require('./_global')
  , hide   = require('./_hide')
  , uid    = require('./_uid')
  , TYPED  = uid('typed_array')
  , VIEW   = uid('view')
  , ABV    = !!(global.ArrayBuffer && global.DataView)
  , CONSTR = ABV
  , i = 0, l = 9, Typed;

var TypedArrayConstructors = (
  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'
).split(',');

while(i < l){
  if(Typed = global[TypedArrayConstructors[i++]]){
    hide(Typed.prototype, TYPED, true);
    hide(Typed.prototype, VIEW, true);
  } else CONSTR = false;
}

module.exports = {
  ABV:    ABV,
  CONSTR: CONSTR,
  TYPED:  TYPED,
  VIEW:   VIEW
};
},{"./_global":38,"./_hide":40,"./_uid":114}],114:[function(require,module,exports){
var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};
},{}],115:[function(require,module,exports){
var global         = require('./_global')
  , core           = require('./_core')
  , LIBRARY        = require('./_library')
  , wksExt         = require('./_wks-ext')
  , defineProperty = require('./_object-dp').f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};
},{"./_core":23,"./_global":38,"./_library":58,"./_object-dp":67,"./_wks-ext":116}],116:[function(require,module,exports){
exports.f = require('./_wks');
},{"./_wks":117}],117:[function(require,module,exports){
var store      = require('./_shared')('wks')
  , uid        = require('./_uid')
  , Symbol     = require('./_global').Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;
},{"./_global":38,"./_shared":94,"./_uid":114}],118:[function(require,module,exports){
var classof   = require('./_classof')
  , ITERATOR  = require('./_wks')('iterator')
  , Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};
},{"./_classof":17,"./_core":23,"./_iterators":56,"./_wks":117}],119:[function(require,module,exports){
// https://github.com/benjamingr/RexExp.escape
var $export = require('./_export')
  , $re     = require('./_replacer')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

$export($export.S, 'RegExp', {escape: function escape(it){ return $re(it); }});

},{"./_export":32,"./_replacer":88}],120:[function(require,module,exports){
// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {copyWithin: require('./_array-copy-within')});

require('./_add-to-unscopables')('copyWithin');
},{"./_add-to-unscopables":5,"./_array-copy-within":8,"./_export":32}],121:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $every  = require('./_array-methods')(4);

$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {
  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
  every: function every(callbackfn /* , thisArg */){
    return $every(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],122:[function(require,module,exports){
// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
var $export = require('./_export');

$export($export.P, 'Array', {fill: require('./_array-fill')});

require('./_add-to-unscopables')('fill');
},{"./_add-to-unscopables":5,"./_array-fill":9,"./_export":32}],123:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $filter = require('./_array-methods')(2);

$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {
  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
  filter: function filter(callbackfn /* , thisArg */){
    return $filter(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],124:[function(require,module,exports){
'use strict';
// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(6)
  , KEY     = 'findIndex'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  findIndex: function findIndex(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":5,"./_array-methods":12,"./_export":32}],125:[function(require,module,exports){
'use strict';
// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)
var $export = require('./_export')
  , $find   = require('./_array-methods')(5)
  , KEY     = 'find'
  , forced  = true;
// Shouldn't skip holes
if(KEY in [])Array(1)[KEY](function(){ forced = false; });
$export($export.P + $export.F * forced, 'Array', {
  find: function find(callbackfn/*, that = undefined */){
    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});
require('./_add-to-unscopables')(KEY);
},{"./_add-to-unscopables":5,"./_array-methods":12,"./_export":32}],126:[function(require,module,exports){
'use strict';
var $export  = require('./_export')
  , $forEach = require('./_array-methods')(0)
  , STRICT   = require('./_strict-method')([].forEach, true);

$export($export.P + $export.F * !STRICT, 'Array', {
  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
  forEach: function forEach(callbackfn /* , thisArg */){
    return $forEach(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],127:[function(require,module,exports){
'use strict';
var ctx            = require('./_ctx')
  , $export        = require('./_export')
  , toObject       = require('./_to-object')
  , call           = require('./_iter-call')
  , isArrayIter    = require('./_is-array-iter')
  , toLength       = require('./_to-length')
  , createProperty = require('./_create-property')
  , getIterFn      = require('./core.get-iterator-method');

$export($export.S + $export.F * !require('./_iter-detect')(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});

},{"./_create-property":24,"./_ctx":25,"./_export":32,"./_is-array-iter":46,"./_iter-call":51,"./_iter-detect":54,"./_to-length":108,"./_to-object":109,"./core.get-iterator-method":118}],128:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , $indexOf      = require('./_array-includes')(false)
  , $native       = [].indexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
  indexOf: function indexOf(searchElement /*, fromIndex = 0 */){
    return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0
      : $indexOf(this, searchElement, arguments[1]);
  }
});
},{"./_array-includes":11,"./_export":32,"./_strict-method":96}],129:[function(require,module,exports){
// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
var $export = require('./_export');

$export($export.S, 'Array', {isArray: require('./_is-array')});
},{"./_export":32,"./_is-array":47}],130:[function(require,module,exports){
'use strict';
var addToUnscopables = require('./_add-to-unscopables')
  , step             = require('./_iter-step')
  , Iterators        = require('./_iterators')
  , toIObject        = require('./_to-iobject');

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');
},{"./_add-to-unscopables":5,"./_iter-define":53,"./_iter-step":55,"./_iterators":56,"./_to-iobject":107}],131:[function(require,module,exports){
'use strict';
// 22.1.3.13 Array.prototype.join(separator)
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , arrayJoin = [].join;

// fallback for not array-like strings
$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {
  join: function join(separator){
    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
  }
});
},{"./_export":32,"./_iobject":45,"./_strict-method":96,"./_to-iobject":107}],132:[function(require,module,exports){
'use strict';
var $export       = require('./_export')
  , toIObject     = require('./_to-iobject')
  , toInteger     = require('./_to-integer')
  , toLength      = require('./_to-length')
  , $native       = [].lastIndexOf
  , NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {
  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
  lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */){
    // convert -0 to +0
    if(NEGATIVE_ZERO)return $native.apply(this, arguments) || 0;
    var O      = toIObject(this)
      , length = toLength(O.length)
      , index  = length - 1;
    if(arguments.length > 1)index = Math.min(index, toInteger(arguments[1]));
    if(index < 0)index = length + index;
    for(;index >= 0; index--)if(index in O)if(O[index] === searchElement)return index || 0;
    return -1;
  }
});
},{"./_export":32,"./_strict-method":96,"./_to-integer":106,"./_to-iobject":107,"./_to-length":108}],133:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $map    = require('./_array-methods')(1);

$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {
  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
  map: function map(callbackfn /* , thisArg */){
    return $map(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],134:[function(require,module,exports){
'use strict';
var $export        = require('./_export')
  , createProperty = require('./_create-property');

// WebKit Array.of isn't generic
$export($export.S + $export.F * require('./_fails')(function(){
  function F(){}
  return !(Array.of.call(F) instanceof F);
}), 'Array', {
  // 22.1.2.3 Array.of( ...items)
  of: function of(/* ...args */){
    var index  = 0
      , aLen   = arguments.length
      , result = new (typeof this == 'function' ? this : Array)(aLen);
    while(aLen > index)createProperty(result, index, arguments[index++]);
    result.length = aLen;
    return result;
  }
});
},{"./_create-property":24,"./_export":32,"./_fails":34}],135:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {
  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
  reduceRight: function reduceRight(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], true);
  }
});
},{"./_array-reduce":13,"./_export":32,"./_strict-method":96}],136:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $reduce = require('./_array-reduce');

$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {
  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
  reduce: function reduce(callbackfn /* , initialValue */){
    return $reduce(this, callbackfn, arguments.length, arguments[1], false);
  }
});
},{"./_array-reduce":13,"./_export":32,"./_strict-method":96}],137:[function(require,module,exports){
'use strict';
var $export    = require('./_export')
  , html       = require('./_html')
  , cof        = require('./_cof')
  , toIndex    = require('./_to-index')
  , toLength   = require('./_to-length')
  , arraySlice = [].slice;

// fallback for not array-like ES3 strings and DOM objects
$export($export.P + $export.F * require('./_fails')(function(){
  if(html)arraySlice.call(html);
}), 'Array', {
  slice: function slice(begin, end){
    var len   = toLength(this.length)
      , klass = cof(this);
    end = end === undefined ? len : end;
    if(klass == 'Array')return arraySlice.call(this, begin, end);
    var start  = toIndex(begin, len)
      , upTo   = toIndex(end, len)
      , size   = toLength(upTo - start)
      , cloned = Array(size)
      , i      = 0;
    for(; i < size; i++)cloned[i] = klass == 'String'
      ? this.charAt(start + i)
      : this[start + i];
    return cloned;
  }
});
},{"./_cof":18,"./_export":32,"./_fails":34,"./_html":41,"./_to-index":105,"./_to-length":108}],138:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $some   = require('./_array-methods')(3);

$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {
  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
  some: function some(callbackfn /* , thisArg */){
    return $some(this, callbackfn, arguments[1]);
  }
});
},{"./_array-methods":12,"./_export":32,"./_strict-method":96}],139:[function(require,module,exports){
'use strict';
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , toObject  = require('./_to-object')
  , fails     = require('./_fails')
  , $sort     = [].sort
  , test      = [1, 2, 3];

$export($export.P + $export.F * (fails(function(){
  // IE8-
  test.sort(undefined);
}) || !fails(function(){
  // V8 bug
  test.sort(null);
  // Old WebKit
}) || !require('./_strict-method')($sort)), 'Array', {
  // 22.1.3.25 Array.prototype.sort(comparefn)
  sort: function sort(comparefn){
    return comparefn === undefined
      ? $sort.call(toObject(this))
      : $sort.call(toObject(this), aFunction(comparefn));
  }
});
},{"./_a-function":3,"./_export":32,"./_fails":34,"./_strict-method":96,"./_to-object":109}],140:[function(require,module,exports){
require('./_set-species')('Array');
},{"./_set-species":91}],141:[function(require,module,exports){
// 20.3.3.1 / 15.9.4.4 Date.now()
var $export = require('./_export');

$export($export.S, 'Date', {now: function(){ return new Date().getTime(); }});
},{"./_export":32}],142:[function(require,module,exports){
'use strict';
// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()
var $export = require('./_export')
  , fails   = require('./_fails')
  , getTime = Date.prototype.getTime;

var lz = function(num){
  return num > 9 ? num : '0' + num;
};

// PhantomJS / old WebKit has a broken implementations
$export($export.P + $export.F * (fails(function(){
  return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
}) || !fails(function(){
  new Date(NaN).toISOString();
})), 'Date', {
  toISOString: function toISOString(){
    if(!isFinite(getTime.call(this)))throw RangeError('Invalid time value');
    var d = this
      , y = d.getUTCFullYear()
      , m = d.getUTCMilliseconds()
      , s = y < 0 ? '-' : y > 9999 ? '+' : '';
    return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +
      '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +
      'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +
      ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
  }
});
},{"./_export":32,"./_fails":34}],143:[function(require,module,exports){
'use strict';
var $export     = require('./_export')
  , toObject    = require('./_to-object')
  , toPrimitive = require('./_to-primitive');

$export($export.P + $export.F * require('./_fails')(function(){
  return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({toISOString: function(){ return 1; }}) !== 1;
}), 'Date', {
  toJSON: function toJSON(key){
    var O  = toObject(this)
      , pv = toPrimitive(O);
    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
  }
});
},{"./_export":32,"./_fails":34,"./_to-object":109,"./_to-primitive":110}],144:[function(require,module,exports){
var TO_PRIMITIVE = require('./_wks')('toPrimitive')
  , proto        = Date.prototype;

if(!(TO_PRIMITIVE in proto))require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));
},{"./_date-to-primitive":26,"./_hide":40,"./_wks":117}],145:[function(require,module,exports){
var DateProto    = Date.prototype
  , INVALID_DATE = 'Invalid Date'
  , TO_STRING    = 'toString'
  , $toString    = DateProto[TO_STRING]
  , getTime      = DateProto.getTime;
if(new Date(NaN) + '' != INVALID_DATE){
  require('./_redefine')(DateProto, TO_STRING, function toString(){
    var value = getTime.call(this);
    return value === value ? $toString.call(this) : INVALID_DATE;
  });
}
},{"./_redefine":87}],146:[function(require,module,exports){
// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
var $export = require('./_export');

$export($export.P, 'Function', {bind: require('./_bind')});
},{"./_bind":16,"./_export":32}],147:[function(require,module,exports){
'use strict';
var isObject       = require('./_is-object')
  , getPrototypeOf = require('./_object-gpo')
  , HAS_INSTANCE   = require('./_wks')('hasInstance')
  , FunctionProto  = Function.prototype;
// 19.2.3.6 Function.prototype[@@hasInstance](V)
if(!(HAS_INSTANCE in FunctionProto))require('./_object-dp').f(FunctionProto, HAS_INSTANCE, {value: function(O){
  if(typeof this != 'function' || !isObject(O))return false;
  if(!isObject(this.prototype))return O instanceof this;
  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
  while(O = getPrototypeOf(O))if(this.prototype === O)return true;
  return false;
}});
},{"./_is-object":49,"./_object-dp":67,"./_object-gpo":74,"./_wks":117}],148:[function(require,module,exports){
var dP         = require('./_object-dp').f
  , createDesc = require('./_property-desc')
  , has        = require('./_has')
  , FProto     = Function.prototype
  , nameRE     = /^\s*function ([^ (]*)/
  , NAME       = 'name';

var isExtensible = Object.isExtensible || function(){
  return true;
};

// 19.2.4.2 name
NAME in FProto || require('./_descriptors') && dP(FProto, NAME, {
  configurable: true,
  get: function(){
    try {
      var that = this
        , name = ('' + that).match(nameRE)[1];
      has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
      return name;
    } catch(e){
      return '';
    }
  }
});
},{"./_descriptors":28,"./_has":39,"./_object-dp":67,"./_property-desc":85}],149:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.1 Map Objects
module.exports = require('./_collection')('Map', function(get){
  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.1.3.6 Map.prototype.get(key)
  get: function get(key){
    var entry = strong.getEntry(this, key);
    return entry && entry.v;
  },
  // 23.1.3.9 Map.prototype.set(key, value)
  set: function set(key, value){
    return strong.def(this, key === 0 ? 0 : key, value);
  }
}, strong, true);
},{"./_collection":22,"./_collection-strong":19}],150:[function(require,module,exports){
// 20.2.2.3 Math.acosh(x)
var $export = require('./_export')
  , log1p   = require('./_math-log1p')
  , sqrt    = Math.sqrt
  , $acosh  = Math.acosh;

$export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity
), 'Math', {
  acosh: function acosh(x){
    return (x = +x) < 1 ? NaN : x > 94906265.62425156
      ? Math.log(x) + Math.LN2
      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
  }
});
},{"./_export":32,"./_math-log1p":60}],151:[function(require,module,exports){
// 20.2.2.5 Math.asinh(x)
var $export = require('./_export')
  , $asinh  = Math.asinh;

function asinh(x){
  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
}

// Tor Browser bug: Math.asinh(0) -> -0 
$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', {asinh: asinh});
},{"./_export":32}],152:[function(require,module,exports){
// 20.2.2.7 Math.atanh(x)
var $export = require('./_export')
  , $atanh  = Math.atanh;

// Tor Browser bug: Math.atanh(-0) -> 0 
$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
  atanh: function atanh(x){
    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
  }
});
},{"./_export":32}],153:[function(require,module,exports){
// 20.2.2.9 Math.cbrt(x)
var $export = require('./_export')
  , sign    = require('./_math-sign');

$export($export.S, 'Math', {
  cbrt: function cbrt(x){
    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
  }
});
},{"./_export":32,"./_math-sign":61}],154:[function(require,module,exports){
// 20.2.2.11 Math.clz32(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  clz32: function clz32(x){
    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
  }
});
},{"./_export":32}],155:[function(require,module,exports){
// 20.2.2.12 Math.cosh(x)
var $export = require('./_export')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  cosh: function cosh(x){
    return (exp(x = +x) + exp(-x)) / 2;
  }
});
},{"./_export":32}],156:[function(require,module,exports){
// 20.2.2.14 Math.expm1(x)
var $export = require('./_export')
  , $expm1  = require('./_math-expm1');

$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', {expm1: $expm1});
},{"./_export":32,"./_math-expm1":59}],157:[function(require,module,exports){
// 20.2.2.16 Math.fround(x)
var $export   = require('./_export')
  , sign      = require('./_math-sign')
  , pow       = Math.pow
  , EPSILON   = pow(2, -52)
  , EPSILON32 = pow(2, -23)
  , MAX32     = pow(2, 127) * (2 - EPSILON32)
  , MIN32     = pow(2, -126);

var roundTiesToEven = function(n){
  return n + 1 / EPSILON - 1 / EPSILON;
};


$export($export.S, 'Math', {
  fround: function fround(x){
    var $abs  = Math.abs(x)
      , $sign = sign(x)
      , a, result;
    if($abs < MIN32)return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
    a = (1 + EPSILON32 / EPSILON) * $abs;
    result = a - (a - $abs);
    if(result > MAX32 || result != result)return $sign * Infinity;
    return $sign * result;
  }
});
},{"./_export":32,"./_math-sign":61}],158:[function(require,module,exports){
// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
var $export = require('./_export')
  , abs     = Math.abs;

$export($export.S, 'Math', {
  hypot: function hypot(value1, value2){ // eslint-disable-line no-unused-vars
    var sum  = 0
      , i    = 0
      , aLen = arguments.length
      , larg = 0
      , arg, div;
    while(i < aLen){
      arg = abs(arguments[i++]);
      if(larg < arg){
        div  = larg / arg;
        sum  = sum * div * div + 1;
        larg = arg;
      } else if(arg > 0){
        div  = arg / larg;
        sum += div * div;
      } else sum += arg;
    }
    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
  }
});
},{"./_export":32}],159:[function(require,module,exports){
// 20.2.2.18 Math.imul(x, y)
var $export = require('./_export')
  , $imul   = Math.imul;

// some WebKit versions fails with big numbers, some has wrong arity
$export($export.S + $export.F * require('./_fails')(function(){
  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
}), 'Math', {
  imul: function imul(x, y){
    var UINT16 = 0xffff
      , xn = +x
      , yn = +y
      , xl = UINT16 & xn
      , yl = UINT16 & yn;
    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
  }
});
},{"./_export":32,"./_fails":34}],160:[function(require,module,exports){
// 20.2.2.21 Math.log10(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log10: function log10(x){
    return Math.log(x) / Math.LN10;
  }
});
},{"./_export":32}],161:[function(require,module,exports){
// 20.2.2.20 Math.log1p(x)
var $export = require('./_export');

$export($export.S, 'Math', {log1p: require('./_math-log1p')});
},{"./_export":32,"./_math-log1p":60}],162:[function(require,module,exports){
// 20.2.2.22 Math.log2(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  log2: function log2(x){
    return Math.log(x) / Math.LN2;
  }
});
},{"./_export":32}],163:[function(require,module,exports){
// 20.2.2.28 Math.sign(x)
var $export = require('./_export');

$export($export.S, 'Math', {sign: require('./_math-sign')});
},{"./_export":32,"./_math-sign":61}],164:[function(require,module,exports){
// 20.2.2.30 Math.sinh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

// V8 near Chromium 38 has a problem with very small numbers
$export($export.S + $export.F * require('./_fails')(function(){
  return !Math.sinh(-2e-17) != -2e-17;
}), 'Math', {
  sinh: function sinh(x){
    return Math.abs(x = +x) < 1
      ? (expm1(x) - expm1(-x)) / 2
      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
  }
});
},{"./_export":32,"./_fails":34,"./_math-expm1":59}],165:[function(require,module,exports){
// 20.2.2.33 Math.tanh(x)
var $export = require('./_export')
  , expm1   = require('./_math-expm1')
  , exp     = Math.exp;

$export($export.S, 'Math', {
  tanh: function tanh(x){
    var a = expm1(x = +x)
      , b = expm1(-x);
    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
  }
});
},{"./_export":32,"./_math-expm1":59}],166:[function(require,module,exports){
// 20.2.2.34 Math.trunc(x)
var $export = require('./_export');

$export($export.S, 'Math', {
  trunc: function trunc(it){
    return (it > 0 ? Math.floor : Math.ceil)(it);
  }
});
},{"./_export":32}],167:[function(require,module,exports){
'use strict';
var global            = require('./_global')
  , has               = require('./_has')
  , cof               = require('./_cof')
  , inheritIfRequired = require('./_inherit-if-required')
  , toPrimitive       = require('./_to-primitive')
  , fails             = require('./_fails')
  , gOPN              = require('./_object-gopn').f
  , gOPD              = require('./_object-gopd').f
  , dP                = require('./_object-dp').f
  , $trim             = require('./_string-trim').trim
  , NUMBER            = 'Number'
  , $Number           = global[NUMBER]
  , Base              = $Number
  , proto             = $Number.prototype
  // Opera ~12 has broken Object#toString
  , BROKEN_COF        = cof(require('./_object-create')(proto)) == NUMBER
  , TRIM              = 'trim' in String.prototype;

// 7.1.3 ToNumber(argument)
var toNumber = function(argument){
  var it = toPrimitive(argument, false);
  if(typeof it == 'string' && it.length > 2){
    it = TRIM ? it.trim() : $trim(it, 3);
    var first = it.charCodeAt(0)
      , third, radix, maxCode;
    if(first === 43 || first === 45){
      third = it.charCodeAt(2);
      if(third === 88 || third === 120)return NaN; // Number('+0x1') should be NaN, old V8 fix
    } else if(first === 48){
      switch(it.charCodeAt(1)){
        case 66 : case 98  : radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i
        case 79 : case 111 : radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i
        default : return +it;
      }
      for(var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++){
        code = digits.charCodeAt(i);
        // parseInt parses a string to a first unavailable symbol
        // but ToNumber should return NaN if a string contains unavailable symbols
        if(code < 48 || code > maxCode)return NaN;
      } return parseInt(digits, radix);
    }
  } return +it;
};

if(!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')){
  $Number = function Number(value){
    var it = arguments.length < 1 ? 0 : value
      , that = this;
    return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function(){ proto.valueOf.call(that); }) : cof(that) != NUMBER)
        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
  };
  for(var keys = require('./_descriptors') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +
    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'
  ).split(','), j = 0, key; keys.length > j; j++){
    if(has(Base, key = keys[j]) && !has($Number, key)){
      dP($Number, key, gOPD(Base, key));
    }
  }
  $Number.prototype = proto;
  proto.constructor = $Number;
  require('./_redefine')(global, NUMBER, $Number);
}
},{"./_cof":18,"./_descriptors":28,"./_fails":34,"./_global":38,"./_has":39,"./_inherit-if-required":43,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_redefine":87,"./_string-trim":102,"./_to-primitive":110}],168:[function(require,module,exports){
// 20.1.2.1 Number.EPSILON
var $export = require('./_export');

$export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
},{"./_export":32}],169:[function(require,module,exports){
// 20.1.2.2 Number.isFinite(number)
var $export   = require('./_export')
  , _isFinite = require('./_global').isFinite;

$export($export.S, 'Number', {
  isFinite: function isFinite(it){
    return typeof it == 'number' && _isFinite(it);
  }
});
},{"./_export":32,"./_global":38}],170:[function(require,module,exports){
// 20.1.2.3 Number.isInteger(number)
var $export = require('./_export');

$export($export.S, 'Number', {isInteger: require('./_is-integer')});
},{"./_export":32,"./_is-integer":48}],171:[function(require,module,exports){
// 20.1.2.4 Number.isNaN(number)
var $export = require('./_export');

$export($export.S, 'Number', {
  isNaN: function isNaN(number){
    return number != number;
  }
});
},{"./_export":32}],172:[function(require,module,exports){
// 20.1.2.5 Number.isSafeInteger(number)
var $export   = require('./_export')
  , isInteger = require('./_is-integer')
  , abs       = Math.abs;

$export($export.S, 'Number', {
  isSafeInteger: function isSafeInteger(number){
    return isInteger(number) && abs(number) <= 0x1fffffffffffff;
  }
});
},{"./_export":32,"./_is-integer":48}],173:[function(require,module,exports){
// 20.1.2.6 Number.MAX_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
},{"./_export":32}],174:[function(require,module,exports){
// 20.1.2.10 Number.MIN_SAFE_INTEGER
var $export = require('./_export');

$export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
},{"./_export":32}],175:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 20.1.2.12 Number.parseFloat(string)
$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', {parseFloat: $parseFloat});
},{"./_export":32,"./_parse-float":81}],176:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 20.1.2.13 Number.parseInt(string, radix)
$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});
},{"./_export":32,"./_parse-int":82}],177:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , toInteger    = require('./_to-integer')
  , aNumberValue = require('./_a-number-value')
  , repeat       = require('./_string-repeat')
  , $toFixed     = 1..toFixed
  , floor        = Math.floor
  , data         = [0, 0, 0, 0, 0, 0]
  , ERROR        = 'Number.toFixed: incorrect invocation!'
  , ZERO         = '0';

var multiply = function(n, c){
  var i  = -1
    , c2 = c;
  while(++i < 6){
    c2 += n * data[i];
    data[i] = c2 % 1e7;
    c2 = floor(c2 / 1e7);
  }
};
var divide = function(n){
  var i = 6
    , c = 0;
  while(--i >= 0){
    c += data[i];
    data[i] = floor(c / n);
    c = (c % n) * 1e7;
  }
};
var numToString = function(){
  var i = 6
    , s = '';
  while(--i >= 0){
    if(s !== '' || i === 0 || data[i] !== 0){
      var t = String(data[i]);
      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
    }
  } return s;
};
var pow = function(x, n, acc){
  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
};
var log = function(x){
  var n  = 0
    , x2 = x;
  while(x2 >= 4096){
    n += 12;
    x2 /= 4096;
  }
  while(x2 >= 2){
    n  += 1;
    x2 /= 2;
  } return n;
};

$export($export.P + $export.F * (!!$toFixed && (
  0.00008.toFixed(3) !== '0.000' ||
  0.9.toFixed(0) !== '1' ||
  1.255.toFixed(2) !== '1.25' ||
  1000000000000000128..toFixed(0) !== '1000000000000000128'
) || !require('./_fails')(function(){
  // V8 ~ Android 4.3-
  $toFixed.call({});
})), 'Number', {
  toFixed: function toFixed(fractionDigits){
    var x = aNumberValue(this, ERROR)
      , f = toInteger(fractionDigits)
      , s = ''
      , m = ZERO
      , e, z, j, k;
    if(f < 0 || f > 20)throw RangeError(ERROR);
    if(x != x)return 'NaN';
    if(x <= -1e21 || x >= 1e21)return String(x);
    if(x < 0){
      s = '-';
      x = -x;
    }
    if(x > 1e-21){
      e = log(x * pow(2, 69, 1)) - 69;
      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
      z *= 0x10000000000000;
      e = 52 - e;
      if(e > 0){
        multiply(0, z);
        j = f;
        while(j >= 7){
          multiply(1e7, 0);
          j -= 7;
        }
        multiply(pow(10, j, 1), 0);
        j = e - 1;
        while(j >= 23){
          divide(1 << 23);
          j -= 23;
        }
        divide(1 << j);
        multiply(1, 1);
        divide(2);
        m = numToString();
      } else {
        multiply(0, z);
        multiply(1 << -e, 0);
        m = numToString() + repeat.call(ZERO, f);
      }
    }
    if(f > 0){
      k = m.length;
      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
    } else {
      m = s + m;
    } return m;
  }
});
},{"./_a-number-value":4,"./_export":32,"./_fails":34,"./_string-repeat":101,"./_to-integer":106}],178:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $fails       = require('./_fails')
  , aNumberValue = require('./_a-number-value')
  , $toPrecision = 1..toPrecision;

$export($export.P + $export.F * ($fails(function(){
  // IE7-
  return $toPrecision.call(1, undefined) !== '1';
}) || !$fails(function(){
  // V8 ~ Android 4.3-
  $toPrecision.call({});
})), 'Number', {
  toPrecision: function toPrecision(precision){
    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision); 
  }
});
},{"./_a-number-value":4,"./_export":32,"./_fails":34}],179:[function(require,module,exports){
// 19.1.3.1 Object.assign(target, source)
var $export = require('./_export');

$export($export.S + $export.F, 'Object', {assign: require('./_object-assign')});
},{"./_export":32,"./_object-assign":65}],180:[function(require,module,exports){
var $export = require('./_export')
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: require('./_object-create')});
},{"./_export":32,"./_object-create":66}],181:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperties: require('./_object-dps')});
},{"./_descriptors":28,"./_export":32,"./_object-dps":68}],182:[function(require,module,exports){
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {defineProperty: require('./_object-dp').f});
},{"./_descriptors":28,"./_export":32,"./_object-dp":67}],183:[function(require,module,exports){
// 19.1.2.5 Object.freeze(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('freeze', function($freeze){
  return function freeze(it){
    return $freeze && isObject(it) ? $freeze(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],184:[function(require,module,exports){
// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
var toIObject                 = require('./_to-iobject')
  , $getOwnPropertyDescriptor = require('./_object-gopd').f;

require('./_object-sap')('getOwnPropertyDescriptor', function(){
  return function getOwnPropertyDescriptor(it, key){
    return $getOwnPropertyDescriptor(toIObject(it), key);
  };
});
},{"./_object-gopd":70,"./_object-sap":78,"./_to-iobject":107}],185:[function(require,module,exports){
// 19.1.2.7 Object.getOwnPropertyNames(O)
require('./_object-sap')('getOwnPropertyNames', function(){
  return require('./_object-gopn-ext').f;
});
},{"./_object-gopn-ext":71,"./_object-sap":78}],186:[function(require,module,exports){
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = require('./_to-object')
  , $getPrototypeOf = require('./_object-gpo');

require('./_object-sap')('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});
},{"./_object-gpo":74,"./_object-sap":78,"./_to-object":109}],187:[function(require,module,exports){
// 19.1.2.11 Object.isExtensible(O)
var isObject = require('./_is-object');

require('./_object-sap')('isExtensible', function($isExtensible){
  return function isExtensible(it){
    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
  };
});
},{"./_is-object":49,"./_object-sap":78}],188:[function(require,module,exports){
// 19.1.2.12 Object.isFrozen(O)
var isObject = require('./_is-object');

require('./_object-sap')('isFrozen', function($isFrozen){
  return function isFrozen(it){
    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
  };
});
},{"./_is-object":49,"./_object-sap":78}],189:[function(require,module,exports){
// 19.1.2.13 Object.isSealed(O)
var isObject = require('./_is-object');

require('./_object-sap')('isSealed', function($isSealed){
  return function isSealed(it){
    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
  };
});
},{"./_is-object":49,"./_object-sap":78}],190:[function(require,module,exports){
// 19.1.3.10 Object.is(value1, value2)
var $export = require('./_export');
$export($export.S, 'Object', {is: require('./_same-value')});
},{"./_export":32,"./_same-value":89}],191:[function(require,module,exports){
// 19.1.2.14 Object.keys(O)
var toObject = require('./_to-object')
  , $keys    = require('./_object-keys');

require('./_object-sap')('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});
},{"./_object-keys":76,"./_object-sap":78,"./_to-object":109}],192:[function(require,module,exports){
// 19.1.2.15 Object.preventExtensions(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('preventExtensions', function($preventExtensions){
  return function preventExtensions(it){
    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],193:[function(require,module,exports){
// 19.1.2.17 Object.seal(O)
var isObject = require('./_is-object')
  , meta     = require('./_meta').onFreeze;

require('./_object-sap')('seal', function($seal){
  return function seal(it){
    return $seal && isObject(it) ? $seal(meta(it)) : it;
  };
});
},{"./_is-object":49,"./_meta":62,"./_object-sap":78}],194:[function(require,module,exports){
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {setPrototypeOf: require('./_set-proto').set});
},{"./_export":32,"./_set-proto":90}],195:[function(require,module,exports){
'use strict';
// 19.1.3.6 Object.prototype.toString()
var classof = require('./_classof')
  , test    = {};
test[require('./_wks')('toStringTag')] = 'z';
if(test + '' != '[object z]'){
  require('./_redefine')(Object.prototype, 'toString', function toString(){
    return '[object ' + classof(this) + ']';
  }, true);
}
},{"./_classof":17,"./_redefine":87,"./_wks":117}],196:[function(require,module,exports){
var $export     = require('./_export')
  , $parseFloat = require('./_parse-float');
// 18.2.4 parseFloat(string)
$export($export.G + $export.F * (parseFloat != $parseFloat), {parseFloat: $parseFloat});
},{"./_export":32,"./_parse-float":81}],197:[function(require,module,exports){
var $export   = require('./_export')
  , $parseInt = require('./_parse-int');
// 18.2.5 parseInt(string, radix)
$export($export.G + $export.F * (parseInt != $parseInt), {parseInt: $parseInt});
},{"./_export":32,"./_parse-int":82}],198:[function(require,module,exports){
'use strict';
var LIBRARY            = require('./_library')
  , global             = require('./_global')
  , ctx                = require('./_ctx')
  , classof            = require('./_classof')
  , $export            = require('./_export')
  , isObject           = require('./_is-object')
  , aFunction          = require('./_a-function')
  , anInstance         = require('./_an-instance')
  , forOf              = require('./_for-of')
  , speciesConstructor = require('./_species-constructor')
  , task               = require('./_task').set
  , microtask          = require('./_microtask')()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = require('./_redefine-all')($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});
},{"./_a-function":3,"./_an-instance":6,"./_classof":17,"./_core":23,"./_ctx":25,"./_export":32,"./_for-of":37,"./_global":38,"./_is-object":49,"./_iter-detect":54,"./_library":58,"./_microtask":64,"./_redefine-all":86,"./_set-species":91,"./_set-to-string-tag":92,"./_species-constructor":95,"./_task":104,"./_wks":117}],199:[function(require,module,exports){
// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
var $export   = require('./_export')
  , aFunction = require('./_a-function')
  , anObject  = require('./_an-object')
  , rApply    = (require('./_global').Reflect || {}).apply
  , fApply    = Function.apply;
// MS Edge argumentsList argument is optional
$export($export.S + $export.F * !require('./_fails')(function(){
  rApply(function(){});
}), 'Reflect', {
  apply: function apply(target, thisArgument, argumentsList){
    var T = aFunction(target)
      , L = anObject(argumentsList);
    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
  }
});
},{"./_a-function":3,"./_an-object":7,"./_export":32,"./_fails":34,"./_global":38}],200:[function(require,module,exports){
// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
var $export    = require('./_export')
  , create     = require('./_object-create')
  , aFunction  = require('./_a-function')
  , anObject   = require('./_an-object')
  , isObject   = require('./_is-object')
  , fails      = require('./_fails')
  , bind       = require('./_bind')
  , rConstruct = (require('./_global').Reflect || {}).construct;

// MS Edge supports only 2 arguments and argumentsList argument is optional
// FF Nightly sets third argument as `new.target`, but does not create `this` from it
var NEW_TARGET_BUG = fails(function(){
  function F(){}
  return !(rConstruct(function(){}, [], F) instanceof F);
});
var ARGS_BUG = !fails(function(){
  rConstruct(function(){});
});

$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
  construct: function construct(Target, args /*, newTarget*/){
    aFunction(Target);
    anObject(args);
    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
    if(ARGS_BUG && !NEW_TARGET_BUG)return rConstruct(Target, args, newTarget);
    if(Target == newTarget){
      // w/o altered newTarget, optimization for 0-4 arguments
      switch(args.length){
        case 0: return new Target;
        case 1: return new Target(args[0]);
        case 2: return new Target(args[0], args[1]);
        case 3: return new Target(args[0], args[1], args[2]);
        case 4: return new Target(args[0], args[1], args[2], args[3]);
      }
      // w/o altered newTarget, lot of arguments case
      var $args = [null];
      $args.push.apply($args, args);
      return new (bind.apply(Target, $args));
    }
    // with altered newTarget, not support built-in constructors
    var proto    = newTarget.prototype
      , instance = create(isObject(proto) ? proto : Object.prototype)
      , result   = Function.apply.call(Target, instance, args);
    return isObject(result) ? result : instance;
  }
});
},{"./_a-function":3,"./_an-object":7,"./_bind":16,"./_export":32,"./_fails":34,"./_global":38,"./_is-object":49,"./_object-create":66}],201:[function(require,module,exports){
// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
var dP          = require('./_object-dp')
  , $export     = require('./_export')
  , anObject    = require('./_an-object')
  , toPrimitive = require('./_to-primitive');

// MS Edge has broken Reflect.defineProperty - throwing instead of returning false
$export($export.S + $export.F * require('./_fails')(function(){
  Reflect.defineProperty(dP.f({}, 1, {value: 1}), 1, {value: 2});
}), 'Reflect', {
  defineProperty: function defineProperty(target, propertyKey, attributes){
    anObject(target);
    propertyKey = toPrimitive(propertyKey, true);
    anObject(attributes);
    try {
      dP.f(target, propertyKey, attributes);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":7,"./_export":32,"./_fails":34,"./_object-dp":67,"./_to-primitive":110}],202:[function(require,module,exports){
// 26.1.4 Reflect.deleteProperty(target, propertyKey)
var $export  = require('./_export')
  , gOPD     = require('./_object-gopd').f
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  deleteProperty: function deleteProperty(target, propertyKey){
    var desc = gOPD(anObject(target), propertyKey);
    return desc && !desc.configurable ? false : delete target[propertyKey];
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gopd":70}],203:[function(require,module,exports){
'use strict';
// 26.1.5 Reflect.enumerate(target)
var $export  = require('./_export')
  , anObject = require('./_an-object');
var Enumerate = function(iterated){
  this._t = anObject(iterated); // target
  this._i = 0;                  // next index
  var keys = this._k = []       // keys
    , key;
  for(key in iterated)keys.push(key);
};
require('./_iter-create')(Enumerate, 'Object', function(){
  var that = this
    , keys = that._k
    , key;
  do {
    if(that._i >= keys.length)return {value: undefined, done: true};
  } while(!((key = keys[that._i++]) in that._t));
  return {value: key, done: false};
});

$export($export.S, 'Reflect', {
  enumerate: function enumerate(target){
    return new Enumerate(target);
  }
});
},{"./_an-object":7,"./_export":32,"./_iter-create":52}],204:[function(require,module,exports){
// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
var gOPD     = require('./_object-gopd')
  , $export  = require('./_export')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey){
    return gOPD.f(anObject(target), propertyKey);
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gopd":70}],205:[function(require,module,exports){
// 26.1.8 Reflect.getPrototypeOf(target)
var $export  = require('./_export')
  , getProto = require('./_object-gpo')
  , anObject = require('./_an-object');

$export($export.S, 'Reflect', {
  getPrototypeOf: function getPrototypeOf(target){
    return getProto(anObject(target));
  }
});
},{"./_an-object":7,"./_export":32,"./_object-gpo":74}],206:[function(require,module,exports){
// 26.1.6 Reflect.get(target, propertyKey [, receiver])
var gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , isObject       = require('./_is-object')
  , anObject       = require('./_an-object');

function get(target, propertyKey/*, receiver*/){
  var receiver = arguments.length < 3 ? target : arguments[2]
    , desc, proto;
  if(anObject(target) === receiver)return target[propertyKey];
  if(desc = gOPD.f(target, propertyKey))return has(desc, 'value')
    ? desc.value
    : desc.get !== undefined
      ? desc.get.call(receiver)
      : undefined;
  if(isObject(proto = getPrototypeOf(target)))return get(proto, propertyKey, receiver);
}

$export($export.S, 'Reflect', {get: get});
},{"./_an-object":7,"./_export":32,"./_has":39,"./_is-object":49,"./_object-gopd":70,"./_object-gpo":74}],207:[function(require,module,exports){
// 26.1.9 Reflect.has(target, propertyKey)
var $export = require('./_export');

$export($export.S, 'Reflect', {
  has: function has(target, propertyKey){
    return propertyKey in target;
  }
});
},{"./_export":32}],208:[function(require,module,exports){
// 26.1.10 Reflect.isExtensible(target)
var $export       = require('./_export')
  , anObject      = require('./_an-object')
  , $isExtensible = Object.isExtensible;

$export($export.S, 'Reflect', {
  isExtensible: function isExtensible(target){
    anObject(target);
    return $isExtensible ? $isExtensible(target) : true;
  }
});
},{"./_an-object":7,"./_export":32}],209:[function(require,module,exports){
// 26.1.11 Reflect.ownKeys(target)
var $export = require('./_export');

$export($export.S, 'Reflect', {ownKeys: require('./_own-keys')});
},{"./_export":32,"./_own-keys":80}],210:[function(require,module,exports){
// 26.1.12 Reflect.preventExtensions(target)
var $export            = require('./_export')
  , anObject           = require('./_an-object')
  , $preventExtensions = Object.preventExtensions;

$export($export.S, 'Reflect', {
  preventExtensions: function preventExtensions(target){
    anObject(target);
    try {
      if($preventExtensions)$preventExtensions(target);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_an-object":7,"./_export":32}],211:[function(require,module,exports){
// 26.1.14 Reflect.setPrototypeOf(target, proto)
var $export  = require('./_export')
  , setProto = require('./_set-proto');

if(setProto)$export($export.S, 'Reflect', {
  setPrototypeOf: function setPrototypeOf(target, proto){
    setProto.check(target, proto);
    try {
      setProto.set(target, proto);
      return true;
    } catch(e){
      return false;
    }
  }
});
},{"./_export":32,"./_set-proto":90}],212:[function(require,module,exports){
// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
var dP             = require('./_object-dp')
  , gOPD           = require('./_object-gopd')
  , getPrototypeOf = require('./_object-gpo')
  , has            = require('./_has')
  , $export        = require('./_export')
  , createDesc     = require('./_property-desc')
  , anObject       = require('./_an-object')
  , isObject       = require('./_is-object');

function set(target, propertyKey, V/*, receiver*/){
  var receiver = arguments.length < 4 ? target : arguments[3]
    , ownDesc  = gOPD.f(anObject(target), propertyKey)
    , existingDescriptor, proto;
  if(!ownDesc){
    if(isObject(proto = getPrototypeOf(target))){
      return set(proto, propertyKey, V, receiver);
    }
    ownDesc = createDesc(0);
  }
  if(has(ownDesc, 'value')){
    if(ownDesc.writable === false || !isObject(receiver))return false;
    existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
    existingDescriptor.value = V;
    dP.f(receiver, propertyKey, existingDescriptor);
    return true;
  }
  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
}

$export($export.S, 'Reflect', {set: set});
},{"./_an-object":7,"./_export":32,"./_has":39,"./_is-object":49,"./_object-dp":67,"./_object-gopd":70,"./_object-gpo":74,"./_property-desc":85}],213:[function(require,module,exports){
var global            = require('./_global')
  , inheritIfRequired = require('./_inherit-if-required')
  , dP                = require('./_object-dp').f
  , gOPN              = require('./_object-gopn').f
  , isRegExp          = require('./_is-regexp')
  , $flags            = require('./_flags')
  , $RegExp           = global.RegExp
  , Base              = $RegExp
  , proto             = $RegExp.prototype
  , re1               = /a/g
  , re2               = /a/g
  // "new" creates a new object, old webkit buggy here
  , CORRECT_NEW       = new $RegExp(re1) !== re1;

if(require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function(){
  re2[require('./_wks')('match')] = false;
  // RegExp constructor can alter flags and IsRegExp works correct with @@match
  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
}))){
  $RegExp = function RegExp(p, f){
    var tiRE = this instanceof $RegExp
      , piRE = isRegExp(p)
      , fiU  = f === undefined;
    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p
      : inheritIfRequired(CORRECT_NEW
        ? new Base(piRE && !fiU ? p.source : p, f)
        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)
      , tiRE ? this : proto, $RegExp);
  };
  var proxy = function(key){
    key in $RegExp || dP($RegExp, key, {
      configurable: true,
      get: function(){ return Base[key]; },
      set: function(it){ Base[key] = it; }
    });
  };
  for(var keys = gOPN(Base), i = 0; keys.length > i; )proxy(keys[i++]);
  proto.constructor = $RegExp;
  $RegExp.prototype = proto;
  require('./_redefine')(global, 'RegExp', $RegExp);
}

require('./_set-species')('RegExp');
},{"./_descriptors":28,"./_fails":34,"./_flags":36,"./_global":38,"./_inherit-if-required":43,"./_is-regexp":50,"./_object-dp":67,"./_object-gopn":72,"./_redefine":87,"./_set-species":91,"./_wks":117}],214:[function(require,module,exports){
// 21.2.5.3 get RegExp.prototype.flags()
if(require('./_descriptors') && /./g.flags != 'g')require('./_object-dp').f(RegExp.prototype, 'flags', {
  configurable: true,
  get: require('./_flags')
});
},{"./_descriptors":28,"./_flags":36,"./_object-dp":67}],215:[function(require,module,exports){
// @@match logic
require('./_fix-re-wks')('match', 1, function(defined, MATCH, $match){
  // 21.1.3.11 String.prototype.match(regexp)
  return [function match(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[MATCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
  }, $match];
});
},{"./_fix-re-wks":35}],216:[function(require,module,exports){
// @@replace logic
require('./_fix-re-wks')('replace', 2, function(defined, REPLACE, $replace){
  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
  return [function replace(searchValue, replaceValue){
    'use strict';
    var O  = defined(this)
      , fn = searchValue == undefined ? undefined : searchValue[REPLACE];
    return fn !== undefined
      ? fn.call(searchValue, O, replaceValue)
      : $replace.call(String(O), searchValue, replaceValue);
  }, $replace];
});
},{"./_fix-re-wks":35}],217:[function(require,module,exports){
// @@search logic
require('./_fix-re-wks')('search', 1, function(defined, SEARCH, $search){
  // 21.1.3.15 String.prototype.search(regexp)
  return [function search(regexp){
    'use strict';
    var O  = defined(this)
      , fn = regexp == undefined ? undefined : regexp[SEARCH];
    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
  }, $search];
});
},{"./_fix-re-wks":35}],218:[function(require,module,exports){
// @@split logic
require('./_fix-re-wks')('split', 2, function(defined, SPLIT, $split){
  'use strict';
  var isRegExp   = require('./_is-regexp')
    , _split     = $split
    , $push      = [].push
    , $SPLIT     = 'split'
    , LENGTH     = 'length'
    , LAST_INDEX = 'lastIndex';
  if(
    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||
    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||
    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||
    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||
    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||
    ''[$SPLIT](/.?/)[LENGTH]
  ){
    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
    // based on es5-shim implementation, need to rework it
    $split = function(separator, limit){
      var string = String(this);
      if(separator === undefined && limit === 0)return [];
      // If `separator` is not a regex, use native split
      if(!isRegExp(separator))return _split.call(string, separator, limit);
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var separator2, match, lastIndex, lastLength, i;
      // Doesn't need flags gy, but they don't hurt
      if(!NPCG)separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
      while(match = separatorCopy.exec(string)){
        // `separatorCopy.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0][LENGTH];
        if(lastIndex > lastLastIndex){
          output.push(string.slice(lastLastIndex, match.index));
          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
          if(!NPCG && match[LENGTH] > 1)match[0].replace(separator2, function(){
            for(i = 1; i < arguments[LENGTH] - 2; i++)if(arguments[i] === undefined)match[i] = undefined;
          });
          if(match[LENGTH] > 1 && match.index < string[LENGTH])$push.apply(output, match.slice(1));
          lastLength = match[0][LENGTH];
          lastLastIndex = lastIndex;
          if(output[LENGTH] >= splitLimit)break;
        }
        if(separatorCopy[LAST_INDEX] === match.index)separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
      }
      if(lastLastIndex === string[LENGTH]){
        if(lastLength || !separatorCopy.test(''))output.push('');
      } else output.push(string.slice(lastLastIndex));
      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
    };
  // Chakra, V8
  } else if('0'[$SPLIT](undefined, 0)[LENGTH]){
    $split = function(separator, limit){
      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
    };
  }
  // 21.1.3.17 String.prototype.split(separator, limit)
  return [function split(separator, limit){
    var O  = defined(this)
      , fn = separator == undefined ? undefined : separator[SPLIT];
    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
  }, $split];
});
},{"./_fix-re-wks":35,"./_is-regexp":50}],219:[function(require,module,exports){
'use strict';
require('./es6.regexp.flags');
var anObject    = require('./_an-object')
  , $flags      = require('./_flags')
  , DESCRIPTORS = require('./_descriptors')
  , TO_STRING   = 'toString'
  , $toString   = /./[TO_STRING];

var define = function(fn){
  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);
};

// 21.2.5.14 RegExp.prototype.toString()
if(require('./_fails')(function(){ return $toString.call({source: 'a', flags: 'b'}) != '/a/b'; })){
  define(function toString(){
    var R = anObject(this);
    return '/'.concat(R.source, '/',
      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
  });
// FF44- RegExp#toString has a wrong name
} else if($toString.name != TO_STRING){
  define(function toString(){
    return $toString.call(this);
  });
}
},{"./_an-object":7,"./_descriptors":28,"./_fails":34,"./_flags":36,"./_redefine":87,"./es6.regexp.flags":214}],220:[function(require,module,exports){
'use strict';
var strong = require('./_collection-strong');

// 23.2 Set Objects
module.exports = require('./_collection')('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);
},{"./_collection":22,"./_collection-strong":19}],221:[function(require,module,exports){
'use strict';
// B.2.3.2 String.prototype.anchor(name)
require('./_string-html')('anchor', function(createHTML){
  return function anchor(name){
    return createHTML(this, 'a', 'name', name);
  }
});
},{"./_string-html":99}],222:[function(require,module,exports){
'use strict';
// B.2.3.3 String.prototype.big()
require('./_string-html')('big', function(createHTML){
  return function big(){
    return createHTML(this, 'big', '', '');
  }
});
},{"./_string-html":99}],223:[function(require,module,exports){
'use strict';
// B.2.3.4 String.prototype.blink()
require('./_string-html')('blink', function(createHTML){
  return function blink(){
    return createHTML(this, 'blink', '', '');
  }
});
},{"./_string-html":99}],224:[function(require,module,exports){
'use strict';
// B.2.3.5 String.prototype.bold()
require('./_string-html')('bold', function(createHTML){
  return function bold(){
    return createHTML(this, 'b', '', '');
  }
});
},{"./_string-html":99}],225:[function(require,module,exports){
'use strict';
var $export = require('./_export')
  , $at     = require('./_string-at')(false);
$export($export.P, 'String', {
  // 21.1.3.3 String.prototype.codePointAt(pos)
  codePointAt: function codePointAt(pos){
    return $at(this, pos);
  }
});
},{"./_export":32,"./_string-at":97}],226:[function(require,module,exports){
// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
'use strict';
var $export   = require('./_export')
  , toLength  = require('./_to-length')
  , context   = require('./_string-context')
  , ENDS_WITH = 'endsWith'
  , $endsWith = ''[ENDS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {
  endsWith: function endsWith(searchString /*, endPosition = @length */){
    var that = context(this, searchString, ENDS_WITH)
      , endPosition = arguments.length > 1 ? arguments[1] : undefined
      , len    = toLength(that.length)
      , end    = endPosition === undefined ? len : Math.min(toLength(endPosition), len)
      , search = String(searchString);
    return $endsWith
      ? $endsWith.call(that, search, end)
      : that.slice(end - search.length, end) === search;
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98,"./_to-length":108}],227:[function(require,module,exports){
'use strict';
// B.2.3.6 String.prototype.fixed()
require('./_string-html')('fixed', function(createHTML){
  return function fixed(){
    return createHTML(this, 'tt', '', '');
  }
});
},{"./_string-html":99}],228:[function(require,module,exports){
'use strict';
// B.2.3.7 String.prototype.fontcolor(color)
require('./_string-html')('fontcolor', function(createHTML){
  return function fontcolor(color){
    return createHTML(this, 'font', 'color', color);
  }
});
},{"./_string-html":99}],229:[function(require,module,exports){
'use strict';
// B.2.3.8 String.prototype.fontsize(size)
require('./_string-html')('fontsize', function(createHTML){
  return function fontsize(size){
    return createHTML(this, 'font', 'size', size);
  }
});
},{"./_string-html":99}],230:[function(require,module,exports){
var $export        = require('./_export')
  , toIndex        = require('./_to-index')
  , fromCharCode   = String.fromCharCode
  , $fromCodePoint = String.fromCodePoint;

// length should be 1, old FF problem
$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
  // 21.1.2.2 String.fromCodePoint(...codePoints)
  fromCodePoint: function fromCodePoint(x){ // eslint-disable-line no-unused-vars
    var res  = []
      , aLen = arguments.length
      , i    = 0
      , code;
    while(aLen > i){
      code = +arguments[i++];
      if(toIndex(code, 0x10ffff) !== code)throw RangeError(code + ' is not a valid code point');
      res.push(code < 0x10000
        ? fromCharCode(code)
        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)
      );
    } return res.join('');
  }
});
},{"./_export":32,"./_to-index":105}],231:[function(require,module,exports){
// 21.1.3.7 String.prototype.includes(searchString, position = 0)
'use strict';
var $export  = require('./_export')
  , context  = require('./_string-context')
  , INCLUDES = 'includes';

$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {
  includes: function includes(searchString /*, position = 0 */){
    return !!~context(this, searchString, INCLUDES)
      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98}],232:[function(require,module,exports){
'use strict';
// B.2.3.9 String.prototype.italics()
require('./_string-html')('italics', function(createHTML){
  return function italics(){
    return createHTML(this, 'i', '', '');
  }
});
},{"./_string-html":99}],233:[function(require,module,exports){
'use strict';
var $at  = require('./_string-at')(true);

// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});
},{"./_iter-define":53,"./_string-at":97}],234:[function(require,module,exports){
'use strict';
// B.2.3.10 String.prototype.link(url)
require('./_string-html')('link', function(createHTML){
  return function link(url){
    return createHTML(this, 'a', 'href', url);
  }
});
},{"./_string-html":99}],235:[function(require,module,exports){
var $export   = require('./_export')
  , toIObject = require('./_to-iobject')
  , toLength  = require('./_to-length');

$export($export.S, 'String', {
  // 21.1.2.4 String.raw(callSite, ...substitutions)
  raw: function raw(callSite){
    var tpl  = toIObject(callSite.raw)
      , len  = toLength(tpl.length)
      , aLen = arguments.length
      , res  = []
      , i    = 0;
    while(len > i){
      res.push(String(tpl[i++]));
      if(i < aLen)res.push(String(arguments[i]));
    } return res.join('');
  }
});
},{"./_export":32,"./_to-iobject":107,"./_to-length":108}],236:[function(require,module,exports){
var $export = require('./_export');

$export($export.P, 'String', {
  // 21.1.3.13 String.prototype.repeat(count)
  repeat: require('./_string-repeat')
});
},{"./_export":32,"./_string-repeat":101}],237:[function(require,module,exports){
'use strict';
// B.2.3.11 String.prototype.small()
require('./_string-html')('small', function(createHTML){
  return function small(){
    return createHTML(this, 'small', '', '');
  }
});
},{"./_string-html":99}],238:[function(require,module,exports){
// 21.1.3.18 String.prototype.startsWith(searchString [, position ])
'use strict';
var $export     = require('./_export')
  , toLength    = require('./_to-length')
  , context     = require('./_string-context')
  , STARTS_WITH = 'startsWith'
  , $startsWith = ''[STARTS_WITH];

$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {
  startsWith: function startsWith(searchString /*, position = 0 */){
    var that   = context(this, searchString, STARTS_WITH)
      , index  = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length))
      , search = String(searchString);
    return $startsWith
      ? $startsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});
},{"./_export":32,"./_fails-is-regexp":33,"./_string-context":98,"./_to-length":108}],239:[function(require,module,exports){
'use strict';
// B.2.3.12 String.prototype.strike()
require('./_string-html')('strike', function(createHTML){
  return function strike(){
    return createHTML(this, 'strike', '', '');
  }
});
},{"./_string-html":99}],240:[function(require,module,exports){
'use strict';
// B.2.3.13 String.prototype.sub()
require('./_string-html')('sub', function(createHTML){
  return function sub(){
    return createHTML(this, 'sub', '', '');
  }
});
},{"./_string-html":99}],241:[function(require,module,exports){
'use strict';
// B.2.3.14 String.prototype.sup()
require('./_string-html')('sup', function(createHTML){
  return function sup(){
    return createHTML(this, 'sup', '', '');
  }
});
},{"./_string-html":99}],242:[function(require,module,exports){
'use strict';
// 21.1.3.25 String.prototype.trim()
require('./_string-trim')('trim', function($trim){
  return function trim(){
    return $trim(this, 3);
  };
});
},{"./_string-trim":102}],243:[function(require,module,exports){
'use strict';
// ECMAScript 6 symbols shim
var global         = require('./_global')
  , has            = require('./_has')
  , DESCRIPTORS    = require('./_descriptors')
  , $export        = require('./_export')
  , redefine       = require('./_redefine')
  , META           = require('./_meta').KEY
  , $fails         = require('./_fails')
  , shared         = require('./_shared')
  , setToStringTag = require('./_set-to-string-tag')
  , uid            = require('./_uid')
  , wks            = require('./_wks')
  , wksExt         = require('./_wks-ext')
  , wksDefine      = require('./_wks-define')
  , keyOf          = require('./_keyof')
  , enumKeys       = require('./_enum-keys')
  , isArray        = require('./_is-array')
  , anObject       = require('./_an-object')
  , toIObject      = require('./_to-iobject')
  , toPrimitive    = require('./_to-primitive')
  , createDesc     = require('./_property-desc')
  , _create        = require('./_object-create')
  , gOPNExt        = require('./_object-gopn-ext')
  , $GOPD          = require('./_object-gopd')
  , $DP            = require('./_object-dp')
  , $keys          = require('./_object-keys')
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
  require('./_object-pie').f  = $propertyIsEnumerable;
  require('./_object-gops').f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !require('./_library')){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);
},{"./_an-object":7,"./_descriptors":28,"./_enum-keys":31,"./_export":32,"./_fails":34,"./_global":38,"./_has":39,"./_hide":40,"./_is-array":47,"./_keyof":57,"./_library":58,"./_meta":62,"./_object-create":66,"./_object-dp":67,"./_object-gopd":70,"./_object-gopn":72,"./_object-gopn-ext":71,"./_object-gops":73,"./_object-keys":76,"./_object-pie":77,"./_property-desc":85,"./_redefine":87,"./_set-to-string-tag":92,"./_shared":94,"./_to-iobject":107,"./_to-primitive":110,"./_uid":114,"./_wks":117,"./_wks-define":115,"./_wks-ext":116}],244:[function(require,module,exports){
'use strict';
var $export      = require('./_export')
  , $typed       = require('./_typed')
  , buffer       = require('./_typed-buffer')
  , anObject     = require('./_an-object')
  , toIndex      = require('./_to-index')
  , toLength     = require('./_to-length')
  , isObject     = require('./_is-object')
  , ArrayBuffer  = require('./_global').ArrayBuffer
  , speciesConstructor = require('./_species-constructor')
  , $ArrayBuffer = buffer.ArrayBuffer
  , $DataView    = buffer.DataView
  , $isView      = $typed.ABV && ArrayBuffer.isView
  , $slice       = $ArrayBuffer.prototype.slice
  , VIEW         = $typed.VIEW
  , ARRAY_BUFFER = 'ArrayBuffer';

$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), {ArrayBuffer: $ArrayBuffer});

$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
  // 24.1.3.1 ArrayBuffer.isView(arg)
  isView: function isView(it){
    return $isView && $isView(it) || isObject(it) && VIEW in it;
  }
});

$export($export.P + $export.U + $export.F * require('./_fails')(function(){
  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
}), ARRAY_BUFFER, {
  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
  slice: function slice(start, end){
    if($slice !== undefined && end === undefined)return $slice.call(anObject(this), start); // FF fix
    var len    = anObject(this).byteLength
      , first  = toIndex(start, len)
      , final  = toIndex(end === undefined ? len : end, len)
      , result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first))
      , viewS  = new $DataView(this)
      , viewT  = new $DataView(result)
      , index  = 0;
    while(first < final){
      viewT.setUint8(index++, viewS.getUint8(first++));
    } return result;
  }
});

require('./_set-species')(ARRAY_BUFFER);
},{"./_an-object":7,"./_export":32,"./_fails":34,"./_global":38,"./_is-object":49,"./_set-species":91,"./_species-constructor":95,"./_to-index":105,"./_to-length":108,"./_typed":113,"./_typed-buffer":112}],245:[function(require,module,exports){
var $export = require('./_export');
$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {
  DataView: require('./_typed-buffer').DataView
});
},{"./_export":32,"./_typed":113,"./_typed-buffer":112}],246:[function(require,module,exports){
require('./_typed-array')('Float32', 4, function(init){
  return function Float32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],247:[function(require,module,exports){
require('./_typed-array')('Float64', 8, function(init){
  return function Float64Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],248:[function(require,module,exports){
require('./_typed-array')('Int16', 2, function(init){
  return function Int16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],249:[function(require,module,exports){
require('./_typed-array')('Int32', 4, function(init){
  return function Int32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],250:[function(require,module,exports){
require('./_typed-array')('Int8', 1, function(init){
  return function Int8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],251:[function(require,module,exports){
require('./_typed-array')('Uint16', 2, function(init){
  return function Uint16Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],252:[function(require,module,exports){
require('./_typed-array')('Uint32', 4, function(init){
  return function Uint32Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],253:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8Array(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
});
},{"./_typed-array":111}],254:[function(require,module,exports){
require('./_typed-array')('Uint8', 1, function(init){
  return function Uint8ClampedArray(data, byteOffset, length){
    return init(this, data, byteOffset, length);
  };
}, true);
},{"./_typed-array":111}],255:[function(require,module,exports){
'use strict';
var each         = require('./_array-methods')(0)
  , redefine     = require('./_redefine')
  , meta         = require('./_meta')
  , assign       = require('./_object-assign')
  , weak         = require('./_collection-weak')
  , isObject     = require('./_is-object')
  , getWeak      = meta.getWeak
  , isExtensible = Object.isExtensible
  , uncaughtFrozenStore = weak.ufstore
  , tmp          = {}
  , InternalMap;

var wrapper = function(get){
  return function WeakMap(){
    return get(this, arguments.length > 0 ? arguments[0] : undefined);
  };
};

var methods = {
  // 23.3.3.3 WeakMap.prototype.get(key)
  get: function get(key){
    if(isObject(key)){
      var data = getWeak(key);
      if(data === true)return uncaughtFrozenStore(this).get(key);
      return data ? data[this._i] : undefined;
    }
  },
  // 23.3.3.5 WeakMap.prototype.set(key, value)
  set: function set(key, value){
    return weak.def(this, key, value);
  }
};

// 23.3 WeakMap Objects
var $WeakMap = module.exports = require('./_collection')('WeakMap', wrapper, methods, weak, true, true);

// IE11 WeakMap frozen keys fix
if(new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7){
  InternalMap = weak.getConstructor(wrapper);
  assign(InternalMap.prototype, methods);
  meta.NEED = true;
  each(['delete', 'has', 'get', 'set'], function(key){
    var proto  = $WeakMap.prototype
      , method = proto[key];
    redefine(proto, key, function(a, b){
      // store frozen objects on internal weakmap shim
      if(isObject(a) && !isExtensible(a)){
        if(!this._f)this._f = new InternalMap;
        var result = this._f[key](a, b);
        return key == 'set' ? this : result;
      // store all the rest on native weakmap
      } return method.call(this, a, b);
    });
  });
}
},{"./_array-methods":12,"./_collection":22,"./_collection-weak":21,"./_is-object":49,"./_meta":62,"./_object-assign":65,"./_redefine":87}],256:[function(require,module,exports){
'use strict';
var weak = require('./_collection-weak');

// 23.4 WeakSet Objects
require('./_collection')('WeakSet', function(get){
  return function WeakSet(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.4.3.1 WeakSet.prototype.add(value)
  add: function add(value){
    return weak.def(this, value, true);
  }
}, weak, false, true);
},{"./_collection":22,"./_collection-weak":21}],257:[function(require,module,exports){
'use strict';
// https://github.com/tc39/Array.prototype.includes
var $export   = require('./_export')
  , $includes = require('./_array-includes')(true);

$export($export.P, 'Array', {
  includes: function includes(el /*, fromIndex = 0 */){
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

require('./_add-to-unscopables')('includes');
},{"./_add-to-unscopables":5,"./_array-includes":11,"./_export":32}],258:[function(require,module,exports){
// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
var $export   = require('./_export')
  , microtask = require('./_microtask')()
  , process   = require('./_global').process
  , isNode    = require('./_cof')(process) == 'process';

$export($export.G, {
  asap: function asap(fn){
    var domain = isNode && process.domain;
    microtask(domain ? domain.bind(fn) : fn);
  }
});
},{"./_cof":18,"./_export":32,"./_global":38,"./_microtask":64}],259:[function(require,module,exports){
// https://github.com/ljharb/proposal-is-error
var $export = require('./_export')
  , cof     = require('./_cof');

$export($export.S, 'Error', {
  isError: function isError(it){
    return cof(it) === 'Error';
  }
});
},{"./_cof":18,"./_export":32}],260:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Map', {toJSON: require('./_collection-to-json')('Map')});
},{"./_collection-to-json":20,"./_export":32}],261:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  iaddh: function iaddh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
  }
});
},{"./_export":32}],262:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  imulh: function imulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >> 16
      , v1 = $v >> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
  }
});
},{"./_export":32}],263:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  isubh: function isubh(x0, x1, y0, y1){
    var $x0 = x0 >>> 0
      , $x1 = x1 >>> 0
      , $y0 = y0 >>> 0;
    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
  }
});
},{"./_export":32}],264:[function(require,module,exports){
// https://gist.github.com/BrendanEich/4294d5c212a6d2254703
var $export = require('./_export');

$export($export.S, 'Math', {
  umulh: function umulh(u, v){
    var UINT16 = 0xffff
      , $u = +u
      , $v = +v
      , u0 = $u & UINT16
      , v0 = $v & UINT16
      , u1 = $u >>> 16
      , v1 = $v >>> 16
      , t  = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
  }
});
},{"./_export":32}],265:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.2 Object.prototype.__defineGetter__(P, getter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineGetter__: function __defineGetter__(P, getter){
    $defineProperty.f(toObject(this), P, {get: aFunction(getter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":3,"./_descriptors":28,"./_export":32,"./_object-dp":67,"./_object-forced-pam":69,"./_to-object":109}],266:[function(require,module,exports){
'use strict';
var $export         = require('./_export')
  , toObject        = require('./_to-object')
  , aFunction       = require('./_a-function')
  , $defineProperty = require('./_object-dp');

// B.2.2.3 Object.prototype.__defineSetter__(P, setter)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __defineSetter__: function __defineSetter__(P, setter){
    $defineProperty.f(toObject(this), P, {set: aFunction(setter), enumerable: true, configurable: true});
  }
});
},{"./_a-function":3,"./_descriptors":28,"./_export":32,"./_object-dp":67,"./_object-forced-pam":69,"./_to-object":109}],267:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export  = require('./_export')
  , $entries = require('./_object-to-array')(true);

$export($export.S, 'Object', {
  entries: function entries(it){
    return $entries(it);
  }
});
},{"./_export":32,"./_object-to-array":79}],268:[function(require,module,exports){
// https://github.com/tc39/proposal-object-getownpropertydescriptors
var $export        = require('./_export')
  , ownKeys        = require('./_own-keys')
  , toIObject      = require('./_to-iobject')
  , gOPD           = require('./_object-gopd')
  , createProperty = require('./_create-property');

$export($export.S, 'Object', {
  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object){
    var O       = toIObject(object)
      , getDesc = gOPD.f
      , keys    = ownKeys(O)
      , result  = {}
      , i       = 0
      , key;
    while(keys.length > i)createProperty(result, key = keys[i++], getDesc(O, key));
    return result;
  }
});
},{"./_create-property":24,"./_export":32,"./_object-gopd":70,"./_own-keys":80,"./_to-iobject":107}],269:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.4 Object.prototype.__lookupGetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupGetter__: function __lookupGetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.get;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":28,"./_export":32,"./_object-forced-pam":69,"./_object-gopd":70,"./_object-gpo":74,"./_to-object":109,"./_to-primitive":110}],270:[function(require,module,exports){
'use strict';
var $export                  = require('./_export')
  , toObject                 = require('./_to-object')
  , toPrimitive              = require('./_to-primitive')
  , getPrototypeOf           = require('./_object-gpo')
  , getOwnPropertyDescriptor = require('./_object-gopd').f;

// B.2.2.5 Object.prototype.__lookupSetter__(P)
require('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {
  __lookupSetter__: function __lookupSetter__(P){
    var O = toObject(this)
      , K = toPrimitive(P, true)
      , D;
    do {
      if(D = getOwnPropertyDescriptor(O, K))return D.set;
    } while(O = getPrototypeOf(O));
  }
});
},{"./_descriptors":28,"./_export":32,"./_object-forced-pam":69,"./_object-gopd":70,"./_object-gpo":74,"./_to-object":109,"./_to-primitive":110}],271:[function(require,module,exports){
// https://github.com/tc39/proposal-object-values-entries
var $export = require('./_export')
  , $values = require('./_object-to-array')(false);

$export($export.S, 'Object', {
  values: function values(it){
    return $values(it);
  }
});
},{"./_export":32,"./_object-to-array":79}],272:[function(require,module,exports){
'use strict';
// https://github.com/zenparsing/es-observable
var $export     = require('./_export')
  , global      = require('./_global')
  , core        = require('./_core')
  , microtask   = require('./_microtask')()
  , OBSERVABLE  = require('./_wks')('observable')
  , aFunction   = require('./_a-function')
  , anObject    = require('./_an-object')
  , anInstance  = require('./_an-instance')
  , redefineAll = require('./_redefine-all')
  , hide        = require('./_hide')
  , forOf       = require('./_for-of')
  , RETURN      = forOf.RETURN;

var getMethod = function(fn){
  return fn == null ? undefined : aFunction(fn);
};

var cleanupSubscription = function(subscription){
  var cleanup = subscription._c;
  if(cleanup){
    subscription._c = undefined;
    cleanup();
  }
};

var subscriptionClosed = function(subscription){
  return subscription._o === undefined;
};

var closeSubscription = function(subscription){
  if(!subscriptionClosed(subscription)){
    subscription._o = undefined;
    cleanupSubscription(subscription);
  }
};

var Subscription = function(observer, subscriber){
  anObject(observer);
  this._c = undefined;
  this._o = observer;
  observer = new SubscriptionObserver(this);
  try {
    var cleanup      = subscriber(observer)
      , subscription = cleanup;
    if(cleanup != null){
      if(typeof cleanup.unsubscribe === 'function')cleanup = function(){ subscription.unsubscribe(); };
      else aFunction(cleanup);
      this._c = cleanup;
    }
  } catch(e){
    observer.error(e);
    return;
  } if(subscriptionClosed(this))cleanupSubscription(this);
};

Subscription.prototype = redefineAll({}, {
  unsubscribe: function unsubscribe(){ closeSubscription(this); }
});

var SubscriptionObserver = function(subscription){
  this._s = subscription;
};

SubscriptionObserver.prototype = redefineAll({}, {
  next: function next(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      try {
        var m = getMethod(observer.next);
        if(m)return m.call(observer, value);
      } catch(e){
        try {
          closeSubscription(subscription);
        } finally {
          throw e;
        }
      }
    }
  },
  error: function error(value){
    var subscription = this._s;
    if(subscriptionClosed(subscription))throw value;
    var observer = subscription._o;
    subscription._o = undefined;
    try {
      var m = getMethod(observer.error);
      if(!m)throw value;
      value = m.call(observer, value);
    } catch(e){
      try {
        cleanupSubscription(subscription);
      } finally {
        throw e;
      }
    } cleanupSubscription(subscription);
    return value;
  },
  complete: function complete(value){
    var subscription = this._s;
    if(!subscriptionClosed(subscription)){
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.complete);
        value = m ? m.call(observer, value) : undefined;
      } catch(e){
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      } cleanupSubscription(subscription);
      return value;
    }
  }
});

var $Observable = function Observable(subscriber){
  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
};

redefineAll($Observable.prototype, {
  subscribe: function subscribe(observer){
    return new Subscription(observer, this._f);
  },
  forEach: function forEach(fn){
    var that = this;
    return new (core.Promise || global.Promise)(function(resolve, reject){
      aFunction(fn);
      var subscription = that.subscribe({
        next : function(value){
          try {
            return fn(value);
          } catch(e){
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  }
});

redefineAll($Observable, {
  from: function from(x){
    var C = typeof this === 'function' ? this : $Observable;
    var method = getMethod(anObject(x)[OBSERVABLE]);
    if(method){
      var observable = anObject(method.call(x));
      return observable.constructor === C ? observable : new C(function(observer){
        return observable.subscribe(observer);
      });
    }
    return new C(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          try {
            if(forOf(x, false, function(it){
              observer.next(it);
              if(done)return RETURN;
            }) === RETURN)return;
          } catch(e){
            if(done)throw e;
            observer.error(e);
            return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  },
  of: function of(){
    for(var i = 0, l = arguments.length, items = Array(l); i < l;)items[i] = arguments[i++];
    return new (typeof this === 'function' ? this : $Observable)(function(observer){
      var done = false;
      microtask(function(){
        if(!done){
          for(var i = 0; i < items.length; ++i){
            observer.next(items[i]);
            if(done)return;
          } observer.complete();
        }
      });
      return function(){ done = true; };
    });
  }
});

hide($Observable.prototype, OBSERVABLE, function(){ return this; });

$export($export.G, {Observable: $Observable});

require('./_set-species')('Observable');
},{"./_a-function":3,"./_an-instance":6,"./_an-object":7,"./_core":23,"./_export":32,"./_for-of":37,"./_global":38,"./_hide":40,"./_microtask":64,"./_redefine-all":86,"./_set-species":91,"./_wks":117}],273:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey){
  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
}});
},{"./_an-object":7,"./_metadata":63}],274:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , toMetaKey              = metadata.key
  , getOrCreateMetadataMap = metadata.map
  , store                  = metadata.store;

metadata.exp({deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */){
  var targetKey   = arguments.length < 3 ? undefined : toMetaKey(arguments[2])
    , metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
  if(metadataMap === undefined || !metadataMap['delete'](metadataKey))return false;
  if(metadataMap.size)return true;
  var targetMetadata = store.get(target);
  targetMetadata['delete'](targetKey);
  return !!targetMetadata.size || store['delete'](target);
}});
},{"./_an-object":7,"./_metadata":63}],275:[function(require,module,exports){
var Set                     = require('./es6.set')
  , from                    = require('./_array-from-iterable')
  , metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , getPrototypeOf          = require('./_object-gpo')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

var ordinaryMetadataKeys = function(O, P){
  var oKeys  = ordinaryOwnMetadataKeys(O, P)
    , parent = getPrototypeOf(O);
  if(parent === null)return oKeys;
  var pKeys  = ordinaryMetadataKeys(parent, P);
  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
};

metadata.exp({getMetadataKeys: function getMetadataKeys(target /*, targetKey */){
  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":7,"./_array-from-iterable":10,"./_metadata":63,"./_object-gpo":74,"./es6.set":220}],276:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

var ordinaryGetMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return ordinaryGetOwnMetadata(MetadataKey, O, P);
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
};

metadata.exp({getMetadata: function getMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63,"./_object-gpo":74}],277:[function(require,module,exports){
var metadata                = require('./_metadata')
  , anObject                = require('./_an-object')
  , ordinaryOwnMetadataKeys = metadata.keys
  , toMetaKey               = metadata.key;

metadata.exp({getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */){
  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
}});
},{"./_an-object":7,"./_metadata":63}],278:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryGetOwnMetadata = metadata.get
  , toMetaKey              = metadata.key;

metadata.exp({getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryGetOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63}],279:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , getPrototypeOf         = require('./_object-gpo')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

var ordinaryHasMetadata = function(MetadataKey, O, P){
  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
  if(hasOwn)return true;
  var parent = getPrototypeOf(O);
  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
};

metadata.exp({hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63,"./_object-gpo":74}],280:[function(require,module,exports){
var metadata               = require('./_metadata')
  , anObject               = require('./_an-object')
  , ordinaryHasOwnMetadata = metadata.has
  , toMetaKey              = metadata.key;

metadata.exp({hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */){
  return ordinaryHasOwnMetadata(metadataKey, anObject(target)
    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
}});
},{"./_an-object":7,"./_metadata":63}],281:[function(require,module,exports){
var metadata                  = require('./_metadata')
  , anObject                  = require('./_an-object')
  , aFunction                 = require('./_a-function')
  , toMetaKey                 = metadata.key
  , ordinaryDefineOwnMetadata = metadata.set;

metadata.exp({metadata: function metadata(metadataKey, metadataValue){
  return function decorator(target, targetKey){
    ordinaryDefineOwnMetadata(
      metadataKey, metadataValue,
      (targetKey !== undefined ? anObject : aFunction)(target),
      toMetaKey(targetKey)
    );
  };
}});
},{"./_a-function":3,"./_an-object":7,"./_metadata":63}],282:[function(require,module,exports){
// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = require('./_export');

$export($export.P + $export.R, 'Set', {toJSON: require('./_collection-to-json')('Set')});
},{"./_collection-to-json":20,"./_export":32}],283:[function(require,module,exports){
'use strict';
// https://github.com/mathiasbynens/String.prototype.at
var $export = require('./_export')
  , $at     = require('./_string-at')(true);

$export($export.P, 'String', {
  at: function at(pos){
    return $at(this, pos);
  }
});
},{"./_export":32,"./_string-at":97}],284:[function(require,module,exports){
'use strict';
// https://tc39.github.io/String.prototype.matchAll/
var $export     = require('./_export')
  , defined     = require('./_defined')
  , toLength    = require('./_to-length')
  , isRegExp    = require('./_is-regexp')
  , getFlags    = require('./_flags')
  , RegExpProto = RegExp.prototype;

var $RegExpStringIterator = function(regexp, string){
  this._r = regexp;
  this._s = string;
};

require('./_iter-create')($RegExpStringIterator, 'RegExp String', function next(){
  var match = this._r.exec(this._s);
  return {value: match, done: match === null};
});

$export($export.P, 'String', {
  matchAll: function matchAll(regexp){
    defined(this);
    if(!isRegExp(regexp))throw TypeError(regexp + ' is not a regexp!');
    var S     = String(this)
      , flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp)
      , rx    = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
    rx.lastIndex = toLength(regexp.lastIndex);
    return new $RegExpStringIterator(rx, S);
  }
});
},{"./_defined":27,"./_export":32,"./_flags":36,"./_is-regexp":50,"./_iter-create":52,"./_to-length":108}],285:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padEnd: function padEnd(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
  }
});
},{"./_export":32,"./_string-pad":100}],286:[function(require,module,exports){
'use strict';
// https://github.com/tc39/proposal-string-pad-start-end
var $export = require('./_export')
  , $pad    = require('./_string-pad');

$export($export.P, 'String', {
  padStart: function padStart(maxLength /*, fillString = ' ' */){
    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
  }
});
},{"./_export":32,"./_string-pad":100}],287:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimLeft', function($trim){
  return function trimLeft(){
    return $trim(this, 1);
  };
}, 'trimStart');
},{"./_string-trim":102}],288:[function(require,module,exports){
'use strict';
// https://github.com/sebmarkbage/ecmascript-string-left-right-trim
require('./_string-trim')('trimRight', function($trim){
  return function trimRight(){
    return $trim(this, 2);
  };
}, 'trimEnd');
},{"./_string-trim":102}],289:[function(require,module,exports){
require('./_wks-define')('asyncIterator');
},{"./_wks-define":115}],290:[function(require,module,exports){
require('./_wks-define')('observable');
},{"./_wks-define":115}],291:[function(require,module,exports){
// https://github.com/ljharb/proposal-global
var $export = require('./_export');

$export($export.S, 'System', {global: require('./_global')});
},{"./_export":32,"./_global":38}],292:[function(require,module,exports){
var $iterators    = require('./es6.array.iterator')
  , redefine      = require('./_redefine')
  , global        = require('./_global')
  , hide          = require('./_hide')
  , Iterators     = require('./_iterators')
  , wks           = require('./_wks')
  , ITERATOR      = wks('iterator')
  , TO_STRING_TAG = wks('toStringTag')
  , ArrayValues   = Iterators.Array;

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype
    , key;
  if(proto){
    if(!proto[ITERATOR])hide(proto, ITERATOR, ArrayValues);
    if(!proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = ArrayValues;
    for(key in $iterators)if(!proto[key])redefine(proto, key, $iterators[key], true);
  }
}
},{"./_global":38,"./_hide":40,"./_iterators":56,"./_redefine":87,"./_wks":117,"./es6.array.iterator":130}],293:[function(require,module,exports){
var $export = require('./_export')
  , $task   = require('./_task');
$export($export.G + $export.B, {
  setImmediate:   $task.set,
  clearImmediate: $task.clear
});
},{"./_export":32,"./_task":104}],294:[function(require,module,exports){
// ie9- setTimeout & setInterval additional parameters fix
var global     = require('./_global')
  , $export    = require('./_export')
  , invoke     = require('./_invoke')
  , partial    = require('./_partial')
  , navigator  = global.navigator
  , MSIE       = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
var wrap = function(set){
  return MSIE ? function(fn, time /*, ...args */){
    return set(invoke(
      partial,
      [].slice.call(arguments, 2),
      typeof fn == 'function' ? fn : Function(fn)
    ), time);
  } : set;
};
$export($export.G + $export.B + $export.F * MSIE, {
  setTimeout:  wrap(global.setTimeout),
  setInterval: wrap(global.setInterval)
});
},{"./_export":32,"./_global":38,"./_invoke":44,"./_partial":83}],295:[function(require,module,exports){
require('./modules/es6.symbol');
require('./modules/es6.object.create');
require('./modules/es6.object.define-property');
require('./modules/es6.object.define-properties');
require('./modules/es6.object.get-own-property-descriptor');
require('./modules/es6.object.get-prototype-of');
require('./modules/es6.object.keys');
require('./modules/es6.object.get-own-property-names');
require('./modules/es6.object.freeze');
require('./modules/es6.object.seal');
require('./modules/es6.object.prevent-extensions');
require('./modules/es6.object.is-frozen');
require('./modules/es6.object.is-sealed');
require('./modules/es6.object.is-extensible');
require('./modules/es6.object.assign');
require('./modules/es6.object.is');
require('./modules/es6.object.set-prototype-of');
require('./modules/es6.object.to-string');
require('./modules/es6.function.bind');
require('./modules/es6.function.name');
require('./modules/es6.function.has-instance');
require('./modules/es6.parse-int');
require('./modules/es6.parse-float');
require('./modules/es6.number.constructor');
require('./modules/es6.number.to-fixed');
require('./modules/es6.number.to-precision');
require('./modules/es6.number.epsilon');
require('./modules/es6.number.is-finite');
require('./modules/es6.number.is-integer');
require('./modules/es6.number.is-nan');
require('./modules/es6.number.is-safe-integer');
require('./modules/es6.number.max-safe-integer');
require('./modules/es6.number.min-safe-integer');
require('./modules/es6.number.parse-float');
require('./modules/es6.number.parse-int');
require('./modules/es6.math.acosh');
require('./modules/es6.math.asinh');
require('./modules/es6.math.atanh');
require('./modules/es6.math.cbrt');
require('./modules/es6.math.clz32');
require('./modules/es6.math.cosh');
require('./modules/es6.math.expm1');
require('./modules/es6.math.fround');
require('./modules/es6.math.hypot');
require('./modules/es6.math.imul');
require('./modules/es6.math.log10');
require('./modules/es6.math.log1p');
require('./modules/es6.math.log2');
require('./modules/es6.math.sign');
require('./modules/es6.math.sinh');
require('./modules/es6.math.tanh');
require('./modules/es6.math.trunc');
require('./modules/es6.string.from-code-point');
require('./modules/es6.string.raw');
require('./modules/es6.string.trim');
require('./modules/es6.string.iterator');
require('./modules/es6.string.code-point-at');
require('./modules/es6.string.ends-with');
require('./modules/es6.string.includes');
require('./modules/es6.string.repeat');
require('./modules/es6.string.starts-with');
require('./modules/es6.string.anchor');
require('./modules/es6.string.big');
require('./modules/es6.string.blink');
require('./modules/es6.string.bold');
require('./modules/es6.string.fixed');
require('./modules/es6.string.fontcolor');
require('./modules/es6.string.fontsize');
require('./modules/es6.string.italics');
require('./modules/es6.string.link');
require('./modules/es6.string.small');
require('./modules/es6.string.strike');
require('./modules/es6.string.sub');
require('./modules/es6.string.sup');
require('./modules/es6.date.now');
require('./modules/es6.date.to-json');
require('./modules/es6.date.to-iso-string');
require('./modules/es6.date.to-string');
require('./modules/es6.date.to-primitive');
require('./modules/es6.array.is-array');
require('./modules/es6.array.from');
require('./modules/es6.array.of');
require('./modules/es6.array.join');
require('./modules/es6.array.slice');
require('./modules/es6.array.sort');
require('./modules/es6.array.for-each');
require('./modules/es6.array.map');
require('./modules/es6.array.filter');
require('./modules/es6.array.some');
require('./modules/es6.array.every');
require('./modules/es6.array.reduce');
require('./modules/es6.array.reduce-right');
require('./modules/es6.array.index-of');
require('./modules/es6.array.last-index-of');
require('./modules/es6.array.copy-within');
require('./modules/es6.array.fill');
require('./modules/es6.array.find');
require('./modules/es6.array.find-index');
require('./modules/es6.array.species');
require('./modules/es6.array.iterator');
require('./modules/es6.regexp.constructor');
require('./modules/es6.regexp.to-string');
require('./modules/es6.regexp.flags');
require('./modules/es6.regexp.match');
require('./modules/es6.regexp.replace');
require('./modules/es6.regexp.search');
require('./modules/es6.regexp.split');
require('./modules/es6.promise');
require('./modules/es6.map');
require('./modules/es6.set');
require('./modules/es6.weak-map');
require('./modules/es6.weak-set');
require('./modules/es6.typed.array-buffer');
require('./modules/es6.typed.data-view');
require('./modules/es6.typed.int8-array');
require('./modules/es6.typed.uint8-array');
require('./modules/es6.typed.uint8-clamped-array');
require('./modules/es6.typed.int16-array');
require('./modules/es6.typed.uint16-array');
require('./modules/es6.typed.int32-array');
require('./modules/es6.typed.uint32-array');
require('./modules/es6.typed.float32-array');
require('./modules/es6.typed.float64-array');
require('./modules/es6.reflect.apply');
require('./modules/es6.reflect.construct');
require('./modules/es6.reflect.define-property');
require('./modules/es6.reflect.delete-property');
require('./modules/es6.reflect.enumerate');
require('./modules/es6.reflect.get');
require('./modules/es6.reflect.get-own-property-descriptor');
require('./modules/es6.reflect.get-prototype-of');
require('./modules/es6.reflect.has');
require('./modules/es6.reflect.is-extensible');
require('./modules/es6.reflect.own-keys');
require('./modules/es6.reflect.prevent-extensions');
require('./modules/es6.reflect.set');
require('./modules/es6.reflect.set-prototype-of');
require('./modules/es7.array.includes');
require('./modules/es7.string.at');
require('./modules/es7.string.pad-start');
require('./modules/es7.string.pad-end');
require('./modules/es7.string.trim-left');
require('./modules/es7.string.trim-right');
require('./modules/es7.string.match-all');
require('./modules/es7.symbol.async-iterator');
require('./modules/es7.symbol.observable');
require('./modules/es7.object.get-own-property-descriptors');
require('./modules/es7.object.values');
require('./modules/es7.object.entries');
require('./modules/es7.object.define-getter');
require('./modules/es7.object.define-setter');
require('./modules/es7.object.lookup-getter');
require('./modules/es7.object.lookup-setter');
require('./modules/es7.map.to-json');
require('./modules/es7.set.to-json');
require('./modules/es7.system.global');
require('./modules/es7.error.is-error');
require('./modules/es7.math.iaddh');
require('./modules/es7.math.isubh');
require('./modules/es7.math.imulh');
require('./modules/es7.math.umulh');
require('./modules/es7.reflect.define-metadata');
require('./modules/es7.reflect.delete-metadata');
require('./modules/es7.reflect.get-metadata');
require('./modules/es7.reflect.get-metadata-keys');
require('./modules/es7.reflect.get-own-metadata');
require('./modules/es7.reflect.get-own-metadata-keys');
require('./modules/es7.reflect.has-metadata');
require('./modules/es7.reflect.has-own-metadata');
require('./modules/es7.reflect.metadata');
require('./modules/es7.asap');
require('./modules/es7.observable');
require('./modules/web.timers');
require('./modules/web.immediate');
require('./modules/web.dom.iterable');
module.exports = require('./modules/_core');
},{"./modules/_core":23,"./modules/es6.array.copy-within":120,"./modules/es6.array.every":121,"./modules/es6.array.fill":122,"./modules/es6.array.filter":123,"./modules/es6.array.find":125,"./modules/es6.array.find-index":124,"./modules/es6.array.for-each":126,"./modules/es6.array.from":127,"./modules/es6.array.index-of":128,"./modules/es6.array.is-array":129,"./modules/es6.array.iterator":130,"./modules/es6.array.join":131,"./modules/es6.array.last-index-of":132,"./modules/es6.array.map":133,"./modules/es6.array.of":134,"./modules/es6.array.reduce":136,"./modules/es6.array.reduce-right":135,"./modules/es6.array.slice":137,"./modules/es6.array.some":138,"./modules/es6.array.sort":139,"./modules/es6.array.species":140,"./modules/es6.date.now":141,"./modules/es6.date.to-iso-string":142,"./modules/es6.date.to-json":143,"./modules/es6.date.to-primitive":144,"./modules/es6.date.to-string":145,"./modules/es6.function.bind":146,"./modules/es6.function.has-instance":147,"./modules/es6.function.name":148,"./modules/es6.map":149,"./modules/es6.math.acosh":150,"./modules/es6.math.asinh":151,"./modules/es6.math.atanh":152,"./modules/es6.math.cbrt":153,"./modules/es6.math.clz32":154,"./modules/es6.math.cosh":155,"./modules/es6.math.expm1":156,"./modules/es6.math.fround":157,"./modules/es6.math.hypot":158,"./modules/es6.math.imul":159,"./modules/es6.math.log10":160,"./modules/es6.math.log1p":161,"./modules/es6.math.log2":162,"./modules/es6.math.sign":163,"./modules/es6.math.sinh":164,"./modules/es6.math.tanh":165,"./modules/es6.math.trunc":166,"./modules/es6.number.constructor":167,"./modules/es6.number.epsilon":168,"./modules/es6.number.is-finite":169,"./modules/es6.number.is-integer":170,"./modules/es6.number.is-nan":171,"./modules/es6.number.is-safe-integer":172,"./modules/es6.number.max-safe-integer":173,"./modules/es6.number.min-safe-integer":174,"./modules/es6.number.parse-float":175,"./modules/es6.number.parse-int":176,"./modules/es6.number.to-fixed":177,"./modules/es6.number.to-precision":178,"./modules/es6.object.assign":179,"./modules/es6.object.create":180,"./modules/es6.object.define-properties":181,"./modules/es6.object.define-property":182,"./modules/es6.object.freeze":183,"./modules/es6.object.get-own-property-descriptor":184,"./modules/es6.object.get-own-property-names":185,"./modules/es6.object.get-prototype-of":186,"./modules/es6.object.is":190,"./modules/es6.object.is-extensible":187,"./modules/es6.object.is-frozen":188,"./modules/es6.object.is-sealed":189,"./modules/es6.object.keys":191,"./modules/es6.object.prevent-extensions":192,"./modules/es6.object.seal":193,"./modules/es6.object.set-prototype-of":194,"./modules/es6.object.to-string":195,"./modules/es6.parse-float":196,"./modules/es6.parse-int":197,"./modules/es6.promise":198,"./modules/es6.reflect.apply":199,"./modules/es6.reflect.construct":200,"./modules/es6.reflect.define-property":201,"./modules/es6.reflect.delete-property":202,"./modules/es6.reflect.enumerate":203,"./modules/es6.reflect.get":206,"./modules/es6.reflect.get-own-property-descriptor":204,"./modules/es6.reflect.get-prototype-of":205,"./modules/es6.reflect.has":207,"./modules/es6.reflect.is-extensible":208,"./modules/es6.reflect.own-keys":209,"./modules/es6.reflect.prevent-extensions":210,"./modules/es6.reflect.set":212,"./modules/es6.reflect.set-prototype-of":211,"./modules/es6.regexp.constructor":213,"./modules/es6.regexp.flags":214,"./modules/es6.regexp.match":215,"./modules/es6.regexp.replace":216,"./modules/es6.regexp.search":217,"./modules/es6.regexp.split":218,"./modules/es6.regexp.to-string":219,"./modules/es6.set":220,"./modules/es6.string.anchor":221,"./modules/es6.string.big":222,"./modules/es6.string.blink":223,"./modules/es6.string.bold":224,"./modules/es6.string.code-point-at":225,"./modules/es6.string.ends-with":226,"./modules/es6.string.fixed":227,"./modules/es6.string.fontcolor":228,"./modules/es6.string.fontsize":229,"./modules/es6.string.from-code-point":230,"./modules/es6.string.includes":231,"./modules/es6.string.italics":232,"./modules/es6.string.iterator":233,"./modules/es6.string.link":234,"./modules/es6.string.raw":235,"./modules/es6.string.repeat":236,"./modules/es6.string.small":237,"./modules/es6.string.starts-with":238,"./modules/es6.string.strike":239,"./modules/es6.string.sub":240,"./modules/es6.string.sup":241,"./modules/es6.string.trim":242,"./modules/es6.symbol":243,"./modules/es6.typed.array-buffer":244,"./modules/es6.typed.data-view":245,"./modules/es6.typed.float32-array":246,"./modules/es6.typed.float64-array":247,"./modules/es6.typed.int16-array":248,"./modules/es6.typed.int32-array":249,"./modules/es6.typed.int8-array":250,"./modules/es6.typed.uint16-array":251,"./modules/es6.typed.uint32-array":252,"./modules/es6.typed.uint8-array":253,"./modules/es6.typed.uint8-clamped-array":254,"./modules/es6.weak-map":255,"./modules/es6.weak-set":256,"./modules/es7.array.includes":257,"./modules/es7.asap":258,"./modules/es7.error.is-error":259,"./modules/es7.map.to-json":260,"./modules/es7.math.iaddh":261,"./modules/es7.math.imulh":262,"./modules/es7.math.isubh":263,"./modules/es7.math.umulh":264,"./modules/es7.object.define-getter":265,"./modules/es7.object.define-setter":266,"./modules/es7.object.entries":267,"./modules/es7.object.get-own-property-descriptors":268,"./modules/es7.object.lookup-getter":269,"./modules/es7.object.lookup-setter":270,"./modules/es7.object.values":271,"./modules/es7.observable":272,"./modules/es7.reflect.define-metadata":273,"./modules/es7.reflect.delete-metadata":274,"./modules/es7.reflect.get-metadata":276,"./modules/es7.reflect.get-metadata-keys":275,"./modules/es7.reflect.get-own-metadata":278,"./modules/es7.reflect.get-own-metadata-keys":277,"./modules/es7.reflect.has-metadata":279,"./modules/es7.reflect.has-own-metadata":280,"./modules/es7.reflect.metadata":281,"./modules/es7.set.to-json":282,"./modules/es7.string.at":283,"./modules/es7.string.match-all":284,"./modules/es7.string.pad-end":285,"./modules/es7.string.pad-start":286,"./modules/es7.string.trim-left":287,"./modules/es7.string.trim-right":288,"./modules/es7.symbol.async-iterator":289,"./modules/es7.symbol.observable":290,"./modules/es7.system.global":291,"./modules/web.dom.iterable":292,"./modules/web.immediate":293,"./modules/web.timers":294}],296:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v3.1.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2016-09-22T22:30Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};



	function DOMEval( code, doc ) {
		doc = doc || document;

		var script = doc.createElement( "script" );

		script.text = code;
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.1.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = jQuery.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type( obj ) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 13
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Simple selector that can be filtered directly, removing non-Elements
	if ( risSimple.test( qualifier ) ) {
		return jQuery.filter( qualifier, elements, not );
	}

	// Complex selector, compare the two sets, removing non-Elements
	qualifier = jQuery.filter( qualifier, elements );
	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
	} );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( jQuery.isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			resolve.call( undefined, value );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.call( undefined, value );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( jQuery.isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								jQuery.isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ jQuery.camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ jQuery.camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( jQuery.camelCase );
			} else {
				key = jQuery.camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted,
		scale = 1,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		do {

			// If previous iteration zeroed out, double until we get *something*.
			// Use string for doubling so we don't accidentally see scale as unchanged below
			scale = scale || ".5";

			// Adjust and apply
			initialInUnit = initialInUnit / scale;
			jQuery.style( elem, prop, initialInUnit + unit );

		// Update scale, tolerating zero or NaN from tween.cur()
		// Break the loop if scale is unchanged or perfect, or if we've just had enough.
		} while (
			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
		);
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && jQuery.nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( jQuery.type( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: jQuery.isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

function manipulationTarget( elem, content ) {
	if ( jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return elem.getElementsByTagName( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		isFunction = jQuery.isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( isFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( isFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rmargin = ( /^margin/ );

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		div.style.cssText =
			"box-sizing:border-box;" +
			"position:relative;display:block;" +
			"margin:auto;border:1px;padding:1px;" +
			"top:1%;width:50%";
		div.innerHTML = "";
		documentElement.appendChild( container );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = divStyle.marginLeft === "2px";
		boxSizingReliableVal = divStyle.width === "4px";

		// Support: Android 4.0 - 4.3 only
		// Some styles come back with percentage values, even though they shouldn't
		div.style.marginRight = "50%";
		pixelMarginRightVal = divStyle.marginRight === "4px";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
		"padding:0;margin-top:1px;position:absolute";
	container.appendChild( div );

	jQuery.extend( support, {
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelMarginRight: function() {
			computeStyleTests();
			return pixelMarginRightVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE <=9 only
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i,
		val = 0;

	// If we already have the right measurement, avoid augmentation
	if ( extra === ( isBorderBox ? "border" : "content" ) ) {
		i = 4;

	// Otherwise initialize for horizontal or vertical properties
	} else {
		i = name === "width" ? 1 : 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {

			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {

			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val,
		valueIsBorderBox = true,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Support: IE <=11 only
	// Running getBoundingClientRect on a disconnected node
	// in IE throws an error.
	if ( elem.getClientRects().length ) {
		val = elem.getBoundingClientRect()[ name ];
	}

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {

		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				style[ name ] = value;
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] ||
			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}
		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, name, extra );
						} ) :
						getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = extra && getStyles( elem ),
				subtract = extra && augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				);

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ name ] = value;
				value = jQuery.css( elem, name );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function raf() {
	if ( timerId ) {
		window.requestAnimationFrame( raf );
		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 13
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( jQuery.isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					jQuery.proxy( result.stop, result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	// Go to the end state if fx are off or if document is hidden
	if ( jQuery.fx.off || document.hidden ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = window.requestAnimationFrame ?
			window.requestAnimationFrame( raf ) :
			window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	if ( window.cancelAnimationFrame ) {
		window.cancelAnimationFrame( timerId );
	} else {
		window.clearInterval( timerId );
	}

	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		if ( typeof value === "string" && value ) {
			classes = value.match( rnothtmlwhite ) || [];

			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( type === "string" ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = value.match( rnothtmlwhite ) || [];

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




support.focusin = "onfocusin" in window;


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = jQuery.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( jQuery.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( jQuery.isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 13
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( jQuery.isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var docElem, win, rect, doc,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		rect = elem.getBoundingClientRect();

		// Make sure element is not hidden (display: none)
		if ( rect.width || rect.height ) {
			doc = elem.ownerDocument;
			win = getWindow( doc );
			docElem = doc.documentElement;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		}

		// Return zeros for disconnected and hidden elements (gh-2310)
		return rect;
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
		// because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {

			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset = {
				top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
				left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
			};
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

jQuery.parseJSON = JSON.parse;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}





return jQuery;
} );

},{}],297:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

},{"./_getNative":397,"./_root":442}],298:[function(require,module,exports){
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

},{"./_hashClear":407,"./_hashDelete":408,"./_hashGet":409,"./_hashHas":410,"./_hashSet":411}],299:[function(require,module,exports){
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

},{"./_listCacheClear":422,"./_listCacheDelete":423,"./_listCacheGet":424,"./_listCacheHas":425,"./_listCacheSet":426}],300:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

},{"./_getNative":397,"./_root":442}],301:[function(require,module,exports){
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

},{"./_mapCacheClear":427,"./_mapCacheDelete":428,"./_mapCacheGet":429,"./_mapCacheHas":430,"./_mapCacheSet":431}],302:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;

},{"./_getNative":397,"./_root":442}],303:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

},{"./_getNative":397,"./_root":442}],304:[function(require,module,exports){
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

},{"./_MapCache":301,"./_setCacheAdd":443,"./_setCacheHas":444}],305:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    stackClear = require('./_stackClear'),
    stackDelete = require('./_stackDelete'),
    stackGet = require('./_stackGet'),
    stackHas = require('./_stackHas'),
    stackSet = require('./_stackSet');

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;

},{"./_ListCache":299,"./_stackClear":448,"./_stackDelete":449,"./_stackGet":450,"./_stackHas":451,"./_stackSet":452}],306:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;

},{"./_root":442}],307:[function(require,module,exports){
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

},{"./_root":442}],308:[function(require,module,exports){
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;

},{"./_getNative":397,"./_root":442}],309:[function(require,module,exports){
/**
 * Adds the key-value `pair` to `map`.
 *
 * @private
 * @param {Object} map The map to modify.
 * @param {Array} pair The key-value pair to add.
 * @returns {Object} Returns `map`.
 */
function addMapEntry(map, pair) {
  // Don't return `map.set` because it's not chainable in IE 11.
  map.set(pair[0], pair[1]);
  return map;
}

module.exports = addMapEntry;

},{}],310:[function(require,module,exports){
/**
 * Adds `value` to `set`.
 *
 * @private
 * @param {Object} set The set to modify.
 * @param {*} value The value to add.
 * @returns {Object} Returns `set`.
 */
function addSetEntry(set, value) {
  // Don't return `set.add` because it's not chainable in IE 11.
  set.add(value);
  return set;
}

module.exports = addSetEntry;

},{}],311:[function(require,module,exports){
/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

module.exports = apply;

},{}],312:[function(require,module,exports){
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;

},{}],313:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf');

/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

},{"./_baseIndexOf":340}],314:[function(require,module,exports){
/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }
  return false;
}

module.exports = arrayIncludesWith;

},{}],315:[function(require,module,exports){
var baseTimes = require('./_baseTimes'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isIndex = require('./_isIndex'),
    isTypedArray = require('./isTypedArray');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;

},{"./_baseTimes":361,"./_isIndex":415,"./isArguments":475,"./isArray":476,"./isBuffer":479,"./isTypedArray":491}],316:[function(require,module,exports){
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;

},{}],317:[function(require,module,exports){
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;

},{}],318:[function(require,module,exports){
/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }
  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }
  return accumulator;
}

module.exports = arrayReduce;

},{}],319:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],320:[function(require,module,exports){
/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;

},{}],321:[function(require,module,exports){
/** Used to match words composed of alphanumeric characters. */
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

/**
 * Splits an ASCII `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}

module.exports = asciiWords;

},{}],322:[function(require,module,exports){
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

},{"./_baseAssignValue":326,"./eq":465}],323:[function(require,module,exports){
var eq = require('./eq');

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;

},{"./eq":465}],324:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keys = require('./keys');

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

},{"./_copyObject":378,"./keys":492}],325:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    keysIn = require('./keysIn');

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;

},{"./_copyObject":378,"./keysIn":493}],326:[function(require,module,exports){
var defineProperty = require('./_defineProperty');

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

},{"./_defineProperty":388}],327:[function(require,module,exports){
/**
 * The base implementation of `_.clamp` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 */
function baseClamp(number, lower, upper) {
  if (number === number) {
    if (upper !== undefined) {
      number = number <= upper ? number : upper;
    }
    if (lower !== undefined) {
      number = number >= lower ? number : lower;
    }
  }
  return number;
}

module.exports = baseClamp;

},{}],328:[function(require,module,exports){
var Stack = require('./_Stack'),
    arrayEach = require('./_arrayEach'),
    assignValue = require('./_assignValue'),
    baseAssign = require('./_baseAssign'),
    baseAssignIn = require('./_baseAssignIn'),
    cloneBuffer = require('./_cloneBuffer'),
    copyArray = require('./_copyArray'),
    copySymbols = require('./_copySymbols'),
    copySymbolsIn = require('./_copySymbolsIn'),
    getAllKeys = require('./_getAllKeys'),
    getAllKeysIn = require('./_getAllKeysIn'),
    getTag = require('./_getTag'),
    initCloneArray = require('./_initCloneArray'),
    initCloneByTag = require('./_initCloneByTag'),
    initCloneObject = require('./_initCloneObject'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isObject = require('./isObject'),
    keys = require('./keys');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, baseClone, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;

},{"./_Stack":305,"./_arrayEach":312,"./_assignValue":322,"./_baseAssign":324,"./_baseAssignIn":325,"./_cloneBuffer":370,"./_copyArray":377,"./_copySymbols":379,"./_copySymbolsIn":380,"./_getAllKeys":393,"./_getAllKeysIn":394,"./_getTag":402,"./_initCloneArray":412,"./_initCloneByTag":413,"./_initCloneObject":414,"./isArray":476,"./isBuffer":479,"./isObject":487,"./keys":492}],329:[function(require,module,exports){
var isObject = require('./isObject');

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;

},{"./isObject":487}],330:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arrayIncludes = require('./_arrayIncludes'),
    arrayIncludesWith = require('./_arrayIncludesWith'),
    arrayMap = require('./_arrayMap'),
    baseUnary = require('./_baseUnary'),
    cacheHas = require('./_cacheHas');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */
function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }
  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }
  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  }
  else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }
  outer:
  while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);

    value = (comparator || value !== 0) ? value : 0;
    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;
      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }
      result.push(value);
    }
    else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }
  return result;
}

module.exports = baseDifference;

},{"./_SetCache":304,"./_arrayIncludes":313,"./_arrayIncludesWith":314,"./_arrayMap":316,"./_baseUnary":363,"./_cacheHas":365}],331:[function(require,module,exports){
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./_baseForOwn":334,"./_createBaseEach":382}],332:[function(require,module,exports){
/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;

},{}],333:[function(require,module,exports){
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./_createBaseFor":383}],334:[function(require,module,exports){
var baseFor = require('./_baseFor'),
    keys = require('./keys');

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"./_baseFor":333,"./keys":492}],335:[function(require,module,exports){
var castPath = require('./_castPath'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./_castPath":367,"./_toKey":456}],336:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    isArray = require('./isArray');

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

},{"./_arrayPush":317,"./isArray":476}],337:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    getRawTag = require('./_getRawTag'),
    objectToString = require('./_objectToString');

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  value = Object(value);
  return (symToStringTag && symToStringTag in value)
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;

},{"./_Symbol":306,"./_getRawTag":399,"./_objectToString":439}],338:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;

},{}],339:[function(require,module,exports){
/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

},{}],340:[function(require,module,exports){
var baseFindIndex = require('./_baseFindIndex'),
    baseIsNaN = require('./_baseIsNaN'),
    strictIndexOf = require('./_strictIndexOf');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

},{"./_baseFindIndex":332,"./_baseIsNaN":345,"./_strictIndexOf":453}],341:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

},{"./_baseGetTag":337,"./isObjectLike":488}],342:[function(require,module,exports){
var baseIsEqualDeep = require('./_baseIsEqualDeep'),
    isObject = require('./isObject'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

},{"./_baseIsEqualDeep":343,"./isObject":487,"./isObjectLike":488}],343:[function(require,module,exports){
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = getTag(object);
    objTag = objTag == argsTag ? objectTag : objTag;
  }
  if (!othIsArr) {
    othTag = getTag(other);
    othTag = othTag == argsTag ? objectTag : othTag;
  }
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

},{"./_Stack":305,"./_equalArrays":389,"./_equalByTag":390,"./_equalObjects":391,"./_getTag":402,"./isArray":476,"./isBuffer":479,"./isTypedArray":491}],344:[function(require,module,exports){
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./_Stack":305,"./_baseIsEqual":342}],345:[function(require,module,exports){
/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

},{}],346:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isMasked = require('./_isMasked'),
    isObject = require('./isObject'),
    toSource = require('./_toSource');

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

},{"./_isMasked":419,"./_toSource":457,"./isFunction":482,"./isObject":487}],347:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

},{"./_baseGetTag":337,"./isLength":483,"./isObjectLike":488}],348:[function(require,module,exports){
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

},{"./_baseMatches":352,"./_baseMatchesProperty":353,"./identity":473,"./isArray":476,"./property":499}],349:[function(require,module,exports){
var isPrototype = require('./_isPrototype'),
    nativeKeys = require('./_nativeKeys');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;

},{"./_isPrototype":420,"./_nativeKeys":436}],350:[function(require,module,exports){
var isObject = require('./isObject'),
    isPrototype = require('./_isPrototype'),
    nativeKeysIn = require('./_nativeKeysIn');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;

},{"./_isPrototype":420,"./_nativeKeysIn":437,"./isObject":487}],351:[function(require,module,exports){
var baseEach = require('./_baseEach'),
    isArrayLike = require('./isArrayLike');

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

},{"./_baseEach":331,"./isArrayLike":477}],352:[function(require,module,exports){
var baseIsMatch = require('./_baseIsMatch'),
    getMatchData = require('./_getMatchData'),
    matchesStrictComparable = require('./_matchesStrictComparable');

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

},{"./_baseIsMatch":344,"./_getMatchData":396,"./_matchesStrictComparable":433}],353:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual'),
    get = require('./get'),
    hasIn = require('./hasIn'),
    isKey = require('./_isKey'),
    isStrictComparable = require('./_isStrictComparable'),
    matchesStrictComparable = require('./_matchesStrictComparable'),
    toKey = require('./_toKey');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

},{"./_baseIsEqual":342,"./_isKey":417,"./_isStrictComparable":421,"./_matchesStrictComparable":433,"./_toKey":456,"./get":469,"./hasIn":471}],354:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],355:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

},{"./_baseGet":335}],356:[function(require,module,exports){
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

module.exports = basePropertyOf;

},{}],357:[function(require,module,exports){
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeFloor = Math.floor,
    nativeRandom = Math.random;

/**
 * The base implementation of `_.random` without support for returning
 * floating-point numbers.
 *
 * @private
 * @param {number} lower The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the random number.
 */
function baseRandom(lower, upper) {
  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
}

module.exports = baseRandom;

},{}],358:[function(require,module,exports){
var identity = require('./identity'),
    overRest = require('./_overRest'),
    setToString = require('./_setToString');

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

},{"./_overRest":441,"./_setToString":446,"./identity":473}],359:[function(require,module,exports){
var constant = require('./constant'),
    defineProperty = require('./_defineProperty'),
    identity = require('./identity');

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

module.exports = baseSetToString;

},{"./_defineProperty":388,"./constant":463,"./identity":473}],360:[function(require,module,exports){
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;

},{}],361:[function(require,module,exports){
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;

},{}],362:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

},{"./_Symbol":306,"./_arrayMap":316,"./isArray":476,"./isSymbol":490}],363:[function(require,module,exports){
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;

},{}],364:[function(require,module,exports){
var arrayMap = require('./_arrayMap');

/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */
function baseValues(object, props) {
  return arrayMap(props, function(key) {
    return object[key];
  });
}

module.exports = baseValues;

},{"./_arrayMap":316}],365:[function(require,module,exports){
/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

},{}],366:[function(require,module,exports){
var identity = require('./identity');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

},{"./identity":473}],367:[function(require,module,exports){
var isArray = require('./isArray'),
    isKey = require('./_isKey'),
    stringToPath = require('./_stringToPath'),
    toString = require('./toString');

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

},{"./_isKey":417,"./_stringToPath":455,"./isArray":476,"./toString":509}],368:[function(require,module,exports){
var baseSlice = require('./_baseSlice');

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

module.exports = castSlice;

},{"./_baseSlice":360}],369:[function(require,module,exports){
var Uint8Array = require('./_Uint8Array');

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

},{"./_Uint8Array":307}],370:[function(require,module,exports){
var root = require('./_root');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;

},{"./_root":442}],371:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

},{"./_cloneArrayBuffer":369}],372:[function(require,module,exports){
var addMapEntry = require('./_addMapEntry'),
    arrayReduce = require('./_arrayReduce'),
    mapToArray = require('./_mapToArray');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a clone of `map`.
 *
 * @private
 * @param {Object} map The map to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned map.
 */
function cloneMap(map, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
  return arrayReduce(array, addMapEntry, new map.constructor);
}

module.exports = cloneMap;

},{"./_addMapEntry":309,"./_arrayReduce":318,"./_mapToArray":432}],373:[function(require,module,exports){
/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

},{}],374:[function(require,module,exports){
var addSetEntry = require('./_addSetEntry'),
    arrayReduce = require('./_arrayReduce'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a clone of `set`.
 *
 * @private
 * @param {Object} set The set to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned set.
 */
function cloneSet(set, isDeep, cloneFunc) {
  var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
  return arrayReduce(array, addSetEntry, new set.constructor);
}

module.exports = cloneSet;

},{"./_addSetEntry":310,"./_arrayReduce":318,"./_setToArray":445}],375:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

},{"./_Symbol":306}],376:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

},{"./_cloneArrayBuffer":369}],377:[function(require,module,exports){
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;

},{}],378:[function(require,module,exports){
var assignValue = require('./_assignValue'),
    baseAssignValue = require('./_baseAssignValue');

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;

},{"./_assignValue":322,"./_baseAssignValue":326}],379:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    getSymbols = require('./_getSymbols');

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

},{"./_copyObject":378,"./_getSymbols":400}],380:[function(require,module,exports){
var copyObject = require('./_copyObject'),
    getSymbolsIn = require('./_getSymbolsIn');

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

},{"./_copyObject":378,"./_getSymbolsIn":401}],381:[function(require,module,exports){
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

},{"./_root":442}],382:[function(require,module,exports){
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./isArrayLike":477}],383:[function(require,module,exports){
/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{}],384:[function(require,module,exports){
var castSlice = require('./_castSlice'),
    hasUnicode = require('./_hasUnicode'),
    stringToArray = require('./_stringToArray'),
    toString = require('./toString');

/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);

    var strSymbols = hasUnicode(string)
      ? stringToArray(string)
      : undefined;

    var chr = strSymbols
      ? strSymbols[0]
      : string.charAt(0);

    var trailing = strSymbols
      ? castSlice(strSymbols, 1).join('')
      : string.slice(1);

    return chr[methodName]() + trailing;
  };
}

module.exports = createCaseFirst;

},{"./_castSlice":368,"./_hasUnicode":405,"./_stringToArray":454,"./toString":509}],385:[function(require,module,exports){
var arrayReduce = require('./_arrayReduce'),
    deburr = require('./deburr'),
    words = require('./words');

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]";

/** Used to match apostrophes. */
var reApos = RegExp(rsApos, 'g');

/**
 * Creates a function like `_.camelCase`.
 *
 * @private
 * @param {Function} callback The function to combine each word.
 * @returns {Function} Returns the new compounder function.
 */
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
  };
}

module.exports = createCompounder;

},{"./_arrayReduce":318,"./deburr":464,"./words":514}],386:[function(require,module,exports){
var baseIteratee = require('./_baseIteratee'),
    isArrayLike = require('./isArrayLike'),
    keys = require('./keys');

/**
 * Creates a `_.find` or `_.findLast` function.
 *
 * @private
 * @param {Function} findIndexFunc The function to find the collection index.
 * @returns {Function} Returns the new find function.
 */
function createFind(findIndexFunc) {
  return function(collection, predicate, fromIndex) {
    var iterable = Object(collection);
    if (!isArrayLike(collection)) {
      var iteratee = baseIteratee(predicate, 3);
      collection = keys(collection);
      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
    }
    var index = findIndexFunc(collection, predicate, fromIndex);
    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
  };
}

module.exports = createFind;

},{"./_baseIteratee":348,"./isArrayLike":477,"./keys":492}],387:[function(require,module,exports){
var basePropertyOf = require('./_basePropertyOf');

/** Used to map Latin Unicode letters to basic Latin letters. */
var deburredLetters = {
  // Latin-1 Supplement block.
  '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
  '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
  '\xc7': 'C',  '\xe7': 'c',
  '\xd0': 'D',  '\xf0': 'd',
  '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
  '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
  '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
  '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
  '\xd1': 'N',  '\xf1': 'n',
  '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
  '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
  '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
  '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
  '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
  '\xc6': 'Ae', '\xe6': 'ae',
  '\xde': 'Th', '\xfe': 'th',
  '\xdf': 'ss',
  // Latin Extended-A block.
  '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
  '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
  '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
  '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
  '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
  '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
  '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
  '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
  '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
  '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
  '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
  '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
  '\u0134': 'J',  '\u0135': 'j',
  '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
  '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
  '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
  '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
  '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
  '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
  '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
  '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
  '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
  '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
  '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
  '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
  '\u0163': 't',  '\u0165': 't', '\u0167': 't',
  '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
  '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
  '\u0174': 'W',  '\u0175': 'w',
  '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
  '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
  '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
  '\u0132': 'IJ', '\u0133': 'ij',
  '\u0152': 'Oe', '\u0153': 'oe',
  '\u0149': "'n", '\u017f': 's'
};

/**
 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
 * letters to basic Latin letters.
 *
 * @private
 * @param {string} letter The matched letter to deburr.
 * @returns {string} Returns the deburred letter.
 */
var deburrLetter = basePropertyOf(deburredLetters);

module.exports = deburrLetter;

},{"./_basePropertyOf":356}],388:[function(require,module,exports){
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

},{"./_getNative":397}],389:[function(require,module,exports){
var SetCache = require('./_SetCache'),
    arraySome = require('./_arraySome'),
    cacheHas = require('./_cacheHas');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(array);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

},{"./_SetCache":304,"./_arraySome":319,"./_cacheHas":365}],390:[function(require,module,exports){
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

},{"./_Symbol":306,"./_Uint8Array":307,"./_equalArrays":389,"./_mapToArray":432,"./_setToArray":445,"./eq":465}],391:[function(require,module,exports){
var keys = require('./keys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Assume cyclic values are equal.
  var stacked = stack.get(object);
  if (stacked && stack.get(other)) {
    return stacked == other;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

},{"./keys":492}],392:[function(require,module,exports){
(function (global){
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

module.exports = freeGlobal;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],393:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbols = require('./_getSymbols'),
    keys = require('./keys');

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

},{"./_baseGetAllKeys":336,"./_getSymbols":400,"./keys":492}],394:[function(require,module,exports){
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbolsIn = require('./_getSymbolsIn'),
    keysIn = require('./keysIn');

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

},{"./_baseGetAllKeys":336,"./_getSymbolsIn":401,"./keysIn":493}],395:[function(require,module,exports){
var isKeyable = require('./_isKeyable');

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;

},{"./_isKeyable":418}],396:[function(require,module,exports){
var isStrictComparable = require('./_isStrictComparable'),
    keys = require('./keys');

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;

},{"./_isStrictComparable":421,"./keys":492}],397:[function(require,module,exports){
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

},{"./_baseIsNative":346,"./_getValue":403}],398:[function(require,module,exports){
var overArg = require('./_overArg');

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;

},{"./_overArg":440}],399:[function(require,module,exports){
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

},{"./_Symbol":306}],400:[function(require,module,exports){
var overArg = require('./_overArg'),
    stubArray = require('./stubArray');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

module.exports = getSymbols;

},{"./_overArg":440,"./stubArray":503}],401:[function(require,module,exports){
var arrayPush = require('./_arrayPush'),
    getPrototype = require('./_getPrototype'),
    getSymbols = require('./_getSymbols'),
    stubArray = require('./stubArray');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;

},{"./_arrayPush":317,"./_getPrototype":398,"./_getSymbols":400,"./stubArray":503}],402:[function(require,module,exports){
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;

},{"./_DataView":297,"./_Map":300,"./_Promise":302,"./_Set":303,"./_WeakMap":308,"./_baseGetTag":337,"./_toSource":457}],403:[function(require,module,exports){
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

},{}],404:[function(require,module,exports){
var castPath = require('./_castPath'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isIndex = require('./_isIndex'),
    isLength = require('./isLength'),
    toKey = require('./_toKey');

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;

},{"./_castPath":367,"./_isIndex":415,"./_toKey":456,"./isArguments":475,"./isArray":476,"./isLength":483}],405:[function(require,module,exports){
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;

},{}],406:[function(require,module,exports){
/** Used to detect strings that need a more robust regexp to match words. */
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

/**
 * Checks if `string` contains a word composed of Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a word is found, else `false`.
 */
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}

module.exports = hasUnicodeWord;

},{}],407:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

},{"./_nativeCreate":435}],408:[function(require,module,exports){
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

},{}],409:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

},{"./_nativeCreate":435}],410:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

},{"./_nativeCreate":435}],411:[function(require,module,exports){
var nativeCreate = require('./_nativeCreate');

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

},{"./_nativeCreate":435}],412:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;

},{}],413:[function(require,module,exports){
var cloneArrayBuffer = require('./_cloneArrayBuffer'),
    cloneDataView = require('./_cloneDataView'),
    cloneMap = require('./_cloneMap'),
    cloneRegExp = require('./_cloneRegExp'),
    cloneSet = require('./_cloneSet'),
    cloneSymbol = require('./_cloneSymbol'),
    cloneTypedArray = require('./_cloneTypedArray');

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {Function} cloneFunc The function to clone values.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, cloneFunc, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return cloneMap(object, isDeep, cloneFunc);

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return cloneSet(object, isDeep, cloneFunc);

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

},{"./_cloneArrayBuffer":369,"./_cloneDataView":371,"./_cloneMap":372,"./_cloneRegExp":373,"./_cloneSet":374,"./_cloneSymbol":375,"./_cloneTypedArray":376}],414:[function(require,module,exports){
var baseCreate = require('./_baseCreate'),
    getPrototype = require('./_getPrototype'),
    isPrototype = require('./_isPrototype');

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;

},{"./_baseCreate":329,"./_getPrototype":398,"./_isPrototype":420}],415:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length &&
    (typeof value == 'number' || reIsUint.test(value)) &&
    (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

},{}],416:[function(require,module,exports){
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

},{"./_isIndex":415,"./eq":465,"./isArrayLike":477,"./isObject":487}],417:[function(require,module,exports){
var isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;

},{"./isArray":476,"./isSymbol":490}],418:[function(require,module,exports){
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

},{}],419:[function(require,module,exports){
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

},{"./_coreJsData":381}],420:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

},{}],421:[function(require,module,exports){
var isObject = require('./isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"./isObject":487}],422:[function(require,module,exports){
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

},{}],423:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;

},{"./_assocIndexOf":323}],424:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

},{"./_assocIndexOf":323}],425:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

},{"./_assocIndexOf":323}],426:[function(require,module,exports){
var assocIndexOf = require('./_assocIndexOf');

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;

},{"./_assocIndexOf":323}],427:[function(require,module,exports){
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

},{"./_Hash":298,"./_ListCache":299,"./_Map":300}],428:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

},{"./_getMapData":395}],429:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

},{"./_getMapData":395}],430:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

},{"./_getMapData":395}],431:[function(require,module,exports){
var getMapData = require('./_getMapData');

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

},{"./_getMapData":395}],432:[function(require,module,exports){
/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

},{}],433:[function(require,module,exports){
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

},{}],434:[function(require,module,exports){
var memoize = require('./memoize');

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

},{"./memoize":498}],435:[function(require,module,exports){
var getNative = require('./_getNative');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;

},{"./_getNative":397}],436:[function(require,module,exports){
var overArg = require('./_overArg');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;

},{"./_overArg":440}],437:[function(require,module,exports){
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;

},{}],438:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;

},{"./_freeGlobal":392}],439:[function(require,module,exports){
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

},{}],440:[function(require,module,exports){
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

},{}],441:[function(require,module,exports){
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

},{"./_apply":311}],442:[function(require,module,exports){
var freeGlobal = require('./_freeGlobal');

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;

},{"./_freeGlobal":392}],443:[function(require,module,exports){
/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;

},{}],444:[function(require,module,exports){
/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

},{}],445:[function(require,module,exports){
/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

},{}],446:[function(require,module,exports){
var baseSetToString = require('./_baseSetToString'),
    shortOut = require('./_shortOut');

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

module.exports = setToString;

},{"./_baseSetToString":359,"./_shortOut":447}],447:[function(require,module,exports){
/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

},{}],448:[function(require,module,exports){
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

},{"./_ListCache":299}],449:[function(require,module,exports){
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;

},{}],450:[function(require,module,exports){
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

},{}],451:[function(require,module,exports){
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

},{}],452:[function(require,module,exports){
var ListCache = require('./_ListCache'),
    Map = require('./_Map'),
    MapCache = require('./_MapCache');

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

},{"./_ListCache":299,"./_Map":300,"./_MapCache":301}],453:[function(require,module,exports){
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

},{}],454:[function(require,module,exports){
var asciiToArray = require('./_asciiToArray'),
    hasUnicode = require('./_hasUnicode'),
    unicodeToArray = require('./_unicodeToArray');

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

module.exports = stringToArray;

},{"./_asciiToArray":320,"./_hasUnicode":405,"./_unicodeToArray":458}],455:[function(require,module,exports){
var memoizeCapped = require('./_memoizeCapped');

/** Used to match property names within property paths. */
var reLeadingDot = /^\./,
    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (reLeadingDot.test(string)) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;

},{"./_memoizeCapped":434}],456:[function(require,module,exports){
var isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;

},{"./isSymbol":490}],457:[function(require,module,exports){
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

},{}],458:[function(require,module,exports){
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;

},{}],459:[function(require,module,exports){
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
    rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

module.exports = unicodeWords;

},{}],460:[function(require,module,exports){
var baseClone = require('./_baseClone');

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;

},{"./_baseClone":328}],461:[function(require,module,exports){
var baseClone = require('./_baseClone');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;

},{"./_baseClone":328}],462:[function(require,module,exports){
/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */
function compact(array) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = compact;

},{}],463:[function(require,module,exports){
/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

module.exports = constant;

},{}],464:[function(require,module,exports){
var deburrLetter = require('./_deburrLetter'),
    toString = require('./toString');

/** Used to match Latin Unicode letters (excluding mathematical operators). */
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

/** Used to compose unicode character classes. */
var rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

/** Used to compose unicode capture groups. */
var rsCombo = '[' + rsComboRange + ']';

/**
 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
 */
var reComboMark = RegExp(rsCombo, 'g');

/**
 * Deburrs `string` by converting
 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
 * letters to basic Latin letters and removing
 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to deburr.
 * @returns {string} Returns the deburred string.
 * @example
 *
 * _.deburr('déjà vu');
 * // => 'deja vu'
 */
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
}

module.exports = deburr;

},{"./_deburrLetter":387,"./toString":509}],465:[function(require,module,exports){
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

},{}],466:[function(require,module,exports){
var createFind = require('./_createFind'),
    findIndex = require('./findIndex');

/**
 * Iterates over elements of `collection`, returning the first element
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36, 'active': true },
 *   { 'user': 'fred',    'age': 40, 'active': false },
 *   { 'user': 'pebbles', 'age': 1,  'active': true }
 * ];
 *
 * _.find(users, function(o) { return o.age < 40; });
 * // => object for 'barney'
 *
 * // The `_.matches` iteratee shorthand.
 * _.find(users, { 'age': 1, 'active': true });
 * // => object for 'pebbles'
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.find(users, ['active', false]);
 * // => object for 'fred'
 *
 * // The `_.property` iteratee shorthand.
 * _.find(users, 'active');
 * // => object for 'barney'
 */
var find = createFind(findIndex);

module.exports = find;

},{"./_createFind":386,"./findIndex":467}],467:[function(require,module,exports){
var baseFindIndex = require('./_baseFindIndex'),
    baseIteratee = require('./_baseIteratee'),
    toInteger = require('./toInteger');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;

},{"./_baseFindIndex":332,"./_baseIteratee":348,"./toInteger":507}],468:[function(require,module,exports){
var arrayEach = require('./_arrayEach'),
    baseEach = require('./_baseEach'),
    castFunction = require('./_castFunction'),
    isArray = require('./isArray');

/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;

},{"./_arrayEach":312,"./_baseEach":331,"./_castFunction":366,"./isArray":476}],469:[function(require,module,exports){
var baseGet = require('./_baseGet');

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

},{"./_baseGet":335}],470:[function(require,module,exports){
var baseHas = require('./_baseHas'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */
function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;

},{"./_baseHas":338,"./_hasPath":404}],471:[function(require,module,exports){
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

},{"./_baseHasIn":339,"./_hasPath":404}],472:[function(require,module,exports){
/**
 * Gets the first element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias first
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the first element of `array`.
 * @example
 *
 * _.head([1, 2, 3]);
 * // => 1
 *
 * _.head([]);
 * // => undefined
 */
function head(array) {
  return (array && array.length) ? array[0] : undefined;
}

module.exports = head;

},{}],473:[function(require,module,exports){
/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],474:[function(require,module,exports){
var baseIndexOf = require('./_baseIndexOf'),
    isArrayLike = require('./isArrayLike'),
    isString = require('./isString'),
    toInteger = require('./toInteger'),
    values = require('./values');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

module.exports = includes;

},{"./_baseIndexOf":340,"./isArrayLike":477,"./isString":489,"./toInteger":507,"./values":512}],475:[function(require,module,exports){
var baseIsArguments = require('./_baseIsArguments'),
    isObjectLike = require('./isObjectLike');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;

},{"./_baseIsArguments":341,"./isObjectLike":488}],476:[function(require,module,exports){
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;

},{}],477:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

},{"./isFunction":482,"./isLength":483}],478:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isObjectLike = require('./isObjectLike');

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

},{"./isArrayLike":477,"./isObjectLike":488}],479:[function(require,module,exports){
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

},{"./_root":442,"./stubFalse":504}],480:[function(require,module,exports){
var baseKeys = require('./_baseKeys'),
    getTag = require('./_getTag'),
    isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('./isArrayLike'),
    isBuffer = require('./isBuffer'),
    isPrototype = require('./_isPrototype'),
    isTypedArray = require('./isTypedArray');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) &&
      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }
  var tag = getTag(value);
  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }
  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }
  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }
  return true;
}

module.exports = isEmpty;

},{"./_baseKeys":349,"./_getTag":402,"./_isPrototype":420,"./isArguments":475,"./isArray":476,"./isArrayLike":477,"./isBuffer":479,"./isTypedArray":491}],481:[function(require,module,exports){
var baseIsEqual = require('./_baseIsEqual');

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are **not** supported.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

},{"./_baseIsEqual":342}],482:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObject = require('./isObject');

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

},{"./_baseGetTag":337,"./isObject":487}],483:[function(require,module,exports){
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],484:[function(require,module,exports){
var isNumber = require('./isNumber');

/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */
function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

module.exports = isNaN;

},{"./isNumber":486}],485:[function(require,module,exports){
/**
 * Checks if `value` is `null` or `undefined`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
 * @example
 *
 * _.isNil(null);
 * // => true
 *
 * _.isNil(void 0);
 * // => true
 *
 * _.isNil(NaN);
 * // => false
 */
function isNil(value) {
  return value == null;
}

module.exports = isNil;

},{}],486:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;

},{"./_baseGetTag":337,"./isObjectLike":488}],487:[function(require,module,exports){
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],488:[function(require,module,exports){
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],489:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isArray = require('./isArray'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;

},{"./_baseGetTag":337,"./isArray":476,"./isObjectLike":488}],490:[function(require,module,exports){
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;

},{"./_baseGetTag":337,"./isObjectLike":488}],491:[function(require,module,exports){
var baseIsTypedArray = require('./_baseIsTypedArray'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;

},{"./_baseIsTypedArray":347,"./_baseUnary":363,"./_nodeUtil":438}],492:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

},{"./_arrayLikeKeys":315,"./_baseKeys":349,"./isArrayLike":477}],493:[function(require,module,exports){
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeysIn = require('./_baseKeysIn'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

},{"./_arrayLikeKeys":315,"./_baseKeysIn":350,"./isArrayLike":477}],494:[function(require,module,exports){
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;

},{}],495:[function(require,module,exports){
var createCompounder = require('./_createCompounder');

/**
 * Converts `string`, as space separated words, to lower case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the lower cased string.
 * @example
 *
 * _.lowerCase('--Foo-Bar--');
 * // => 'foo bar'
 *
 * _.lowerCase('fooBar');
 * // => 'foo bar'
 *
 * _.lowerCase('__FOO_BAR__');
 * // => 'foo bar'
 */
var lowerCase = createCompounder(function(result, word, index) {
  return result + (index ? ' ' : '') + word.toLowerCase();
});

module.exports = lowerCase;

},{"./_createCompounder":385}],496:[function(require,module,exports){
var arrayMap = require('./_arrayMap'),
    baseIteratee = require('./_baseIteratee'),
    baseMap = require('./_baseMap'),
    isArray = require('./isArray');

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

},{"./_arrayMap":316,"./_baseIteratee":348,"./_baseMap":351,"./isArray":476}],497:[function(require,module,exports){
var baseAssignValue = require('./_baseAssignValue'),
    baseForOwn = require('./_baseForOwn'),
    baseIteratee = require('./_baseIteratee');

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;

},{"./_baseAssignValue":326,"./_baseForOwn":334,"./_baseIteratee":348}],498:[function(require,module,exports){
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

},{"./_MapCache":301}],499:[function(require,module,exports){
var baseProperty = require('./_baseProperty'),
    basePropertyDeep = require('./_basePropertyDeep'),
    isKey = require('./_isKey'),
    toKey = require('./_toKey');

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

},{"./_baseProperty":354,"./_basePropertyDeep":355,"./_isKey":417,"./_toKey":456}],500:[function(require,module,exports){
var baseRandom = require('./_baseRandom'),
    isIterateeCall = require('./_isIterateeCall'),
    toFinite = require('./toFinite');

/** Built-in method references without a dependency on `root`. */
var freeParseFloat = parseFloat;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min,
    nativeRandom = Math.random;

/**
 * Produces a random number between the inclusive `lower` and `upper` bounds.
 * If only one argument is provided a number between `0` and the given number
 * is returned. If `floating` is `true`, or either `lower` or `upper` are
 * floats, a floating-point number is returned instead of an integer.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @memberOf _
 * @since 0.7.0
 * @category Number
 * @param {number} [lower=0] The lower bound.
 * @param {number} [upper=1] The upper bound.
 * @param {boolean} [floating] Specify returning a floating-point number.
 * @returns {number} Returns the random number.
 * @example
 *
 * _.random(0, 5);
 * // => an integer between 0 and 5
 *
 * _.random(5);
 * // => also an integer between 0 and 5
 *
 * _.random(5, true);
 * // => a floating-point number between 0 and 5
 *
 * _.random(1.2, 5.2);
 * // => a floating-point number between 1.2 and 5.2
 */
function random(lower, upper, floating) {
  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
    upper = floating = undefined;
  }
  if (floating === undefined) {
    if (typeof upper == 'boolean') {
      floating = upper;
      upper = undefined;
    }
    else if (typeof lower == 'boolean') {
      floating = lower;
      lower = undefined;
    }
  }
  if (lower === undefined && upper === undefined) {
    lower = 0;
    upper = 1;
  }
  else {
    lower = toFinite(lower);
    if (upper === undefined) {
      upper = lower;
      lower = 0;
    } else {
      upper = toFinite(upper);
    }
  }
  if (lower > upper) {
    var temp = lower;
    lower = upper;
    upper = temp;
  }
  if (floating || lower % 1 || upper % 1) {
    var rand = nativeRandom();
    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
  }
  return baseRandom(lower, upper);
}

module.exports = random;

},{"./_baseRandom":357,"./_isIterateeCall":416,"./toFinite":506}],501:[function(require,module,exports){
var createCompounder = require('./_createCompounder'),
    upperFirst = require('./upperFirst');

/**
 * Converts `string` to
 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
 *
 * @static
 * @memberOf _
 * @since 3.1.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the start cased string.
 * @example
 *
 * _.startCase('--foo-bar--');
 * // => 'Foo Bar'
 *
 * _.startCase('fooBar');
 * // => 'Foo Bar'
 *
 * _.startCase('__FOO_BAR__');
 * // => 'FOO BAR'
 */
var startCase = createCompounder(function(result, word, index) {
  return result + (index ? ' ' : '') + upperFirst(word);
});

module.exports = startCase;

},{"./_createCompounder":385,"./upperFirst":511}],502:[function(require,module,exports){
var baseClamp = require('./_baseClamp'),
    baseToString = require('./_baseToString'),
    toInteger = require('./toInteger'),
    toString = require('./toString');

/**
 * Checks if `string` starts with the given target string.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {string} [target] The string to search for.
 * @param {number} [position=0] The position to search from.
 * @returns {boolean} Returns `true` if `string` starts with `target`,
 *  else `false`.
 * @example
 *
 * _.startsWith('abc', 'a');
 * // => true
 *
 * _.startsWith('abc', 'b');
 * // => false
 *
 * _.startsWith('abc', 'b', 1);
 * // => true
 */
function startsWith(string, target, position) {
  string = toString(string);
  position = baseClamp(toInteger(position), 0, string.length);
  target = baseToString(target);
  return string.slice(position, position + target.length) == target;
}

module.exports = startsWith;

},{"./_baseClamp":327,"./_baseToString":362,"./toInteger":507,"./toString":509}],503:[function(require,module,exports){
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

},{}],504:[function(require,module,exports){
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

},{}],505:[function(require,module,exports){
var baseSlice = require('./_baseSlice');

/**
 * Gets all but the first element of `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.tail([1, 2, 3]);
 * // => [2, 3]
 */
function tail(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseSlice(array, 1, length) : [];
}

module.exports = tail;

},{"./_baseSlice":360}],506:[function(require,module,exports){
var toNumber = require('./toNumber');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;

},{"./toNumber":508}],507:[function(require,module,exports){
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

},{"./toFinite":506}],508:[function(require,module,exports){
var isObject = require('./isObject'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to match leading and trailing whitespace. */
var reTrim = /^\s+|\s+$/g;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;

},{"./isObject":487,"./isSymbol":490}],509:[function(require,module,exports){
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

},{"./_baseToString":362}],510:[function(require,module,exports){
var toString = require('./toString');

/** Used to generate unique IDs. */
var idCounter = 0;

/**
 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {string} [prefix=''] The value to prefix the ID with.
 * @returns {string} Returns the unique ID.
 * @example
 *
 * _.uniqueId('contact_');
 * // => 'contact_104'
 *
 * _.uniqueId();
 * // => '105'
 */
function uniqueId(prefix) {
  var id = ++idCounter;
  return toString(prefix) + id;
}

module.exports = uniqueId;

},{"./toString":509}],511:[function(require,module,exports){
var createCaseFirst = require('./_createCaseFirst');

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

module.exports = upperFirst;

},{"./_createCaseFirst":384}],512:[function(require,module,exports){
var baseValues = require('./_baseValues'),
    keys = require('./keys');

/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */
function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;

},{"./_baseValues":364,"./keys":492}],513:[function(require,module,exports){
var baseDifference = require('./_baseDifference'),
    baseRest = require('./_baseRest'),
    isArrayLikeObject = require('./isArrayLikeObject');

/**
 * Creates an array excluding all given values using
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * **Note:** Unlike `_.pull`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...*} [values] The values to exclude.
 * @returns {Array} Returns the new array of filtered values.
 * @see _.difference, _.xor
 * @example
 *
 * _.without([2, 1, 2, 3], 1, 2);
 * // => [3]
 */
var without = baseRest(function(array, values) {
  return isArrayLikeObject(array)
    ? baseDifference(array, values)
    : [];
});

module.exports = without;

},{"./_baseDifference":330,"./_baseRest":358,"./isArrayLikeObject":478}],514:[function(require,module,exports){
var asciiWords = require('./_asciiWords'),
    hasUnicodeWord = require('./_hasUnicodeWord'),
    toString = require('./toString'),
    unicodeWords = require('./_unicodeWords');

/**
 * Splits `string` into an array of its words.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to inspect.
 * @param {RegExp|string} [pattern] The pattern to match words.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the words of `string`.
 * @example
 *
 * _.words('fred, barney, & pebbles');
 * // => ['fred', 'barney', 'pebbles']
 *
 * _.words('fred, barney, & pebbles', /[^, ]+/g);
 * // => ['fred', 'barney', '&', 'pebbles']
 */
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? undefined : pattern;

  if (pattern === undefined) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}

module.exports = words;

},{"./_asciiWords":321,"./_hasUnicodeWord":406,"./_unicodeWords":459,"./toString":509}],515:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.7.1
(function() {
  var getNanoSeconds, hrtime, loadTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - loadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    loadTime = getNanoSeconds();
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(this);

}).call(this,require('_process'))

},{"_process":516}],516:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],517:[function(require,module,exports){
(function (global){
var now = require('performance-now')
  , root = typeof window === 'undefined' ? global : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix]
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix]
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last))
      last = next + _now
      setTimeout(function() {
        var cp = queue.slice(0)
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last)
            } catch(e) {
              setTimeout(function() { throw e }, 0)
            }
          }
        }
      }, Math.round(next))
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    })
    return id
  }

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true
      }
    }
  }
}

module.exports = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
}
module.exports.cancel = function() {
  caf.apply(root, arguments)
}
module.exports.polyfill = function() {
  root.requestAnimationFrame = raf
  root.cancelAnimationFrame = caf
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"performance-now":515}],518:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":516}],519:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _ContentQueue = require('./contentQueue/ContentQueue');

var _ContentQueue2 = _interopRequireDefault(_ContentQueue);

var _LoadingView = require('./LoadingView');

var _LoadingView2 = _interopRequireDefault(_LoadingView);

var _AirportController = require('./airport/AirportController');

var _AirportController2 = _interopRequireDefault(_AirportController);

var _GameController = require('./game/GameController');

var _GameController2 = _interopRequireDefault(_GameController);

var _TutorialView = require('./tutorial/TutorialView');

var _TutorialView2 = _interopRequireDefault(_TutorialView);

var _InputController = require('./InputController');

var _InputController2 = _interopRequireDefault(_InputController);

var _UiController = require('./UiController');

var _UiController2 = _interopRequireDefault(_UiController);

var _CanvasController = require('./canvas/CanvasController');

var _CanvasController2 = _interopRequireDefault(_CanvasController);

var _GameClockView = require('./game/GameClockView');

var _GameClockView2 = _interopRequireDefault(_GameClockView);

var _speech = require('./speech');

var _timeHelpers = require('./utilities/timeHelpers');

var _logLevel = require('./constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

window.zlsa = {};
window.zlsa.atc = {};
var prop = {};

// IIEFs are pulled in here to add functions to the global space.
//
// This will need to be re-worked, and current global functions should be exported and
// imported as needed in each file.
require('./util');

// saved as this.prop.version and this.prop.version_string
var VERSION = [3, 2, 0];

// are you using a main loop? (you must call update() afterward disable/re-enable)
var UPDATE = true;

// the framerate is updated this often (seconds)
var FRAME_DELAY = 1;

// is this a release build?
var RELEASE = false;

/**
 * @class App
 */

var App = function () {
    /**
     * @for App
     * @constructor
     * @param $element {HTML Element|null}
     * @param airportLoadList {array<object>}  List of airports to load
     */
    function App(element, airportLoadList) {
        var _this = this;

        _classCallCheck(this, App);

        this.getDeltaTime = function () {
            return _this.prop.time.frame.delta;
        };

        this.updateRun = function (shouldUpdate) {
            // console.warn('updateRun: ', shouldUpdate);
            if (!UPDATE && shouldUpdate) {
                requestAnimationFrame(function () {
                    return _this.update();
                });
            }

            UPDATE = shouldUpdate;
        };

        /**
         * Root DOM element.
         *
         * @property $element
         * @type {jQuery|HTML Element}
         * @default body
         */
        this.$element = (0, _jquery2.default)(element);
        this.loadingView = null;
        this.contentQueue = null;
        this.airportController = null;
        this.tutorialView = null;
        this.inputController = null;
        this.uiController = null;
        this.canvasController = null;

        window.prop = prop;

        this.prop = prop;
        this.prop.complete = false;
        this.prop.temp = 'nothing here';
        this.prop.version = VERSION;
        this.prop.version_string = 'v' + VERSION.join('.');
        this.prop.time = {};
        this.prop.time.start = (0, _timeHelpers.time)();
        this.prop.time.frames = 0;
        this.prop.time.frame = {};
        this.prop.time.frame.start = (0, _timeHelpers.time)();
        this.prop.time.frame.delay = FRAME_DELAY;
        this.prop.time.frame.count = 0;
        this.prop.time.frame.last = (0, _timeHelpers.time)();
        this.prop.time.frame.delta = 0;
        this.prop.time.fps = 0;
        this.prop.log = _logLevel.LOG.DEBUG;
        this.prop.loaded = false;

        if (RELEASE) {
            this.prop.log = _logLevel.LOG.WARNING;
        }

        return this.setupChildren(airportLoadList).enable();
    }

    /**
     * Lifecycle method. Should be called only once on initialization.
     *
     * Used to setup properties and initialize dependant classes.
     *
     * @for App
     * @method setupChildren
     * @param airportLoadList {array<object>}  List of airports to load
     */


    _createClass(App, [{
        key: 'setupChildren',
        value: function setupChildren(airportLoadList) {
            this.loadingView = new _LoadingView2.default();
            this.contentQueue = new _ContentQueue2.default(this.loadingView);
            this.airportController = new _AirportController2.default(airportLoadList, this.updateRun);
            this.gameController = new _GameController2.default(this.getDeltaTime);
            this.tutorialView = new _TutorialView2.default(this.$element);
            this.inputController = new _InputController2.default(this.$element);
            this.uiController = new _UiController2.default(this.$element);
            this.canvasController = new _CanvasController2.default(this.$element);
            this.gameClockView = new _GameClockView2.default(this.$element);

            return this;
        }

        /**
         * Lifecycle method. Should be called only once on initialization.
         *
         * Used to fire off `init` and `init_pre` methods and also start the game loop
         *
         * @for App
         * @method enable
         */

    }, {
        key: 'enable',
        value: function enable() {
            var _this2 = this;

            zlsa.atc.loadAsset = function (options) {
                return _this2.contentQueue.add(options);
            };
            // TEMPORARY!
            // these instances are attached to the window here as an intermediate step away from global functions.
            // this allows for any module file to call window.{module}.{method} and will make the transition to
            // explicit instance parameters easier.
            window.airportController = this.airportController;
            window.gameController = this.gameController;
            window.tutorialView = this.tutorialView;
            window.inputController = this.inputController;
            window.uiController = this.uiController;
            window.canvasController = this.canvasController;

            log('Version ' + this.prop.version_string);

            return this.init_pre().init().done();
        }

        /**
         * @for App
         * @method disable
         */

    }, {
        key: 'disable',
        value: function disable() {
            return this.destroy();
        }

        /**
         * Tear down the application
         *
         * Should never be called directly, only cia `this.disable()`
         *
         * @for App
         * @method destroy
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.$element = null;
            this.contentQueue = null;
            this.loadingView = null;
            this.airportController = null;
            this.gameController = null;
            this.tutorialView = null;
            this.inputController = null;
            this.uiController = null;
            this.canvasController = null;

            return this;
        }

        // === CALLBACKS (all optional and do not need to be defined) ===
        // INIT:
        // module_init_pre()
        // module_init()
        // module_init_post()

        // module_done()
        // -- wait until all async has finished (could take a long time)
        // module_ready()
        // -- wait until first frame is ready (only triggered if UPDATE == true)
        // module_complete()

        // UPDATE:
        // module_update_pre()
        // module_update()
        // module_update_post()

        // RESIZE (called at least once during init and whenever page changes size)
        // module_resize()

        /**
         * @for App
         * @method init_pre
         */

    }, {
        key: 'init_pre',
        value: function init_pre() {
            this.tutorialView.tutorial_init_pre();
            this.gameController.init_pre();
            this.inputController.input_init_pre();
            this.airportController.init_pre();
            this.canvasController.canvas_init_pre();
            this.uiController.ui_init_pre();

            return this;
        }

        /**
         * @for App
         * @method init
         */

    }, {
        key: 'init',
        value: function init() {
            (0, _speech.speech_init)();

            this.airportController.init();
            this.canvasController.canvas_init();
            this.uiController.ui_init();

            return this;
        }

        /**
         * @for App
         * @method init_post
         */

    }, {
        key: 'init_post',
        value: function init_post() {
            return this;
        }

        /**
         * @for App
         * @method done
         */

    }, {
        key: 'done',
        value: function done() {
            var _this3 = this;

            (0, _jquery2.default)(window).resize(this.resize);
            this.resize();

            this.prop.loaded = true;

            this.ready();

            if (UPDATE) {
                requestAnimationFrame(function () {
                    return _this3.update();
                });
            }

            return this;
        }

        /**
         * @for App
         * @method ready
         */

    }, {
        key: 'ready',
        value: function ready() {
            this.airportController.ready();

            return this;
        }

        /**
         * @for App
         * @method resize
         */

    }, {
        key: 'resize',
        value: function resize() {
            this.canvasController.canvas_resize();

            return this;
        }

        /**
         * @for App
         * @method complete
         */

    }, {
        key: 'complete',
        value: function complete() {
            this.gameController.complete();
            this.canvasController.canvas_complete();
            this.uiController.ui_complete();

            return this;
        }

        /**
         * @for App
         * @method updatePre
         */

    }, {
        key: 'updatePre',
        value: function updatePre() {
            this.gameController.update_pre();

            return this;
        }

        /**
         * @for App
         * @method updatePost
         */

    }, {
        key: 'updatePost',
        value: function updatePost() {
            this.canvasController.canvas_update_post();

            return this;
        }

        /**
         * @for App
         * @method update
         */

    }, {
        key: 'update',
        value: function update() {
            var _this4 = this;

            if (!this.prop.complete) {
                this.complete();
                this.loadingView.complete();

                this.prop.complete = true;
            }

            if (!UPDATE) {
                return this;
            }

            requestAnimationFrame(function () {
                return _this4.update();
            });

            this.updatePre();
            this.airportController.recalculate();
            this.updatePost();
            this.incrementFrame();
            this.gameClockView.update();

            return this;
        }

        /**
         * @for App
         * @method incrementFrame
         */

    }, {
        key: 'incrementFrame',
        value: function incrementFrame() {
            var currentTime = (0, _timeHelpers.time)();
            var elapsed = currentTime - this.prop.time.frame.start;

            this.prop.time.frames += 1;
            this.prop.time.frame.count += 1;

            if (elapsed > this.prop.time.frame.delay) {
                this.prop.time.fps = this.prop.time.frame.count / elapsed;
                this.prop.time.frame.count = 0;
                this.prop.time.frame.start = currentTime;
            }

            this.prop.time.frame.delta = (0, _timeHelpers.calculateDeltaTime)(this.prop.time.frame.last);
            this.prop.time.frame.last = currentTime;
        }

        /**
         * @for App
         * @method getDeltaTime
         * @return {number}
         */


        /**
         * @for App
         * @method updateRun
         * @param shouldUpdate {boolean}
         */

    }]);

    return App;
}();

exports.default = App;

},{"./InputController":520,"./LoadingView":521,"./UiController":522,"./airport/AirportController":534,"./canvas/CanvasController":562,"./constants/logLevel":574,"./contentQueue/ContentQueue":577,"./game/GameClockView":579,"./game/GameController":580,"./speech":588,"./tutorial/TutorialView":590,"./util":591,"./utilities/timeHelpers":594,"jquery":296}],520:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable camelcase, no-mixed-operators, object-shorthand, class-methods-use-this, no-undef, expected-return*/


var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _CommandParser = require('./commandParser/CommandParser');

var _CommandParser2 = _interopRequireDefault(_CommandParser);

var _core = require('./math/core');

var _gameOptionConstants = require('./constants/gameOptionConstants');

var _selectors = require('./constants/selectors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Temporary const declaration here to attach to the window AND use as internal propert
var input = {};

/**
 * Name of a command returned from the Parser
 *
 * @property PARSED_COMMAND_NAME
 * @type {Object}
 * @final
 */
var PARSED_COMMAND_NAME = {
    VERSION: 'version',
    TUTORIAL: 'tutorial',
    AUTO: 'auto',
    PAUSE: 'pause',
    TIMEWARP: 'timewarp',
    CLEAR: 'clear',
    AIRPORT: 'airport',
    RATE: 'rate',
    TRANSMIT: 'transmit'
};

/**
 * Enumeration of mouse events returned from $event.which
 *
 * These codes can only be used with jQuery event object.
 *
 * @property MOUSE_EVENT_CODE
 * @type {Object}
 * @final
 */
var MOUSE_EVENT_CODE = {
    LEFT_PRESS: 1,
    MIDDLE_PESS: 2,
    RIGHT_PRESS: 3
};

/**
 * Enumeration of key codes used for inputs.
 *
 * @property KEY_CODES
 * @type {Object}
 * @final
 */
var KEY_CODES = {
    // +
    ADD: 107,
    // -
    DASH: 189,
    DASH_FIREFOX: 173,
    DIVIDE: 111,
    DOWN_ARROW: 40,
    ENTER: 13,
    // =
    EQUALS: 187,
    EQUALS_FIREFOX: 61,
    // esc
    ESCAPE: 27,
    LEFT_ARROW: 37,
    MULTIPLY: 106,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    RIGHT_ARROW: 39,
    SUBTRACT: 109,
    TAB: 9,
    UP_ARROW: 38,
    // `
    BAT_TICK: 192
};

/**
 * @class InputController
 */

var InputController = function () {
    /**
     * @constructor
     */
    function InputController($element) {
        _classCallCheck(this, InputController);

        this.$element = $element;
        this.$window = null;
        this.$commandInput = null;
        this.$canvases = null;
        this.$sidebar = null;

        this.input = input;
        this.input.command = '';
        this.input.callsign = '';
        this.input.data = '';
        this.input.history = [];
        this.input.history_item = null;
        this.input.click = [0, 0];
        this.input.positions = '';
        this.input.tab_compl = {};
        this.input.mouseDelta = [0, 0];
        this.input.mouseDown = [0, 0];
        this.input.isMouseDown = false;

        this._init().setupHandlers().enable();
    }

    /**
     * @for InputController
     * @method _init
     */


    _createClass(InputController, [{
        key: '_init',
        value: function _init() {
            this.$window = (0, _jquery2.default)(window);
            this.$commandInput = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.COMMAND);
            this.$canvases = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.CANVASES);
            this.$sidebar = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.SIDEBAR);

            return this;
        }

        /**
         * @for InputController
         * @method setupHandlers
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers() {
            return this;
        }

        /**
         * @for InputController
         * @method enable
         */

    }, {
        key: 'enable',
        value: function enable() {
            var _this = this;

            this.$window.on('keydown', function (event) {
                return _this.onKeydownHandler(event);
            });
            this.$commandInput.on('keydown', function (event) {
                return _this.onCommandInputKeydownHandler(event);
            });
            this.$commandInput.on('input', function (event) {
                return _this.onCommandInputChangeHandler(event);
            });
            // FIXME: these are non-standard events and will be deprecated soon. this should be moved
            // over to the `wheel` event. This should also be moved over to `.on()` instead of `.bind()`
            // https://developer.mozilla.org/en-US/docs/Web/Events/wheel
            // this.$commandInput.on('DOMMouseScroll mousewheel', (event) => this.onMouseScrollHandler(event));
            this.$canvases.bind('DOMMouseScroll mousewheel', function (event) {
                return _this.onMouseScrollHandler(event);
            });
            this.$canvases.on('mousemove', function (event) {
                return _this.onMouseMoveHandler(event);
            });
            this.$canvases.on('mouseup', function (event) {
                return _this.onMouseUpHandler(event);
            });
            this.$canvases.on('mousedown', function (event) {
                return _this.onMouseDownHandler(event);
            });

            return this;
        }

        /**
         * @for InputController
         * @method disable
         */

    }, {
        key: 'disable',
        value: function disable() {
            var _this2 = this;

            this.$window.off('keydown', function (event) {
                return _this2.onKeydownHandler(event);
            });
            this.$commandInput.off('keydown', function (event) {
                return _this2.onCommandInputKeydownHandler(event);
            });
            this.$commandInput.off('input', function (event) {
                return _this2.onCommandInputChangeHandler(event);
            });
            // uncomment only after `.on()` for this event has been implemented.
            // this.$commandInput.off('DOMMouseScroll mousewheel', (event) => this.onMouseScrollHandler(event));
            this.$canvases.off('mousemove', function (event) {
                return _this2.onMouseMoveHandler(event);
            });
            this.$canvases.off('mouseup', function (event) {
                return _this2.onMouseUpHandler(event);
            });
            this.$canvases.off('mousedown', function (event) {
                return _this2.onMouseDownHandler(event);
            });

            return this.destroy();
        }

        /**
         * @for InputController
         * @method destroy
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.$element = null;
            this.$window = null;
            this.$commandInput = null;
            this.$canvases = null;
            this.$sidebar = null;

            this.input = input;
            this.input.command = '';
            this.input.callsign = '';
            // this.input.data = '';
            this.input.history = [];
            this.input.history_item = null;
            this.input.click = [0, 0];
            this.input.positions = '';
            this.input.tab_compl = {};
            this.input.mouseDelta = [0, 0];
            this.input.mouseDown = [0, 0];
            this.input.isMouseDown = false;

            return this;
        }

        /**
         * @for InputController
         * @method input_init_pre
         */

    }, {
        key: 'input_init_pre',
        value: function input_init_pre() {
            // TODO: these prop properties can be removed except for `prop.input`
            prop.input = input;
            prop.input.command = '';
            prop.input.callsign = '';
            prop.input.data = '';
            prop.input.history = [];
            prop.input.history_item = null;
            prop.input.click = [0, 0];
            prop.input.positions = '';
            prop.input.tab_compl = {};
            prop.input.mouseDelta = [0, 0];
            prop.input.mouseDown = [0, 0];
            prop.input.isMouseDown = false;
        }

        /**
         * @for InputController
         * @method onMouseScrollHandler
         * @param event {jquery Event}
         */

    }, {
        key: 'onMouseScrollHandler',
        value: function onMouseScrollHandler(event) {
            if (event.originalEvent.wheelDelta > 0 || event.originalEvent.detail < 0) {
                window.uiController.ui_zoom_in();
            } else {
                window.uiController.ui_zoom_out();
            }
        }

        /**
         * @for InputController
         * @method onMouseMoveHandler
         * @param event {jquery Event}
         */

    }, {
        key: 'onMouseMoveHandler',
        value: function onMouseMoveHandler(event) {
            if (!prop.input.isMouseDown) {
                return this;
            }

            prop.input.mouseDelta = [event.pageX - prop.input.mouseDown[0], event.pageY - prop.input.mouseDown[1]];
            prop.canvas.panX = prop.input.mouseDelta[0];
            prop.canvas.panY = prop.input.mouseDelta[1];
            prop.canvas.dirty = true;
        }

        /**
         * @for InputController
         * @method onMouseUpHandler
         * @param event {jquery Event}
         */

    }, {
        key: 'onMouseUpHandler',
        value: function onMouseUpHandler(event) {
            prop.input.isMouseDown = false;
        }

        /**
         * @for InputController
         * @method onMouseDownHandler
         * @param event {jquery Event}
         */

    }, {
        key: 'onMouseDownHandler',
        value: function onMouseDownHandler(event) {
            event.preventDefault();

            if (event.which === MOUSE_EVENT_CODE.MIDDLE_PESS) {
                window.uiController.ui_zoom_reset();
            } else if (event.which === MOUSE_EVENT_CODE.LEFT_PRESS) {
                // Record mouse down position for panning
                prop.input.mouseDown = [event.pageX - prop.canvas.panX, event.pageY - prop.canvas.panY];
                prop.input.isMouseDown = true;

                // Aircraft label selection
                var position = [event.pageX, -event.pageY];
                position[0] -= prop.canvas.size.width / 2;
                position[1] += prop.canvas.size.height / 2;

                var nearest = window.aircraftController.aircraft_get_nearest([window.uiController.px_to_km(position[0] - prop.canvas.panX), window.uiController.px_to_km(position[1] + prop.canvas.panY)]);

                if (nearest[0]) {
                    if (nearest[1] < window.uiController.px_to_km(80)) {
                        this.input.callsign = nearest[0].getCallsign().toUpperCase();

                        this.input_select(this.input.callsign);
                    } else {
                        this.input_select();
                    }
                }

                position = [window.uiController.px_to_km(position[0]), window.uiController.px_to_km(position[1])];

                position[0] = parseFloat(position[0].toFixed(2));
                position[1] = parseFloat(position[1].toFixed(2));
                prop.input.positions += '[' + position.join(',') + ']';

                return false;
            }
        }

        /**
         * @for InputController
         * @method onKeydownHandler
         * @param event {jQuery Event}
         * @private
         */

    }, {
        key: 'onKeydownHandler',
        value: function onKeydownHandler(event) {
            // For firefox see: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
            var is_firefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

            if (!window.gameController.game_paused()) {
                this.$commandInput.focus();
            }

            if (event.which === KEY_CODES.ESCAPE) {
                if (prop.tutorial.open) {
                    window.tutorialView.tutorial_close();
                } else if ((0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.AIRPORT_SWITCH).hasClass(_selectors.SELECTORS.CLASSNAMES.OPEN)) {
                    window.uiController.ui_airport_close();
                }
            }

            if (event.which === KEY_CODES.DASH || is_firefox && event.which === KEY_CODES.DASH_FIREFOX) {
                // Minus key to zoom out, plus to zoom in
                window.uiController.ui_zoom_out();
                return false;
            } else if (event.which === KEY_CODES.EQUALS || is_firefox && event.which === KEY_CODES.EQUALS_FIREFOX) {
                if (event.shiftKey) {
                    window.uiController.ui_zoom_in();
                } else {
                    window.uiController.ui_zoom_reset();
                }

                return false;
            }

            if (!prop.tutorial.open) {
                return;
            }

            if (event.which === KEY_CODES.PAGE_UP) {
                window.tutorialView.tutorial_prev();
                event.preventDefault();
            } else if (event.which === KEY_CODES.PAGE_DOWN) {
                window.tutorialView.tutorial_next();
                event.preventDefault();
            }
        }

        /**
         * @for InputController
         * @method input_parse
         */

    }, {
        key: 'input_parse',
        value: function input_parse() {
            var $strip = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.STRIP);
            $strip.removeClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);

            prop.input.callsign = '';
            prop.input.data = '';

            if (prop.input.command.length === 0) {
                return;
            }

            // TODO: move to master REGEX constant
            var match = /^\s*(\w+)/.exec(prop.input.command);

            if (!match) {
                return;
            }

            prop.input.callsign = match[1];
            var number = 0;
            // FIXME: this is a very mutable property. perhaps it should be something else?
            match = null;
            prop.canvas.dirty = true;

            for (var i = 0; i < prop.aircraft.list.length; i++) {
                var aircraft = prop.aircraft.list[i];

                if (aircraft.matchCallsign(prop.input.callsign)) {
                    number += 1;
                    match = aircraft;
                    // TODO: this should be from an encapsulated class on the window.
                    aircraft.$html.addClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
                }
            }

            // TODO: this logic block should be either abstracted or simplified.
            if (number === 1 && (match.$html.offset().top < 0 || match.$html.offset().top + match.$html.height() - this.$sidebar.offset().top > this.$sidebar.height())) {
                this.$sidebar.scrollTop(this.$sidebar.scrollTop() + match.$html.offset().top - this.$sidebar.height() / 2);
            }
        }

        /**
         * @for InputController
         * @method onCommandInputChangeHandler
         */

    }, {
        key: 'onCommandInputChangeHandler',
        value: function onCommandInputChangeHandler() {
            this.tab_completion_reset();

            prop.input.command = this.$commandInput.val();

            this.input_parse();
        }

        /**
         * @for InputController
         * @method input_select
         * @param callsign {string}
         */

    }, {
        key: 'input_select',
        value: function input_select(callsign) {
            if (callsign) {
                this.$commandInput.val(callsign + ' ');
            } else {
                this.$commandInput.val('');
            }

            this.$commandInput.focus();

            this.onCommandInputChangeHandler();
        }

        /**
         * @for InputController
         * @method onCommandInputKeydownHandler
         */

    }, {
        key: 'onCommandInputKeydownHandler',
        value: function onCommandInputKeydownHandler(e) {
            var currentCommandInputValue = this.$commandInput.val();

            // TODO: this swtich can be simplified, there is a lot of repetition here
            switch (e.which) {
                case KEY_CODES.BAT_TICK:
                    this.$commandInput.val(currentCommandInputValue + '` ');
                    e.preventDefault();
                    this.onCommandInputChangeHandler();

                    break;
                case KEY_CODES.ENTER:
                    this.input_parse();

                    if (this.input_run()) {
                        prop.input.history.unshift(prop.input.callsign);
                        this.$commandInput.val('');
                        prop.input.command = '';

                        this.tab_completion_reset();
                        this.input_parse();
                    }

                    prop.input.history_item = null;

                    break;

                case KEY_CODES.PAGE_UP:
                    // recall previous callsign
                    this.input_history_prev();
                    e.preventDefault();
                    break;

                case KEY_CODES.PAGE_DOWN:
                    // recall subsequent callsign
                    this.input_history_next();
                    e.preventDefault();
                    break;

                case KEY_CODES.LEFT_ARROW:
                    // shortKeys in use
                    if (this._isArrowControlMethod()) {
                        this.$commandInput.val(currentCommandInputValue + ' t l ');
                        e.preventDefault();
                        this.onCommandInputChangeHandler();
                    }

                    break;

                case KEY_CODES.UP_ARROW:
                    if (this._isArrowControlMethod()) {
                        this.$commandInput.val(currentCommandInputValue + ' \u2B61 ');
                        e.preventDefault();
                        this.onCommandInputChangeHandler();
                    } else {
                        // recall previous callsign
                        this.input_history_prev();
                        e.preventDefault();
                    }
                    break;

                case KEY_CODES.RIGHT_ARROW:
                    // shortKeys in use
                    if (this._isArrowControlMethod()) {
                        this.$commandInput.val(currentCommandInputValue + ' t r ');
                        e.preventDefault();
                        this.onCommandInputChangeHandler();
                    }

                    break;

                case KEY_CODES.DOWN_ARROW:
                    if (this._isArrowControlMethod()) {
                        this.$commandInput.val(currentCommandInputValue + ' \u2B63 ');
                        e.preventDefault();
                        this.onCommandInputChangeHandler();
                    } else {
                        // recall previous callsign
                        this.input_history_prev();
                        e.preventDefault();
                    }

                    break;

                case KEY_CODES.MULTIPLY:
                    this.$commandInput.val(currentCommandInputValue + ' \u2B50 ');
                    e.preventDefault();
                    this.onCommandInputChangeHandler();

                    break;

                case KEY_CODES.ADD:
                    this.$commandInput.val(currentCommandInputValue + ' + ');
                    e.preventDefault();
                    this.onCommandInputChangeHandler();

                    break;

                case KEY_CODES.EQUALS:
                    // mac + (actually `=`)
                    this.$commandInput.val(currentCommandInputValue + ' + ');
                    e.preventDefault();
                    this.onCommandInputChangeHandler();

                    break;

                case KEY_CODES.SUBTRACT:
                    this.$commandInput.val(currentCommandInputValue + ' - ');
                    e.preventDefault();
                    this.onCommandInputChangeHandler();

                    break;

                case KEY_CODES.DASH:
                    // mac -
                    this.$commandInput.val(currentCommandInputValue + ' - ');
                    e.preventDefault();
                    this.onCommandInputChangeHandler();

                    break;

                case KEY_CODES.DIVIDE:
                    this.$commandInput.val(currentCommandInputValue + ' takeoff ');
                    e.preventDefault();
                    this.onCommandInputChangeHandler();

                    break;

                case KEY_CODES.TAB:
                    if (!prop.input.tab_compl.matches) {
                        this.tab_completion_match();
                    }

                    this.tab_completion_cycle({ backwards: e.shiftKey });
                    e.preventDefault();

                    break;

                case KEY_CODES.ESCAPE:
                    var currentCommandValue = this.$commandInput.val();

                    // if the current commandInput value contains a callsign and commands, only clear the commands
                    if (currentCommandValue.trim() !== this.input.callsign) {
                        this.$commandInput.val(this.input.callsign + ' ');

                        return;
                    }

                    this.$commandInput.val('');

                    break;
                default:
                    break;
            }
        }

        /**
         * @for InputController
         * @method tab_completion_cycle
         * @param opt
         */

    }, {
        key: 'tab_completion_cycle',
        value: function tab_completion_cycle(opt) {
            var matches = prop.input.tab_compl.matches;

            if (!matches || matches.length === 0) {
                return;
            }

            // TODO: this block needs some work. this initial assignment looks to be overwritten every time.
            var i = prop.input.tab_compl.cycle_item;
            if (opt.backwards) {
                i = i <= 0 ? matches.length - 1 : i - 1;
            } else {
                i = i >= matches.length - 1 ? 0 : i + 1;
            }

            this.$commandInput.val(matches[i] + ' ');

            prop.input.command = matches[i];
            prop.input.tab_compl.cycle_item = i;

            this.input_parse();
        }

        /**
         * @for InputController
         * @method tab_completion_match
         */

    }, {
        key: 'tab_completion_match',
        value: function tab_completion_match() {
            var matches = void 0;
            var val = this.$commandInput.val();
            var aircrafts = prop.aircraft.list;

            if (prop.input.callsign) {
                aircrafts = aircrafts.filter(function (a) {
                    return a.matchCallsign(prop.input.callsign);
                });
            }

            matches = (0, _map3.default)(aircrafts, function (aircraft) {
                return aircraft.getCallsign();
            });

            if (aircrafts.length === 1 && (prop.input.data || val[val.length - 1] === ' ')) {
                // TODO: update inline functions
                matches = aircrafts[0].COMMANDS.filter(function (c) {
                    return c.toLowerCase().indexOf(prop.input.data.toLowerCase()) === 0;
                }).map(function (c) {
                    return val.substring(0, prop.input.callsign.length + 1) + c;
                });
            }

            this.tab_completion_reset();

            prop.input.tab_compl.matches = matches;
            prop.input.tab_compl.cycle_item = -1;
        }

        /**
         * @for InputController
         * @method tab_completion_reset
         */

    }, {
        key: 'tab_completion_reset',
        value: function tab_completion_reset() {
            prop.input.tab_compl = {};
        }

        /**
         * @for InputController
         * @method input_history_clamp
         */

    }, {
        key: 'input_history_clamp',
        value: function input_history_clamp() {
            prop.input.history_item = (0, _core.clamp)(0, prop.input.history_item, prop.input.history.length - 1);
        }

        /**
         * @for InputController
         * @method input_history_prev
         */

    }, {
        key: 'input_history_prev',
        value: function input_history_prev() {
            if (prop.input.history.length === 0) {
                return;
            }

            if (prop.input.history_item == null) {
                prop.input.history.unshift(prop.input.command);
                prop.input.history_item = 0;
            }

            prop.input.history_item += 1;
            this.input_history_clamp();

            var command = prop.input.history[prop.input.history_item] + ' ';
            this.$commandInput.val(command.toUpperCase());

            this.onCommandInputChangeHandler();
        }

        /**
         * @for InputController
         * @method input_history_next
         */

    }, {
        key: 'input_history_next',
        value: function input_history_next() {
            if (prop.input.history.length === 0 || !prop.input.history_item) {
                return;
            }

            prop.input.history_item -= 1;

            if (prop.input.history_item <= 0) {
                this.$commandInput.val(prop.input.history[0]);

                this.onCommandInputChangeHandler();

                prop.input.history.splice(0, 1);
                prop.input.history_item = null;

                return;
            }

            this.input_history_clamp();

            var command = prop.input.history[prop.input.history_item] + ' ';

            this.$commandInput.val(command.toUpperCase());
            this.onCommandInputChangeHandler();
        }

        /**
         * Encapsulation of repeated boolean logic
         *
         * @for InputController
         * @method _isArrowControlMethod
         * @return {boolean}
         */

    }, {
        key: '_isArrowControlMethod',
        value: function _isArrowControlMethod() {
            return window.gameController.game.option.get(_gameOptionConstants.GAME_OPTION_NAMES.CONTROL_METHOD) === 'arrows';
        }

        /**
         * @for InputController
         * @method _parseUserCommand
         * @return result {CommandParser}
         */

    }, {
        key: '_parseUserCommand',
        value: function _parseUserCommand() {
            var result = void 0;
            // this could use $commandInput.val() as an alternative
            var userCommand = prop.input.command.trim().toLowerCase();

            // Using try/catch here very much on purpose. the `CommandParser` will throw when it encounters any kind
            // of error; invalid length, validation, parse, etc. Here we catch those errors, log them to the screen
            // and then throw them all at once
            try {
                result = new _CommandParser2.default(userCommand);
            } catch (error) {
                window.uiController.ui_log('Command not understood');

                throw error;
            }

            return result;
        }

        /**
         * @for InputController
         * @method input_run
         */

    }, {
        key: 'input_run',
        value: function input_run() {
            var commandParser = this._parseUserCommand();

            if (commandParser.command !== 'transmit') {
                return this.processSystemCommand(commandParser);
            }

            return this.processTransmitCommand(commandParser);
        }

        /**
         * @for InputController
         * @method processSystemCommand
         * @param commandParser {CommandParser}
         * @return {boolean}
         */

    }, {
        key: 'processSystemCommand',
        value: function processSystemCommand(commandParser) {
            switch (commandParser.command) {
                case PARSED_COMMAND_NAME.VERSION:
                    window.uiController.ui_log('Air Traffic Control simulator version ' + prop.version.join('.'));

                    return true;

                case PARSED_COMMAND_NAME.TUTORIAL:
                    window.tutorialView.tutorial_toggle();

                    return true;

                case PARSED_COMMAND_NAME.AUTO:
                    // FIXME: does this function exist anywhere?
                    // aircraft_toggle_auto();
                    //
                    // if (prop.aircraft.auto.enabled) {
                    //     window.uiController.ui_log('automatic controller ENGAGED');
                    // } else {
                    //     window.uiController.ui_log('automatic controller OFF');
                    // }

                    return true;

                case PARSED_COMMAND_NAME.PAUSE:
                    window.gameController.game_pause_toggle();

                    return true;

                case PARSED_COMMAND_NAME.TIMEWARP:
                    if (commandParser.args) {
                        window.gameController.game.speedup = commandParser.args;
                    } else {
                        window.gameController.game_timewarp_toggle();
                    }

                    return true;

                case PARSED_COMMAND_NAME.CLEAR:
                    localStorage.clear();
                    location.reload();

                case PARSED_COMMAND_NAME.AIRPORT:
                    // TODO: it may be better to do this in the parser
                    var airportIcao = commandParser.args[0];

                    if ((0, _has3.default)(prop.airport.airports, airportIcao)) {
                        window.airportController.airport_set(airportIcao);
                    }

                    return true;

                case PARSED_COMMAND_NAME.RATE:
                    // TODO: is this if even needed?
                    if (commandParser.args) {
                        window.gameController.game.frequency = commandParser.args;
                    }

                    return true;
                default:
                    return true;
            }
        }

        /**
         * @for InputController
         * @method processTransmitCommand
         * @param commandParser {CommandParser}
         * @return {boolean}
         */

    }, {
        key: 'processTransmitCommand',
        value: function processTransmitCommand(commandParser) {
            // TODO: abstract the aircraft callsign matching
            var matches = 0;
            var match = -1;

            for (var i = 0; i < prop.aircraft.list.length; i++) {
                var _aircraft = prop.aircraft.list[i];

                if (_aircraft.matchCallsign(commandParser.callsign)) {
                    matches += 1;
                    match = i;
                }
            }

            if (matches > 1) {
                window.uiController.ui_log('multiple aircraft match the callsign, say again');

                return true;
            }

            if (match === -1) {
                window.uiController.ui_log('no such aircraft, say again');

                return true;
            }

            var aircraft = prop.aircraft.list[match];

            return aircraft.runCommands(commandParser.args);
        }
    }]);

    return InputController;
}();

exports.default = InputController;

},{"./commandParser/CommandParser":564,"./constants/gameOptionConstants":572,"./constants/selectors":575,"./math/core":584,"jquery":296,"lodash/get":469,"lodash/has":470,"lodash/map":496}],521:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-underscore-dangle */


var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _timeHelpers = require('./utilities/timeHelpers');

var _selectors = require('./constants/selectors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @property MIN_DISPLAY_SECONDS
 * @type {number}
 * @final
 */
var MIN_DISPLAY_SECONDS = 2;

/**
 * Provides an encapsulated class that displays a truncated filename for a file currently being loaded.
 *
 * Only used once the entire view has loaded.
 * ex: a user changes airports after initalizing the simulator.
 *
 * @class LoadingView
 */

var LoadingView = function () {
  /**
   * @for LoadingView
   * @constructor
   */
  function LoadingView() {
    _classCallCheck(this, LoadingView);

    /**
     * @property $element
     * @type {jquery|null}
     */
    this.$element = null;

    /**
     * @property $loadingIndicator
     * @type {jquery|null}
     */
    this.$loadingIdicator = null;

    /**
     * @property $loadingMessage
     * @type {jquery|null}
     */
    this.$loadingMessage = null;

    /**
     * @property loadingState
     * @type {Object}
     * @final
     */
    this.loadingState = {
      /**
       *
       * @property callback
       * @method callback
       * @return {Function}
       */
      callback: function callback() {},

      /**
       * @property loadingState
       * @type {Boolean}
       */
      loading: false,

      /**
       * @property startTime
       * @type {number}
       */
      startTime: -1
    };

    this._setupChildren();
  }

  /**
   * @for LoadingView
   * @method _setupChildren
   * @chainable
   * @private
   */


  _createClass(LoadingView, [{
    key: '_setupChildren',
    value: function _setupChildren() {
      this.$element = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.LOADING);
      this.$loadingIdicator = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.LOADING_INDICATOR);
      this.$loadingMessage = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.MESSAGE);

      return this;
    }

    /**
     * @for LoadingView
     * @method _disable
     * @chainable
     * @private
     */

  }, {
    key: '_disable',
    value: function _disable() {
      this.loadingState.callback = function () {};
      this.loadingState.loading = false;
      this.loadingState.startTime = -1;

      return this;
    }

    /**
     * @for LoadingView
     * @method _resetCallback
     * @chainable
     * @private
     */

  }, {
    key: '_resetCallback',
    value: function _resetCallback() {
      if (this.callback === null) {
        return this;
      }

      clearTimeout(this.callback);

      this.callback = null;

      return this;
    }

    /**
     * @for LoadingView
     * @method _didExceedMinimumWaitTime
     * @return {boolean}
     * @chainable
     * @private
     */

  }, {
    key: '_didExceedMinimumWaitTime',
    value: function _didExceedMinimumWaitTime() {
      var timeNow = (0, _timeHelpers.time)();

      return timeNow - this.loadingState.startTime > MIN_DISPLAY_SECONDS;
    }

    /**
     * @for LoadingView
     * @method _formatLoadingMessage
     * @param message {string}  a string to be formatted
     * @return {string}
     * @private
     */

  }, {
    key: '_formatLoadingMessage',
    value: function _formatLoadingMessage(message) {
      var minimumTruncationLength = 15;

      if (message.length <= minimumTruncationLength) {
        return message;
      }

      return '...' + message.substr(-12);
    }

    /**
     * @for LoadingView
     * @method startLoad
     * @param url {string}  the url for a file being loaded
     */

  }, {
    key: 'startLoad',
    value: function startLoad(url) {
      if (!this.loading) {
        (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.LOADING_INDICATOR).show();
        this.loadingState.startTime = (0, _timeHelpers.time)();
      }

      var msg = this._formatLoadingMessage(url);
      this.$loadingMessage.text(msg);

      this._resetCallback();
    }

    /**
     * @for LoadingView
     * @method stopLoad
     */

  }, {
    key: 'stopLoad',
    value: function stopLoad() {
      var _this = this;

      var timeNow = (0, _timeHelpers.time)();

      if (this._didExceedMinimumWaitTime()) {
        this.$loadingIdicator.hide();

        this._disable();
      } else {
        if (this.callback !== null) {
          return;
        }

        var delayTime = (MIN_DISPLAY_SECONDS - (timeNow - this.start)) * 1000;
        this.callback = setTimeout(function () {
          (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.LOADING_INDICATOR).hide();

          _this._disable();
        }, delayTime);
      }
    }

    /**
     * @for LoadingView
     * @method complete
     */

  }, {
    key: 'complete',
    value: function complete() {
      this.$element.fadeOut(1000);
      this.$element.css('pointerEvents', 'none');
    }
  }]);

  return LoadingView;
}();

exports.default = LoadingView;

},{"./constants/selectors":575,"./utilities/timeHelpers":594,"jquery":296}],522:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable camelcase, no-underscore-dangle, no-mixed-operators, func-names, object-shorthand, no-undef,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     no-param-reassign, class-methods-use-this */


var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _startCase2 = require('lodash/startCase');

var _startCase3 = _interopRequireDefault(_startCase2);

var _speech = require('./speech');

var _core = require('./math/core');

var _selectors = require('./constants/selectors');

var _storageKeys = require('./constants/storageKeys');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Temporary const declaration here to attach to the window AND use as internal property
var ui = {};

/**
 * @property TERRAIN_COLORS
 * @type {Object}
 * @final
 */
var TERRAIN_COLORS = {
    1000: '26, 150, 65',
    2000: '119, 194, 92',
    3000: '255, 255, 192',
    4000: '253, 201, 128',
    5000: '240, 124, 74',
    6000: '156, 81, 31'
};

/**
 * @property UI_OPTIONS_TEMPLATE
 * @type {string}
 * @final
 */
var UI_OPTIONS_TEMPLATE = '<div id="options-dialog" class="dialog"></div>';

/**
 * @property UI_OPTION_CONTAINER_TEMPLATE
 * @type {string}
 * @final
 */
var UI_OPTION_CONTAINER_TEMPLATE = '<div class="option"></div>';

/**
 * @property UI_OPTION_SELECTOR_TEMPLATE
 * @type {string}
 * @final
 */
var UI_OPTION_SELECTOR_TEMPLATE = '<span class="option-selector option-type-select"></span>';

/**
 * @class UiController
 */

var UiView = function () {
    /**
     * @constructor
     */
    function UiView($element) {
        _classCallCheck(this, UiView);

        this.$element = $element;
        this.$airportList = null;
        this.$airportListNotes = null;
        this.$toggleTutorial = null;
        this.$fastForwards = null;
        this.$pauseToggle = null;
        this.$pausedImg = null;
        this.$speechToggle = null;
        this.$switchAirport = null;
        this.$toggleLabels = null;
        this.$toggleRestrictedAreas = null;
        this.$toggleSids = null;
        this.$toggleTerrain = null;
        this.$toggleOptions = null;

        this.ui = ui;
        this.ui.scale_default = 8; // pixels per km
        this.ui.scale_max = 80; // max scale
        this.ui.scale_min = 1; // min scale
        this.ui.scale = this.ui.scale_default;
        this.ui.terrain = {
            colors: TERRAIN_COLORS,
            border_opacity: 1,
            fill_opacity: 0.1
        };

        return this._init().enable();
    }

    /**
     * @for UiController
     * @method _init
     */


    _createClass(UiView, [{
        key: '_init',
        value: function _init() {
            this.$airportList = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.AIRPORT_LIST);
            this.$airportListNotes = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.AIRPORT_LIST_NOTES);
            this.$airportSwitch = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.AIRPORT_SWITCH);
            this.$toggleTutorial = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_TUTORIAL);
            this.$fastForwards = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.FAST_FORWARDS);
            this.$pauseToggle = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.PAUSE_TOGGLE);
            this.$pausedImg = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.PAUSED + ' img');
            this.$speechToggle = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.SPEECH_TOGGLE);
            this.$switchAirport = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.SWITCH_AIRPORT);
            this.$toggleLabels = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_LABELS);
            this.$toggleRestrictedAreas = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_RESTRICTED_AREAS);
            this.$toggleSids = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_SIDS);
            this.$toggleTerrain = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_TERRAIN);
            this.$toggleOptions = this.$element.find(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_OPTIONS);

            return this;
        }

        /**
         * @for UiController
         * @method enable
         */

    }, {
        key: 'enable',
        value: function enable() {
            var _this = this;

            this.$toggleTutorial.on('click', function (event) {
                return window.tutorialView.tutorial_toggle(event);
            });
            this.$fastForwards.on('click', function (event) {
                return window.gameController.game_timewarp_toggle(event);
            });
            this.$pauseToggle.on('click', function (event) {
                return window.gameController.game_pause_toggle(event);
            });
            this.$pausedImg.on('click', function (event) {
                return window.gameController.game_unpause(event);
            });
            this.$speechToggle.on('click', function (event) {
                return (0, _speech.speech_toggle)(event);
            });
            this.$switchAirport.on('click', function (event) {
                return _this.ui_airport_toggle(event);
            });
            this.$toggleLabels.on('click', function (event) {
                return _this.canvas_labels_toggle(event);
            });
            this.$toggleRestrictedAreas.on('click', function (event) {
                return _this.canvas_restricted_toggle(event);
            });
            this.$toggleSids.on('click', function (event) {
                return _this.canvas_sids_toggle(event);
            });
            this.$toggleTerrain.on('click', function (event) {
                return _this.canvas_terrain_toggle(event);
            });
            this.$toggleOptions.on('click', function (event) {
                return _this.ui_options_toggle(event);
            });

            return this;
        }

        /**
         * @for UiController
         * @method disable
         */

    }, {
        key: 'diable',
        value: function diable() {
            var _this2 = this;

            this.$toggleTutorial.off('click', function (event) {
                return window.tutorialView.tutorial_toggle(event);
            });
            this.$fastForwards.off('click', function (event) {
                return window.gameController.game_timewarp_toggle(event);
            });
            this.$pauseToggle.off('click', function (event) {
                return window.gameController.game_pause_toggle(event);
            });
            this.$pausedImg.off('click', function (event) {
                return window.gameController.game_unpause(event);
            });
            this.$speechToggle.off('click', function (event) {
                return (0, _speech.speech_toggle)(event);
            });
            this.$switchAirport.off('click', function (event) {
                return _this2.ui_airport_toggle(event);
            });
            this.$toggleLabels.off('click', function (event) {
                return _this2.canvas_labels_toggle(event);
            });
            this.$toggleRestrictedAreas.off('click', function (event) {
                return _this2.canvas_restricted_toggle(event);
            });
            this.$toggleSids.off('click', function (event) {
                return _this2.canvas_sids_toggle(event);
            });
            this.$toggleTerrain.off('click', function (event) {
                return _this2.canvas_terrain_toggle(event);
            });
            this.$toggleOptions.off('click', function (event) {
                return _this2.ui_options_toggle(event);
            });

            return this.destroy();
        }

        /**
         * @for UiController
         * @method destroy
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.$element = null;
            this.$airportList = null;
            this.$airportListNotes = null;
            this.$toggleTutorial = null;
            this.$fastForwards = null;
            this.$pauseToggle = null;
            this.$pausedImg = null;
            this.$speechToggle = null;
            this.$switchAirport = null;
            this.$toggleLabels = null;
            this.$toggleRestrictedAreas = null;
            this.$toggleSids = null;
            this.$toggleTerrain = null;
            this.$toggleOptions = null;

            this.ui = {};
            this.ui.scale_default = -1;
            this.ui.scale_max = -1;
            this.ui.scale_min = -1;
            this.ui.scale = -1;
            this.ui.terrain = {};

            return this;
        }

        /**
         * @for UiController
         * @method ui_init_pre
         */

    }, {
        key: 'ui_init_pre',
        value: function ui_init_pre() {
            prop.ui = ui;
            prop.ui.scale_default = 8; // pixels per km
            prop.ui.scale_max = 80; // max scale
            prop.ui.scale_min = 1; // min scale
            prop.ui.scale = prop.ui.scale_default;
            prop.ui.terrain = {
                colors: {
                    1000: '26, 150, 65',
                    2000: '119, 194, 92',
                    3000: '255, 255, 192',
                    4000: '253, 201, 128',
                    5000: '240, 124, 74',
                    6000: '156, 81, 31'
                },
                border_opacity: 1,
                fill_opacity: 0.1
            };

            this.ui_set_scale_from_storage();
        }

        /**
         * @for uiController
         * @method ui_init
         */

    }, {
        key: 'ui_init',
        value: function ui_init() {
            var _this3 = this;

            this.$fastForwards.prop('title', 'Set time warp to 2');

            var $options = (0, _jquery2.default)(UI_OPTIONS_TEMPLATE);
            var descriptions = window.gameController.game.option.getDescriptions();

            (0, _forEach3.default)(descriptions, function (opt) {
                if (opt.type !== 'select') {
                    return;
                }

                var $container = _this3._buildOptionTemplate(opt);
                $options.append($container);
            });

            (0, _jquery2.default)('body').append($options);
        }

        /**
         * Build the html for a game option and its cooresponding value elements.
         *
         * @for UiController
         * @method _buildOptionTemplate
         * @param option {object}
         * @return $container {jquery Element}
         * @private
         */

    }, {
        key: '_buildOptionTemplate',
        value: function _buildOptionTemplate(option) {
            var $container = (0, _jquery2.default)(UI_OPTION_CONTAINER_TEMPLATE);
            $container.append('<span class="option-description">' + option.description + '</span>');

            var $optionSelector = (0, _jquery2.default)(UI_OPTION_SELECTOR_TEMPLATE);
            var $selector = (0, _jquery2.default)('<select id="opt-' + option.name + '" name="' + option.name + '"></select>');
            var selectedOption = window.gameController.game.option.get(option.name);

            // this could me done with a _map(), but verbosity here makes the code easier to read
            for (var i = 0; i < option.data.length; i++) {
                var $optionSelectTempalate = this._buildOptionSelectTemplate(option.data[i][1], selectedOption);

                $selector.append($optionSelectTempalate);
            }

            // TODO: this should be moved to a `setupHandlers()` or a click handler
            $selector.change(function (event) {
                var $currentTarget = (0, _jquery2.default)(event.currentTarget);

                window.gameController.game.option.set($currentTarget.attr('name'), $currentTarget.val());
            });

            $optionSelector.append($selector);
            $container.append($optionSelector);

            return $container;
        }

        /**
         * Build the html for a select option.
         *
         * @for UiController
         * @method _buildOptionTemplate
         * @param optionData
         * @param selectedOption {string}
         * @return optionSelectTempalate {string}
         * @private
         */

    }, {
        key: '_buildOptionSelectTemplate',
        value: function _buildOptionSelectTemplate(optionData, selectedOption) {
            var optionSelectTempalate = '<option value="' + optionData + '">' + (0, _startCase3.default)(optionData) + '</option>';

            if (optionData === selectedOption) {
                optionSelectTempalate = '<option value="' + optionData + '" selected="selected">' + (0, _startCase3.default)(optionData) + '</option>';
            }

            return optionSelectTempalate;
        }

        /**
         * @for uiController
         * @method onClickAirportListItemHandler
         * @paam event {jquery event}
         */

    }, {
        key: 'onClickAirportListItemHandler',
        value: function onClickAirportListItemHandler(event) {
            if (event.data !== window.airportController.airport_get().icao) {
                window.airportController.airport_set(event.data);
                this.ui_airport_close();
            }
        }

        /**
         * @for uiController
         * @method buildAirportListItemTemplate
         * @param icao {string}
         * @param difficulty {string}
         * @param name {string}
         * @return {DOM element|string}
         */

    }, {
        key: 'buildAirportListItemTemplate',
        value: function buildAirportListItemTemplate(icao, difficulty, name) {
            return '<li class="airport icao-' + icao.toLowerCase() + '">' + ('<span style="font-size: 7pt" class="difficulty">' + difficulty + '</span>') + ('<span class="icao">' + icao.toUpperCase() + '</span>') + ('<span class="name">' + name + '</span>') + '</li>';
        }

        /**
         * @for UiController
         * @method ui_complete
         */

    }, {
        key: 'ui_complete',
        value: function ui_complete() {
            var _this4 = this;

            var airports = (0, _keys3.default)(prop.airport.airports).sort();
            var icon = '&#9992;';
            var difficulty = '';
            var airport = void 0;

            for (var i = 0; i < airports.length; i++) {
                airport = prop.airport.airports[airports[i]];

                switch (airport.level) {
                    case 'beginner':
                        difficulty = icon;
                        break;
                    case 'easy':
                        difficulty = icon.repeat(2);
                        break;
                    case 'medium':
                        difficulty = icon.repeat(3);
                        break;
                    case 'hard':
                        difficulty = icon.repeat(4);
                        break;
                    case 'expert':
                        difficulty = icon.repeat(5);
                        break;
                    default:
                        difficulty = '?';
                        break;
                }

                // TODO: move to a template const
                var _airport = airport,
                    name = _airport.name,
                    icao = _airport.icao;

                var $airportListItem = (0, _jquery2.default)(this.buildAirportListItemTemplate(icao, difficulty, name));

                // TODO: replace with an onClick() handler
                $airportListItem.click(airport.icao.toLowerCase(), function (event) {
                    if (event.data !== window.airportController.airport_get().icao) {
                        window.airportController.airport_set(event.data);
                        _this4.ui_airport_close();
                    }
                });

                this.$airportList.append($airportListItem);
            }

            this.drawAirportListFooter();
        }

        /**
         * @for UiController
         * @method drawAirportListFooter
         */

    }, {
        key: 'drawAirportListFooter',
        value: function drawAirportListFooter() {
            var symbol = (0, _jquery2.default)('<span class="symbol">&#9983</span>');
            this.$airportListNotes.append(symbol);

            var notes = (0, _jquery2.default)('<span class="words">indicates airport is a work in progress</span>');
            this.$airportListNotes.append(notes);
        }

        //TODO: this function should live in a helper file somewhere
        /**
         * @for UiController
         * @method px_to_km
         * @param pixels {number}
         * @return {number}
         */

    }, {
        key: 'px_to_km',
        value: function px_to_km(pixels) {
            return pixels / prop.ui.scale;
        }

        //TODO: this function should live in a helper file somewhere
        /**
         * @for UiController
         * @method km_to_px
         * @param kilometers {number}
         * @return {number}
         */

    }, {
        key: 'km_to_px',
        value: function km_to_px(kilometers) {
            return kilometers * prop.ui.scale;
        }

        /**
         * @for UiController
         * @method ui_after_zoom
         */

    }, {
        key: 'ui_after_zoom',
        value: function ui_after_zoom() {
            localStorage[_storageKeys.STORAGE_KEY.ATC_SCALE] = prop.ui.scale;

            prop.canvas.dirty = true;
        }

        /**
         * @for UiController
         * @method ui_zoom_out
         */

    }, {
        key: 'ui_zoom_out',
        value: function ui_zoom_out() {
            var lastpos = [(0, _core.round)(this.px_to_km(prop.canvas.panX)), (0, _core.round)(this.px_to_km(prop.canvas.panY))];

            prop.ui.scale *= 0.9;

            if (prop.ui.scale < prop.ui.scale_min) {
                prop.ui.scale = prop.ui.scale_min;
            }

            this.ui_after_zoom();

            prop.canvas.panX = (0, _core.round)(this.km_to_px(lastpos[0]));
            prop.canvas.panY = (0, _core.round)(this.km_to_px(lastpos[1]));
        }

        /**
         * @for UiController
         * @method ui_zoom_in
         */

    }, {
        key: 'ui_zoom_in',
        value: function ui_zoom_in() {
            var lastpos = [(0, _core.round)(this.px_to_km(prop.canvas.panX)), (0, _core.round)(this.px_to_km(prop.canvas.panY))];

            prop.ui.scale /= 0.9;
            if (prop.ui.scale > prop.ui.scale_max) {
                prop.ui.scale = prop.ui.scale_max;
            }

            this.ui_after_zoom();

            prop.canvas.panX = (0, _core.round)(this.km_to_px(lastpos[0]));
            prop.canvas.panY = (0, _core.round)(this.km_to_px(lastpos[1]));
        }

        /**
         * @for UiController
         * @method ui_zoom_reset
         */

    }, {
        key: 'ui_zoom_reset',
        value: function ui_zoom_reset() {
            prop.ui.scale = prop.ui.scale_default;

            this.ui_after_zoom();
        }

        /**
         * @for UiController
         * @method ui_log
         */

    }, {
        key: 'ui_log',
        value: function ui_log(message) {
            var warn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            var html = (0, _jquery2.default)('<span class="item"><span class="message">' + message + '</span></span>');

            if (warn) {
                html.addClass(_selectors.SELECTORS.CLASSNAMES.WARN);
            }

            var $log = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.LOG);
            $log.append(html);
            $log.scrollTop($log.get(0).scrollHeight);

            window.gameController.game_timeout(function (uiLogView) {
                uiLogView.addClass(_selectors.SELECTORS.CLASSNAMES.HIDDEN);

                setTimeout(function () {
                    uiLogView.remove();
                }, 10000);
            }, 3, window, html);
        }

        /**
         * @for UiController
         * @method ui_airport_open
         */

    }, {
        key: 'ui_airport_open',
        value: function ui_airport_open() {
            this.$airportSwitch.addClass(_selectors.SELECTORS.CLASSNAMES.OPEN);

            var $previousActiveAirport = this.$airportList.find(_selectors.SELECTORS.DOM_SELECTORS.ACTIVE);

            // Remove the active class from a no-longer-selected airport in the list.
            if ($previousActiveAirport.length !== 0) {
                $previousActiveAirport.removeClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
            }

            var icao = window.airportController.airport_get().icao.toLowerCase();
            (0, _jquery2.default)('.airport.icao-' + icao).addClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);

            this.$switchAirport.addClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
        }

        /**
         * @for UiController
         * @method ui_airport_close
         */

    }, {
        key: 'ui_airport_close',
        value: function ui_airport_close() {
            this.$airportSwitch.removeClass(_selectors.SELECTORS.CLASSNAMES.OPEN);
            this.$switchAirport.removeClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
        }

        /**
         * @for UiController
         * @method ui_airport_toggle
         */

    }, {
        key: 'ui_airport_toggle',
        value: function ui_airport_toggle() {
            if (this.$airportSwitch.hasClass(_selectors.SELECTORS.CLASSNAMES.OPEN)) {
                this.ui_airport_close();
            } else {
                this.ui_airport_open();
            }
        }

        /**
         * @for UiController
         * @method canvas_labels_toggle
         * @param {jquery event}
         */

    }, {
        key: 'canvas_labels_toggle',
        value: function canvas_labels_toggle(event) {
            (0, _jquery2.default)(event.target).closest(_selectors.SELECTORS.DOM_SELECTORS.CONTROL).toggleClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);

            prop.canvas.draw_labels = !prop.canvas.draw_labels;
        }

        /**
         * @for UiController
         * @method canvas_restricted_toggle
         */

    }, {
        key: 'canvas_restricted_toggle',
        value: function canvas_restricted_toggle(event) {
            (0, _jquery2.default)(event.target).closest(_selectors.SELECTORS.DOM_SELECTORS.CONTROL).toggleClass(_selectors.SELECTORS.DOM_SELECTORS.WARNING_BUTTON + ' ' + _selectors.SELECTORS.CLASSNAMES.ACTIVE);

            prop.canvas.draw_restricted = !prop.canvas.draw_restricted;
        }

        /**
         * @for UiController
         * @method canvas_sids_toggle
         * @param event {jquery event}
         */

    }, {
        key: 'canvas_sids_toggle',
        value: function canvas_sids_toggle(event) {
            (0, _jquery2.default)(event.target).closest(_selectors.SELECTORS.DOM_SELECTORS.CONTROL).toggleClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);

            prop.canvas.draw_sids = !prop.canvas.draw_sids;
        }

        /**
         * @for UiController
         * @method canvas_terrain_toggle
         * @param event {jquery event}
         */

    }, {
        key: 'canvas_terrain_toggle',
        value: function canvas_terrain_toggle(event) {
            (0, _jquery2.default)(event.target).closest(_selectors.SELECTORS.DOM_SELECTORS.CONTROL).toggleClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
            prop.canvas.draw_terrain = !prop.canvas.draw_terrain;
        }

        /**
         * @for UiController
         * @method ui_options_toggle
         */

    }, {
        key: 'ui_options_toggle',
        value: function ui_options_toggle() {
            var $optionsDialog = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.OPTIONS_DIALOG);

            if ($optionsDialog.hasClass(_selectors.SELECTORS.CLASSNAMES.OPEN)) {
                $optionsDialog.removeClass(_selectors.SELECTORS.CLASSNAMES.OPEN);
                $optionsDialog.removeClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
            } else {
                $optionsDialog.addClass(_selectors.SELECTORS.CLASSNAMES.OPEN);
                $optionsDialog.addClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
            }
        }

        /**
         * @for UiController
         * @method ui_set_scale_from_storage
         */

    }, {
        key: 'ui_set_scale_from_storage',
        value: function ui_set_scale_from_storage() {
            if (!(0, _has3.default)(localStorage, _storageKeys.STORAGE_KEY.ATC_SCALE)) {
                return;
            }

            prop.ui.scale = localStorage[_storageKeys.STORAGE_KEY.ATC_SCALE];
        }
    }]);

    return UiView;
}();

exports.default = UiView;

},{"./constants/selectors":575,"./constants/storageKeys":576,"./math/core":584,"./speech":588,"jquery":296,"lodash/forEach":468,"lodash/has":470,"lodash/keys":492,"lodash/startCase":501}],523:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable camelcase, no-underscore-dangle, no-mixed-operators, func-names, object-shorthand, no-param-reassign, no-undef */


var _core = require('../math/core');

var _circle = require('../math/circle');

var _vector = require('../math/vector');

var _unitConverters = require('../utilities/unitConverters');

var _GameController = require('../game/GameController');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// TODO: move these to a constants file
// 14.816km = 8nm (max possible sep minmum)
var MAXIMUM_SEPARATION_KM = 14.816;
// Standard Basic Lateral Separation Minimum
var STANDARD_LATERAL_SEPARATION_MINIMUM_KM = 5.556; // 3nm
// Minimum vertical separation in feet
var MIN_VERTICAL_SEPARATION_FT = 1000;

/**
 * Details about aircraft in close proximity in relation to 'the rules'
 *
 * @class AircraftConflict
 */

var AircraftConflict = function () {
    function AircraftConflict(first, second) {
        _classCallCheck(this, AircraftConflict);

        this.aircraft = [first, second];
        this.distance = (0, _vector.vlen)((0, _vector.vsub)(first.position, second.position));
        this.distance_delta = 0;
        this.altitude = (0, _core.abs)(first.altitude - second.altitude);

        this.collided = false;

        this.conflicts = {};
        this.violations = {};

        this.aircraft[0].addConflict(this, second);
        this.aircraft[1].addConflict(this, first);

        this.update();
    }

    /**
     * Is there anything which should be brought to the controllers attention
     *
     * @returns {Array of Boolean} First element true if any conflicts/warnings,
     *                             Second element true if any violations.
     */


    _createClass(AircraftConflict, [{
        key: 'hasAlerts',
        value: function hasAlerts() {
            return [this.hasConflict(), this.hasViolation()];
        }

        /**
         *  Whether any conflicts are currently active
         */

    }, {
        key: 'hasConflict',
        value: function hasConflict() {
            for (var i in this.conflicts) {
                if (this.conflicts[i]) {
                    return true;
                }
            }

            return false;
        }

        /**
         *  Whether any violations are currently active
         */

    }, {
        key: 'hasViolation',
        value: function hasViolation() {
            for (var i in this.violations) {
                if (this.violations[i]) {
                    return true;
                }
            }

            return false;
        }

        /**
         * Update conflict and violation checks, potentially removing this conflict.
         */

    }, {
        key: 'update',
        value: function update() {
            // Avoid triggering any more conflicts if the two aircraft have collided
            if (this.collided) {
                return;
            }

            var d = this.distance;
            this.distance = (0, _vector.vlen)((0, _vector.vsub)(this.aircraft[0].position, this.aircraft[1].position));
            this.distance_delta = this.distance - d;
            this.altitude = (0, _core.abs)(this.aircraft[0].altitude - this.aircraft[1].altitude);

            // Check if the separation is now beyond the bounding box check
            if (this.distance > MAXIMUM_SEPARATION_KM) {
                this.remove();
                return;
            }

            this.checkCollision();
            this.checkRunwayCollision();

            // Ignore aircraft below about 1000 feet
            var airportElevation = window.airportController.airport_get().elevation;
            if (this.aircraft[0].altitude - airportElevation < 990 || this.aircraft[1].altitude - airportElevation < 990) {
                return;
            }

            // Ignore aircraft in the first minute of their flight
            if (window.gameController.game_time() - this.aircraft[0].takeoffTime < 60 || window.gameController.game_time() - this.aircraft[0].takeoffTime < 60) {
                return;
            }

            this.checkProximity();
        }

        /**
         * Remove conflict for both aircraft
         */

    }, {
        key: 'remove',
        value: function remove() {
            this.aircraft[0].removeConflict(this.aircraft[1]);
            this.aircraft[1].removeConflict(this.aircraft[0]);
        }

        /**
         * Check for collision
         */

    }, {
        key: 'checkCollision',
        value: function checkCollision() {
            if (this.aircraft[0].isOnGround() || this.aircraft[1].isOnGround()) {
                return; // TEMPORARY FIX FOR CRASHES BTWN ARRIVALS AND TAXIIED A/C
            }

            // TODO: enumerate the magic numbers.
            // Collide within 160 feet
            var airport = window.airportController.airport_get();

            if (this.distance < 0.05 && this.altitude < 160 && this.aircraft[0].isInsideAirspace(airport) && this.aircraft[1].isInsideAirspace(airport)) {
                this.collided = true;
                var _isWarning = true;
                window.uiController.ui_log(this.aircraft[0].getCallsign() + ' collided with ' + this.aircraft[1].getCallsign(), _isWarning);

                window.gameController.events_recordNew(_GameController.GAME_EVENTS.COLLISION);
                this.aircraft[0].hit = true;
                this.aircraft[1].hit = true;

                // If either are in a runway queue, remove them from it
                window.airportController.removeAircraftFromAllRunwayQueues(this.aircraft[0]);
                window.airportController.removeAircraftFromAllRunwayQueues(this.aircraft[1]);
            }
        }

        /**
         * Check for a potential head-on collision on a runway
         */

    }, {
        key: 'checkRunwayCollision',
        value: function checkRunwayCollision() {
            // Check if the aircraft are on a potential collision course
            // on the runway
            var airport = window.airportController.airport_get();

            // TODO: this logic block needs its own method.
            // Check for the same runway, different ends and under about 6 miles
            if (!this.aircraft[0].isTaxiing() && !this.aircraft[1].isTaxiing() && this.aircraft[0].rwy_dep !== null && this.aircraft[0].rwy_dep !== this.aircraft[1].rwy_dep && airport.getRunway(this.aircraft[1].rwy_dep) === airport.getRunway(this.aircraft[0].rwy_dep) && this.distance < 10) {
                if (!this.conflicts.runwayCollision) {
                    this.conflicts.runwayCollision = true;
                    window.uiController.ui_log(this.aircraft[0].getCallsign() + ' appears on a collision course with' + (' ' + this.aircraft[1].getCallsign() + ' on the same runway"'), isWarning);
                }
            } else {
                this.conflicts.runwayCollision = false;
            }
        }

        // TODO: this method is ripe for refactor. lots of logic that can be pulled out to
        // helper functions or other class methods.
        /**
         * Check for physical proximity and trigger crashes if necessary
         */

    }, {
        key: 'checkProximity',
        value: function checkProximity() {
            // No conflict or warning if vertical separation is present
            if (this.altitude >= MIN_VERTICAL_SEPARATION_FT) {
                this.conflicts.proximityConflict = false;
                this.conflicts.proximityViolation = false;

                return;
            }

            var conflict = false;
            var violation = false;
            var disableNotices = false;
            var a1 = this.aircraft[0];
            var a2 = this.aircraft[1];
            var applicableLatSepMin = STANDARD_LATERAL_SEPARATION_MINIMUM_KM;

            // Established on precision guided approaches && both are following different instrument approaches
            if (a1.isPrecisionGuided() && a2.isPrecisionGuided() && a1.rwy_arr !== a2.rwy_arr) {
                var runwayRelationship = window.airportController.airport_get().metadata.rwy[a1.rwy_arr][a2.rwy_arr];

                // Determine applicable lateral separation minima for conducting
                // parallel simultaneous dependent approaches on these runways:
                if (runwayRelationship.parallel) {
                    // hide notices for aircraft on adjacent final approach courses
                    disableNotices = true;

                    // TODO: this should be a helper function: findSeparationMinimum = (feetBetween) => {};
                    var feetBetween = (0, _unitConverters.km_ft)(runwayRelationship.lateral_dist);
                    if (feetBetween < 2500) {
                        // Runways separated by <2500'
                        applicableLatSepMin = STANDARD_LATERAL_SEPARATION_MINIMUM_KM; // 3.0nm
                    } else if (feetBetween >= 2500 && feetBetween <= 3600) {
                        // 2500'-3600'
                        applicableLatSepMin = 1.852; // 1.0nm
                    } else if (feetBetween > 3600 && feetBetween <= 4300) {
                        // 3600'-4300'
                        applicableLatSepMin = 2.778; // 1.5nm
                    } else if (feetBetween > 4300 && feetBetween <= 9000) {
                        // 4300'-9000'
                        applicableLatSepMin = 3.704; // 2.0nm
                    } else if (feetBetween > 9000) {
                        // Runways separated by >9000'
                        applicableLatSepMin = STANDARD_LATERAL_SEPARATION_MINIMUM_KM; // 3.0nm
                    }
                    // Note: The above does not take into account the (more complicated)
                    // rules for dual/triple simultaneous parallel dependent approaches as
                    // outlined by FAA JO 7110.65, para 5-9-7. Users playing at any of our
                    // airports that have triple parallels may be able to "get away with"
                    // the less restrictive rules, whilst their traffic may not be 100%
                    // legal. It's just complicated and not currently worthwhile to add
                    // rules for running trips at this point... maybe later. -@erikquinn
                    // Reference: FAA JO 7110.65, section 5-9-6
                }
            }

            // TODO: this should be another class method: hasSeparationViolation(applicableLatSepMin)
            // Considering all of the above cases,...
            violation = this.distance < applicableLatSepMin;
            // TODO: enumerate the magic number.
            // TODO: this should be another class method
            conflict = this.distance < applicableLatSepMin + 1.852 && !disableNotices || violation; // +1.0nm

            // "Passing & Diverging" Rules (the "exception" to all of the above rules)
            // test the below only if separation is currently considered insufficient
            if (conflict) {
                var hdg_difference = (0, _core.abs)((0, _circle.angle_offset)(a1.groundTrack, a2.groundTrack));

                // FIXME: couldnt these two ifs be combined to something like:
                // if (hdg_difference >= degreesToRadians(15) && hdg_difference > degreesToRadians(165)) {}
                if (hdg_difference >= (0, _unitConverters.degreesToRadians)(15)) {
                    if (hdg_difference > (0, _unitConverters.degreesToRadians)(165)) {
                        // 'opposite' courses
                        if (this.distance_delta > 0) {
                            // OKAY IF the distance is increasing
                            conflict = false;
                            violation = false;
                        }
                    } else {
                        // TODO: this should definitely be a helper function that lives in one of the math/ files
                        // 'same' or 'crossing' courses
                        // Ray intersection from http://stackoverflow.com/a/2932601
                        var ad = (0, _vector.vturn)(a1.groundTrack);
                        var bd = (0, _vector.vturn)(a2.groundTrack);
                        var dx = a2.position[0] - a1.position[0];
                        var dy = a2.position[1] - a1.position[1];
                        var det = bd[0] * ad[1] - bd[1] * ad[0];
                        var u = (dy * bd[0] - dx * bd[1]) / det; // a1's distance from point of convergence
                        var v = (dy * ad[0] - dx * ad[1]) / det; // a2's distance from point of convergence

                        // TODO: this should be a helper function that live in one of the math/ files
                        if (u < 0 || v < 0) {
                            // check if either a/c has passed the point of convergence
                            conflict = false; // targets are diverging
                            violation = false; // targets are diverging
                        }
                        // Reference: FAA JO 7110.65, section 5-5-7-a-1:
                        // (a) Aircraft are on opposite/reciprocal courses and you have observed
                        // that they have passed each other; or aircraft are on same or crossing
                        // courses/assigned radar vectors and one aircraft has crossed the
                        // projected course of the other, and the angular difference between
                        // their courses/assigned radar vectors is at least 15 degrees.
                    }
                }
            }

            // Update Conflicts
            if (conflict) {
                this.conflicts.proximityConflict = true;
            } else {
                this.conflicts.proximityConflict = false;
            }

            if (violation) {
                this.violations.proximityViolation = true;
                // TODO: Add score penalty for 'SEPARATION_LOSS', but only ONCE
            } else {
                this.violations.proximityViolation = false;
            }
        }
    }]);

    return AircraftConflict;
}();

exports.default = AircraftConflict;

},{"../game/GameController":580,"../math/circle":583,"../math/core":584,"../math/vector":587,"../utilities/unitConverters":595}],524:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-underscore-dangle, no-unused-vars, no-undef, global-require */


var _without2 = require('lodash/without');

var _without3 = _interopRequireDefault(_without2);

var _AircraftConflict = require('./AircraftConflict');

var _AircraftConflict2 = _interopRequireDefault(_AircraftConflict);

var _AircraftModel = require('./AircraftModel');

var _AircraftModel2 = _interopRequireDefault(_AircraftModel);

var _speech = require('../speech');

var _core = require('../math/core');

var _distance = require('../math/distance');

var _vector = require('../math/vector');

var _unitConverters = require('../utilities/unitConverters');

var _flightMath = require('../math/flightMath');

var _circle = require('../math/circle');

var _GameController = require('../game/GameController');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Temporary const declaration here to attach to the window AND use as internal property
var aircraft = {};

// TODO: this should be renamed to `AircraftCollection`
/**
 * @class AircraftController
 */

var AircraftController = function () {
    /**
     * @constructor
     */
    function AircraftController() {
        _classCallCheck(this, AircraftController);

        this.aircraft = aircraft;
        this.aircraft.models = {};
        this.aircraft.callsigns = [];
        this.aircraft.list = [];
        this.aircraft.current = null;
        this.aircraft.auto = { enabled: false };
        prop.aircraft = aircraft;
    }

    /**
     * @for AircraftController
     * @method aircraft_auto_toggle
     */


    _createClass(AircraftController, [{
        key: 'aircraft_auto_toggle',
        value: function aircraft_auto_toggle() {
            prop.aircraft.auto.enabled = !this.aircraft.auto.enabled;
        }

        /**
         * @for AircraftController
         * @method isCallsignInList
         * @param callsign {string}
         * return {boolean}
         */

    }, {
        key: 'isCallsignInList',
        value: function isCallsignInList(callsign) {
            return this.aircraft.callsigns.indexOf(callsign) !== -1;
        }

        /**
         * Add a new callsign to `aircraft.callsigns`
         *
         * @for AircraftController
         * @method addCallsignToList
         * @param callsign {string}
         */

    }, {
        key: 'addCallsignToList',
        value: function addCallsignToList(callsign) {
            if (this.isCallsignInList(callsign)) {
                // if you've made it here something has gone very wrong. generation of a callsign/flightNumber should
                // also include verification that the callsign/flightNumber is unique
                console.warn(callsign + ' already exists within the callsigns list!');

                return;
            }

            this.aircraft.callsigns.push(callsign);
        }

        /**
         * @for AircraftController
         * @method aircraft_new
         * @param options {object}
         */

    }, {
        key: 'aircraft_new',
        value: function aircraft_new(options) {
            var airline = window.airlineController.airline_get(options.airline);

            return airline.generateAircraft(options);
        }

        /**
         * @for AircraftController
         * @method aircraft_get_nearest
         * @param position
         */

    }, {
        key: 'aircraft_get_nearest',
        value: function aircraft_get_nearest(position) {
            var nearest = null;
            var distance = Infinity;

            for (var i = 0; i < this.aircraft.list.length; i++) {
                var _aircraft = this.aircraft.list[i];
                var d = (0, _distance.distance2d)(_aircraft.position, position);

                if (d < distance && _aircraft.isVisible() && !_aircraft.hit) {
                    distance = d;
                    nearest = i;
                }
            }

            return [this.aircraft.list[nearest], distance];
        }

        /**
         * @for AircraftController
         * @method aircraft_add
         * @param model {AircraftModel|object}
         */

    }, {
        key: 'aircraft_add',
        value: function aircraft_add(model) {
            this.aircraft.models[model.icao.toLowerCase()] = model;
        }

        /**
         * @for AircraftController
         * @method aircraft_visible
         * @param aircraft
         * @param factor
         */

    }, {
        key: 'aircraft_visible',
        value: function aircraft_visible(aircraft) {
            var factor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

            return (0, _vector.vlen)(aircraft.position) < window.airportController.airport_get().ctr_radius * factor;
        }

        /**
         * @for AircraftController
         * @method aircraft_remove_all
         */

    }, {
        key: 'aircraft_remove_all',
        value: function aircraft_remove_all() {
            for (var i = 0; i < this.aircraft.list.length; i++) {
                this.aircraft.list[i].cleanup();
            }

            this.aircraft.list = [];
        }

        /**
         * @for AircraftController
         * @method aircraft_remove
         */

    }, {
        key: 'aircraft_remove',
        value: function aircraft_remove(aircraft) {
            window.airportController.removeAircraftFromAllRunwayQueues(aircraft);
            this.removeCallsignFromList(aircraft.callsign);
            this.removeAircraftInstanceModelFromList(aircraft);
            aircraft.cleanup();
        }

        /**
         * @for AircraftController
         * @method aircraft_update
         */

    }, {
        key: 'aircraft_update',
        value: function aircraft_update() {
            // TODO: change to _forEach()
            for (var i = 0; i < this.aircraft.list.length; i++) {
                this.aircraft.list[i].update();
                this.aircraft.list[i].updateWarning();

                // TODO: move this InnerLoop thing to a function so we can get rid of the continue InnerLoop thing.
                for (var j = i + 1; j < this.aircraft.list.length; j++) {
                    // TODO: need better names here. what is `that`?  what is `other`?
                    var _aircraft2 = this.aircraft.list[i];
                    var otherAircraft = this.aircraft.list[j];

                    if (_aircraft2.checkConflict(otherAircraft)) {
                        continue;
                    }

                    // Fast 2D bounding box check, there are no conflicts over 8nm apart (14.816km)
                    // no violation can occur in this case.
                    // Variation of:
                    // http://gamedev.stackexchange.com/questions/586/what-is-the-fastest-way-to-work-out-2d-bounding-box-intersection
                    var dx = (0, _core.abs)(_aircraft2.position[0] - otherAircraft.position[0]);
                    var dy = (0, _core.abs)(_aircraft2.position[1] - otherAircraft.position[1]);

                    // TODO: move this value to a constant
                    // TODO: this if/else doesn't make sense
                    if (dx > 14.816 || dy > 14.816) {
                        continue;
                    } else {
                        // TODO: this should go somewhere and not just be instantiated
                        new _AircraftConflict2.default(_aircraft2, otherAircraft);
                    }
                }
            }

            for (var _i = this.aircraft.list.length - 1; _i >= 0; _i--) {
                var remove = false;
                var _aircraft3 = this.aircraft.list[_i];
                // let is_visible = aircraft_visible(aircraft);

                if (_aircraft3.isStopped() && _aircraft3.category === 'arrival') {
                    _aircraft3.scoreWind('landed');

                    window.uiController.ui_log(_aircraft3.getCallsign() + ' switching to ground, good day');
                    (0, _speech.speech_say)([{ type: 'callsign', content: _aircraft3 }, { type: 'text', content: ', switching to ground, good day' }]);

                    window.gameController.events_recordNew(_GameController.GAME_EVENTS.ARRIVAL);
                    remove = true;
                }

                if (_aircraft3.hit && _aircraft3.isOnGround()) {
                    window.uiController.ui_log('Lost radar contact with ' + _aircraft3.getCallsign());
                    (0, _speech.speech_say)([{ type: 'callsign', content: _aircraft3 }, { type: 'text', content: ', radar contact lost' }]);

                    remove = true;
                }

                // Clean up the screen from aircraft that are too far
                if (!this.aircraft_visible(_aircraft3, 2) && !_aircraft3.inside_ctr && _aircraft3.fms.currentWaypoint.navmode === 'heading') {
                    if (_aircraft3.category === 'arrival' || _aircraft3.category === 'departure') {
                        remove = true;
                    }
                }

                if (remove) {
                    this.aircraft_remove(_aircraft3);
                    _i -= 1;
                }
            }
        }

        /**
         * Calculate the turn initiation distance for an aircraft to navigate between two fixes.
         *
         * References:
         * - http://www.ohio.edu/people/uijtdeha/ee6900_fms_00_overview.pdf, Fly-by waypoint
         * - The Avionics Handbook, ch 15
         *
         * @for AircraftController
         * @method aircraft_turn_initiation_distance
         * @param aircraft {AircraftInstanceModel}
         * @param fix
         */

    }, {
        key: 'aircraft_turn_initiation_distance',
        value: function aircraft_turn_initiation_distance(aircraft, fix) {
            // TODO: this function is ripe for refactor. there is a lot of inline logic that can be abstracted and/or pulled out
            var index = aircraft.fms.indexOfCurrentWaypoint().wp;
            if (index >= aircraft.fms.waypoints().length - 1) {
                // if there are no subsequent fixes, fly over 'fix'
                return 0;
            }

            // convert knots to m/s
            var speed = (0, _unitConverters.kn_ms)(aircraft.speed);
            // assume nominal bank angle of 25 degrees for all aircraft
            var bank_angle = (0, _unitConverters.degreesToRadians)(25);

            // TODO: is there a getNextWaypoint() function?
            var nextfix = aircraft.fms.waypoint(aircraft.fms.indexOfCurrentWaypoint().wp + 1).location;
            if (!nextfix) {
                return 0;
            }

            var nominal_new_course = (0, _vector.vradial)((0, _vector.vsub)(nextfix, fix));
            if (nominal_new_course < 0) {
                // TODO: what is this doing? this should go in a new method.
                nominal_new_course += (0, _circle.tau)();
            }

            var current_heading = aircraft.heading;
            if (current_heading < 0) {
                current_heading += (0, _circle.tau)();
            }

            // TODO: move to function
            var course_change = (0, _core.abs)((0, _unitConverters.radiansToDegrees)(current_heading) - (0, _unitConverters.radiansToDegrees)(nominal_new_course));
            if (course_change > 180) {
                course_change = 360 - course_change;
            }

            course_change = (0, _unitConverters.degreesToRadians)(course_change);
            // meters, bank establishment in 1s
            var turn_initiation_distance = (0, _flightMath.calcTurnInitiationDistance)(speed, bank_angle, course_change);

            return turn_initiation_distance / 1000; // convert m to km
        }

        /**
         * @for AircraftController
         * @method aircraft_get
         * @param eid
         */

    }, {
        key: 'aircraft_get',
        value: function aircraft_get() {
            var eid = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (eid === null) {
                return null;
            }

            // prevent out-of-range error
            if (this.aircraft.list.length > eid && eid >= 0) {
                return this.aircraft.list[eid];
            }

            return null;
        }

        /**
         * @for AircraftController
         * @method aircraft_get_by_callsign
         * @param callsign {string}
         */

    }, {
        key: 'aircraft_get_by_callsign',
        value: function aircraft_get_by_callsign(callsign) {
            callsign = String(callsign);

            for (var i = 0; i < this.aircraft.list.length; i++) {
                if (this.aircraft.list[i].callsign === callsign.toLowerCase()) {
                    return this.aircraft.list[i];
                }
            }

            return null;
        }

        /**
         * @for AircraftController
         * @method aircraft_get_eid_by_callsign
         * @param callsign {string}
         */

    }, {
        key: 'aircraft_get_eid_by_callsign',
        value: function aircraft_get_eid_by_callsign(callsign) {
            for (var i = 0; i < this.aircraft.list.length; i++) {
                var _aircraft4 = this.aircraft.list[i];

                if (_aircraft4.callsign === callsign.toLowerCase()) {
                    return _aircraft4.eid;
                }
            }

            return null;
        }

        /**
         * @for AircraftController
         * @method aircraft_model_get
         * @param icao {string}
         */

    }, {
        key: 'aircraft_model_get',
        value: function aircraft_model_get(icao) {
            if (!this.aircraft.models[icao]) {
                var model = new _AircraftModel2.default({
                    icao: icao,
                    url: 'assets/aircraft/' + icao + '.json'
                });

                this.aircraft.models[icao] = model;
            }

            return this.aircraft.models[icao];
        }

        /**
         * Remove the specified aircraft from `AircraftController.aircraft`
         * @method removeAircraftInstanceModelFromList
         * @param  {Aircraft} aircraft the aircraft to remove
         */

    }, {
        key: 'removeAircraftInstanceModelFromList',
        value: function removeAircraftInstanceModelFromList(aircraft) {
            this.aircraft.list = (0, _without3.default)(this.aircraft.list, aircraft);
        }

        /**
         * Remove a flight number from the list stored in `AircraftController.aircraft.callsigns`
         * @for AircraftController
         * @method removeCallsignFromList
         * @param  {string} callsign the flight number to remove
         */

    }, {
        key: 'removeCallsignFromList',
        value: function removeCallsignFromList(callsign) {
            this.aircraft.callsigns = (0, _without3.default)(this.aircraft.callsigns, callsign);
        }

        // TODO: what is an `eid` and why would it beed to be updated?
        /**
         * Adjust all aircraft's eid values
         *
         * @for AircraftController
         * @method update_aircraft_eids
         */

    }, {
        key: 'update_aircraft_eids',
        value: function update_aircraft_eids() {
            for (var i = 0; i < this.aircraft.list.length; i++) {
                // update eid in aircraft
                this.aircraft.list[i].eid = i;
                // update eid in aircraft's fms
                this.aircraft.list[i].fms.my_aircrafts_eid = i;
            }
        }
    }]);

    return AircraftController;
}();

exports.default = AircraftController;

},{"../game/GameController":580,"../math/circle":583,"../math/core":584,"../math/distance":585,"../math/flightMath":586,"../math/vector":587,"../speech":588,"../utilities/unitConverters":595,"./AircraftConflict":523,"./AircraftModel":526,"lodash/without":513}],525:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable max-len */


var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _isNaN2 = require('lodash/isNaN');

var _isNaN3 = _interopRequireDefault(_isNaN2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _AircraftFlightManagementSystem = require('./FlightManagementSystem/AircraftFlightManagementSystem');

var _AircraftFlightManagementSystem2 = _interopRequireDefault(_AircraftFlightManagementSystem);

var _AircraftStripView = require('./AircraftStripView');

var _AircraftStripView2 = _interopRequireDefault(_AircraftStripView);

var _Waypoint = require('./FlightManagementSystem/Waypoint');

var _Waypoint2 = _interopRequireDefault(_Waypoint);

var _RouteModel = require('../airport/Route/RouteModel');

var _RouteModel2 = _interopRequireDefault(_RouteModel);

var _speech = require('../speech');

var _circle = require('../math/circle');

var _core = require('../math/core');

var _distance = require('../math/distance');

var _flightMath = require('../math/flightMath');

var _vector = require('../math/vector');

var _radioUtilities = require('../utilities/radioUtilities');

var _unitConverters = require('../utilities/unitConverters');

var _aircraftConstants = require('../constants/aircraftConstants');

var _selectors = require('../constants/selectors');

var _GameController = require('../game/GameController');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Enum of commands and thier corresponding function.
 *
 * Used to build a call to the correct function when a UI command, or commands,
 * for an aircraft have been issued.
 *
 * @property COMMANDS
 * @type {Object}
 * @final
 */
var COMMANDS = {
    abort: 'runAbort',
    altitude: 'runAltitude',
    clearedAsFiled: 'runClearedAsFiled',
    climbViaSID: 'runClimbViaSID',
    debug: 'runDebug',
    delete: 'runDelete',
    descendViaSTAR: 'runDescendViaSTAR',
    direct: 'runDirect',
    fix: 'runFix',
    flyPresentHeading: 'runFlyPresentHeading',
    heading: 'runHeading',
    hold: 'runHold',
    land: 'runLanding',
    moveDataBlock: 'runMoveDataBlock',
    route: 'runRoute',
    reroute: 'runReroute',
    sayRoute: 'runSayRoute',
    sid: 'runSID',
    speed: 'runSpeed',
    star: 'runSTAR',
    takeoff: 'runTakeoff',
    taxi: 'runTaxi'
};

/**
 * @property FLIGHT_RULES
 * @type {Object}
 * @final
 */
var FLIGHT_RULES = {
    VFR: 'vfr',
    IFR: 'ifr'
};

/**
 * Each simulated aircraft in the game. Contains a model, fms, and conflicts.
 *
 * @class AircraftInstanceModel
 */

var Aircraft = function () {
    /**
     * @for AircraftInstanceModel
     * @constructor
     * @param options {object}
     */
    function Aircraft() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, Aircraft);

        /* eslint-disable no-multi-spaces*/
        this.eid = prop.aircraft.list.length; // entity ID
        this.position = [0, 0]; // Aircraft Position, in km, relative to airport position
        this.model = null; // Aircraft type
        this.airline = ''; // Airline Identifier (eg. 'AAL')
        this.callsign = ''; // Flight Number ONLY (eg. '551')
        this.heading = 0; // Magnetic Heading
        this.altitude = 0; // Altitude, ft MSL
        this.speed = 0; // Indicated Airspeed (IAS), knots
        this.groundSpeed = 0; // Groundspeed (GS), knots
        this.groundTrack = 0; //
        this.ds = 0; //
        this.takeoffTime = 0; //
        this.rwy_dep = null; // Departure Runway (to use, currently using, or used)
        this.rwy_arr = null; // Arrival Runway (to use, currently using, or used)
        this.approachOffset = 0; // Distance laterally from the approach path
        this.approachDistance = 0; // Distance longitudinally from the threshold
        this.radial = 0; // Angle from airport center to aircraft
        this.distance = 0; //
        this.destination = null; // Destination they're flying to
        this.trend = 0; // Indicator of descent/level/climb (1, 0, or 1)
        this.history = []; // Array of previous positions
        this.restricted = { list: [] };
        this.notice = false; // Whether aircraft
        this.warning = false; //
        this.hit = false; // Whether aircraft has crashed
        this.taxi_next = false; //
        this.taxi_start = 0; //
        this.taxi_time = 3; // Time spent taxiing to the runway. *NOTE* this should be INCREASED to around 60 once the taxi vs LUAW issue is resolved (#406)
        this.rules = FLIGHT_RULES.IFR; // Either IFR or VFR (Instrument/Visual Flight Rules)
        this.inside_ctr = false; // Inside ATC Airspace
        this.datablockDir = -1; // Direction the data block points (-1 means to ignore)
        this.conflicts = {}; // List of aircraft that MAY be in conflict (bounding box)
        this.terrain_ranges = false;
        // FIXME: change name, and update refs in `InputController`. perhaps change to be a ref to the AircraftStripView class instead of directly accessing the html?
        this.aircraftStripView = null;
        this.$html = null;

        this.$strips = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.STRIPS);
        /* eslint-enable multi-spaces*/

        // Set to true when simulating future movements of the aircraft
        // Should be checked before updating global state such as score
        // or HTML.
        this.projected = false;
        this.position_history = [];

        this.category = options.category; // 'arrival' or 'departure'
        this.mode = _aircraftConstants.FLIGHT_MODES.CRUISE;

        /*
         * the following diagram illustrates all allowed mode transitions:
         *
         * apron -> taxi -> waiting -> takeoff -> cruise <-> landing
         *   ^                                       ^
         *   |                                       |
         * new planes with                      new planes with
         * category 'departure'                 category 'arrival'
         */

        // Initialize the FMS
        this.fms = new _AircraftFlightManagementSystem2.default({
            aircraft: this,
            model: options.model
        });

        // target represents what the pilot makes of the tower's commands. It is
        // most important when the plane is in a 'guided' situation, that is it is
        // not given a heading directly, but has a fix or is following an ILS path
        this.target = {
            heading: null,
            turn: null,
            altitude: 0,
            expedite: false,
            speed: 0
        };

        this.emergency = {};
        this.takeoffTime = options.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL ? window.gameController.game_time() : null;

        this.buildCurrentTerrainRanges();
        this.buildRestrictedAreaLinks();
        this.assignInitialRunway(options);
        this.parse(options);
        this.updateFmsAfterInitialLoad(options);
        this.createStrip();
        this.updateStrip();
    }

    /**
     * @for AircraftInstanceModel
     * @method buildCurrentTerrainRanges
     */


    _createClass(Aircraft, [{
        key: 'buildCurrentTerrainRanges',
        value: function buildCurrentTerrainRanges() {
            var _this = this;

            var terrain = (0, _get3.default)(prop, 'airport.current.terrain', null);

            if (!terrain) {
                return;
            }

            this.terrain_ranges = {};
            this.terrain_level = 0;

            (0, _forEach3.default)(terrain, function (terrainRange, k) {
                _this.terrain_ranges[k] = {};

                (0, _forEach3.default)(terrainRange, function (range, j) {
                    _this.terrain_ranges[k][j] = Infinity;
                });
            });
        }

        /**
         * Set up links to restricted areas
         *
         * @for AircraftInstanceModel
         * @method buildRestrictedAreaLinks
         */

    }, {
        key: 'buildRestrictedAreaLinks',
        value: function buildRestrictedAreaLinks() {
            var _this2 = this;

            var restrictedAreas = prop.airport.current.restricted_areas;

            (0, _forEach3.default)(restrictedAreas, function (area) {
                _this2.restricted.list.push({
                    data: area,
                    range: null,
                    inside: false
                });
            });
        }

        /**
         * Initial Runway Assignment
         *
         * @for AircraftInstanceModel
         * @method assignInitialRunway
         * @param options {object}
         */

    }, {
        key: 'assignInitialRunway',
        value: function assignInitialRunway(options) {
            if (options.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL) {
                this.setArrivalRunway(window.airportController.airport_get().runway);
            } else if (options.category === _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE) {
                this.setDepartureRunway(window.airportController.airport_get().runway);
            }
        }
    }, {
        key: 'parse',
        value: function parse(data) {
            this.position = (0, _get3.default)(data, 'position', this.position);
            this.model = (0, _get3.default)(data, 'model', this.model);
            this.airline = (0, _get3.default)(data, 'airline', this.airline);
            this.callsign = (0, _get3.default)(data, 'callsign', this.callsign);
            this.category = (0, _get3.default)(data, 'category', this.category);
            this.heading = (0, _get3.default)(data, 'heading', this.heading);
            this.altitude = (0, _get3.default)(data, 'altitude', this.altitude);
            this.speed = (0, _get3.default)(data, 'speed', this.speed);
        }
    }, {
        key: 'updateFmsAfterInitialLoad',
        value: function updateFmsAfterInitialLoad(data) {
            if (this.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL) {
                if (data.waypoints.length > 0) {
                    this.setArrivalWaypoints(data.waypoints);
                }

                this.destination = data.destination;
                this.setArrivalRunway(window.airportController.airport_get(this.destination).runway);
            } else if (this.category === _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE) {
                var airport = window.airportController.airport_get();
                this.mode = _aircraftConstants.FLIGHT_MODES.APRON;
                this.destination = data.destination;
                this.setDepartureRunway(airport.runway);
                this.altitude = airport.position.elevation;
                this.speed = 0;
            }

            // TODO: combine these two to asingle constant
            if (data.heading) {
                this.fms.setCurrent({ heading: data.heading });
            }

            if (data.altitude) {
                this.fms.setCurrent({ altitude: data.altitude });
            }

            var speed = (0, _get3.default)(data, 'speed', this.model.speed.cruise);
            this.fms.setCurrent({ speed: speed });

            if (data.route) {
                var route = this.fms.formatRoute(data.route);

                this.fms.customRoute(route, true);
                this.fms.descendViaSTAR();
            }

            if (data.nextFix) {
                this.fms.skipToFix(data.nextFix);
            }
        }
    }, {
        key: 'setArrivalWaypoints',
        value: function setArrivalWaypoints(waypoints) {
            // add arrival fixes to fms
            for (var i = 0; i < waypoints.length; i++) {
                this.fms.appendLeg({
                    type: 'fix',
                    route: waypoints[i].fix
                });
            }

            // TODO: this could be another class method for FMS
            if (this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.HEADING) {
                // aim aircraft at airport
                this.fms.setCurrent({
                    heading: (0, _vector.vradial)(this.position) + Math.PI
                });
            }

            if (this.fms.legs.length > 0) {
                // go to the first fix!
                this.fms.nextWaypoint();
            }
        }
    }, {
        key: 'setArrivalRunway',
        value: function setArrivalRunway(rwy) {
            this.rwy_arr = rwy;

            // Update the assigned STAR to use the fixes for the specified runway, if they exist
        }
    }, {
        key: 'setDepartureRunway',
        value: function setDepartureRunway(rwy) {
            this.rwy_dep = rwy;

            // Update the assigned SID to use the portion for the new runway
            var leg = this.fms.currentLeg;

            // TODO: this should return early
            // TODO: use existing enumeration for `sid`
            if (leg.type === 'sid') {
                var a = (0, _map3.default)(leg.waypoints, function (v) {
                    return v.altitude;
                });
                var cvs = !a.every(function (v) {
                    return v === window.airportController.airport_get().initial_alt;
                });
                this.fms.followSID(leg.route.routeCode);

                if (cvs) {
                    this.fms.climbViaSID();
                }
            }
        }
    }, {
        key: 'cleanup',
        value: function cleanup() {
            this.$html.remove();
        }

        /**
         * Create the aircraft's flight strip and add to strip bay
         */

    }, {
        key: 'createStrip',
        value: function createStrip() {
            this.aircraftStripView = new _AircraftStripView2.default(this.getCallsign(), this);

            this.$html = this.aircraftStripView.$element;
            // Add the strip to the html
            var scrollPos = this.$strips.scrollTop();
            this.$strips.prepend(this.aircraftStripView.$element);
            // shift scroll down one strip's height
            this.$strips.scrollTop(scrollPos + this.aircraftStripView.height);

            // Determine whether or not to show the strip in our bay
            if (this.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL) {
                this.aircraftStripView.hide();
            }

            if (this.category === _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE) {
                // TODO: does this have anything to do with the aircraft strip? if not this should live somewhere else.
                this.inside_ctr = true;
            }
        }

        // Called when the aircraft crosses the center boundary (ie, leaving our airspace)
        /**
         * @for AircraftInstanceModel
         * @method crossBoundary
         * @param inbound {}
         */

    }, {
        key: 'crossBoundary',
        value: function crossBoundary(inbound) {
            this.inside_ctr = inbound;

            if (this.projected) {
                return;
            }

            // Crossing into the center
            if (inbound) {
                this.showStrip();
                this.callUp();
            } else {
                // leaving airspace
                this.onAirspaceExit();
            }
        }

        /**
         * @for AircraftInstanceModel
         * @method onAirspaceExit
         */

    }, {
        key: 'onAirspaceExit',
        value: function onAirspaceExit() {
            if (this.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL) {
                this.arrivalExit();
            }

            // Leaving the facility's airspace
            this.hideStrip();

            // TODO: is this supposed to be `typeof === 'number'` or is destination a literal string 'number' here?
            if (this.destination === 'number') {
                // an aircraft was given a radial  clearance
                if (this.isHeadingInsideDepartureWindow()) {
                    this.radioCall('switching to center, good day', 'dep');
                    window.gameController.events_recordNew(_GameController.GAME_EVENTS.DEPARTURE);
                } else {
                    this.radioCall('leaving radar coverage outside departure window', 'dep', true);
                    window.gameController.events_recordNew(_GameController.GAME_EVENTS.NOT_CLEARED_ON_ROUTE);
                }
            } else {
                // following a Standard Instrument Departure procedure
                // Find the desired SID exitPoint
                var exit = void 0;

                // TODO: if we just need the last fix in the list, why loop through all the legs?
                (0, _forEach3.default)(this.fms.legs, function (leg) {
                    if (leg.type === 'sid') {
                        // TODO: use lodash `_last()` here
                        exit = leg.waypoints[leg.waypoints.length - 1].fix;
                        return;
                    }
                });

                // Verify aircraft was cleared to departure fix
                var ok = this.fms.hasWaypoint(exit);

                if (ok) {
                    this.radioCall('switching to center, good day', 'dep');
                    window.gameController.events_recordNew(_GameController.GAME_EVENTS.DEPARTURE);
                } else {
                    // TODO: this is a temporary fix for `release/3.0.0`. this will need to be refactored
                    var fmsDestination = this.fms.fp.route[1].indexOf('.') !== -1 ? this.fms.fp.route[1].split('.')[1] : this.fms.fp.route[1];

                    // TODO: add helper method to FMS class for this
                    this.radioCall('leaving radar coverage without being cleared to ' + fmsDestination, 'dep', true);
                    window.gameController.events_recordNew(_GameController.GAME_EVENTS.NOT_CLEARED_ON_ROUTE);
                }
            }

            this.fms.setCurrent({
                altitude: this.fms.fp.altitude,
                speed: this.model.speed.cruise
            });
        }

        /**
         * An arriving aircraft is exiting the airpsace
         *
         * @for AircraftInstanceModel
         * @method arrivalExit
         */

    }, {
        key: 'arrivalExit',
        value: function arrivalExit() {
            this.radioCall('leaving radar coverage as arrival', 'app', true);
            window.gameController.events_recordNew(_GameController.GAME_EVENTS.AIRSPACE_BUST);
        }

        /**
         * Is an aircraft's current heading within a specific range
         *
         * @for AircraftInstanceModel
         * @method isHeadingInsideDepartureWindow
         */

    }, {
        key: 'isHeadingInsideDepartureWindow',
        value: function isHeadingInsideDepartureWindow() {
            // TODO: enumerate the magic number
            // Within 5 degrees of destination heading
            return (0, _core.abs)(this.radial - this.destination) < 0.08726;
        }

        /**
         * @for AircraftInstanceModel
         * @method matchCallsign
         * @param callsign {string}
         */

    }, {
        key: 'matchCallsign',
        value: function matchCallsign(callsignToMatch) {
            if (callsignToMatch === '*') {
                return true;
            }

            return (0, _isEqual3.default)(callsignToMatch.toUpperCase(), this.getCallsign());
        }

        // TODO: this could be a getter
        /**
         * @for AircraftInstanceModel
         * @method getCallsign
         * @return {string}
         */

    }, {
        key: 'getCallsign',
        value: function getCallsign() {
            return (this.getAirline().icao + this.callsign).toUpperCase();
        }

        // TODO: this could be a getter
        /**
         * @for AircraftInstanceModel
         * @method getAirline
         * @return {string}
         */

    }, {
        key: 'getAirline',
        value: function getAirline() {
            return window.airlineController.airline_get(this.airline);
        }

        /**
         * @for AircraftInstanceModel
         * @method getRadioCallsign
         * @param condensed
         */

    }, {
        key: 'getRadioCallsign',
        value: function getRadioCallsign(condensed) {
            var heavy = '';

            if (this.model.weightclass === 'H') {
                heavy = ' heavy';
            }

            if (this.model.weightclass === 'U') {
                heavy = ' super';
            }

            var callsign = this.callsign;
            if (condensed) {
                var length = 2;
                callsign = callsign.substr(callsign.length - length);
            }

            var cs = window.airlineController.airline_get(this.airline).callsign;

            if (cs === 'November') {
                cs += ' ' + (0, _radioUtilities.radio_spellOut)(callsign) + ' ' + heavy;
            } else {
                cs += ' ' + (0, _radioUtilities.groupNumbers)(callsign, this.airline) + ' ' + heavy;
            }

            return cs;
        }

        /**
         * @for AircraftInstanceModel
         * @method getClimbRate
         * @return {number}
         */

    }, {
        key: 'getClimbRate',
        value: function getClimbRate() {
            var altitude = this.altitude;
            var rate = this.model.rate.climb;
            var ceiling = this.model.ceiling;
            var serviceCeilingClimbRate = void 0;
            var cr_uncorr = void 0;
            var cr_current = void 0;

            if (this.model.engines.type === 'J') {
                serviceCeilingClimbRate = 500;
            } else {
                serviceCeilingClimbRate = 100;
            }

            // TODO: enumerate the magic number
            // in troposphere
            if (this.altitude < 36152) {
                // TODO: break this assignemnt up into smaller parts and holy magic numbers! enumerate the magic numbers
                cr_uncorr = rate * 420.7 * (1.232 * Math.pow((518.6 - 0.00356 * altitude) / 518.6, 5.256) / (518.6 - 0.00356 * altitude));
                cr_current = cr_uncorr - altitude / ceiling * cr_uncorr + altitude / ceiling * serviceCeilingClimbRate;
            } else {
                // in lower stratosphere
                // re-do for lower stratosphere
                // Reference: https://www.grc.nasa.gov/www/k-12/rocket/atmos.html
                // also recommend using graphing calc from desmos.com
                return this.model.rate.climb; // <-- NOT VALID! Just a placeholder!
            }

            return cr_current;
        }

        /**
         * @for AircraftInstanceModel
         * @method hideStrip
         */

    }, {
        key: 'hideStrip',
        value: function hideStrip() {
            this.$html.hide(600);
        }

        // TODO: move aircraftCommands to a new class
        /**
         * @for AircraftInstanceModel
         * @method runCommands
         * @param commands
         */

    }, {
        key: 'runCommands',
        value: function runCommands(commands) {
            if (!this.inside_ctr) {
                return true;
            }

            var response = [];
            var response_end = '';
            var deferred = [];

            for (var i = 0; i < commands.length; i++) {
                var command = commands[i][0];
                var args = commands[i].splice(1);

                if (command === _aircraftConstants.FLIGHT_MODES.TAKEOFF) {
                    deferred.push([command, args]);
                    continue;
                }

                var retval = this.run(command, args);

                if (retval) {
                    if (!(0, _has3.default)(retval[1], 'log') || !(0, _has3.default)(retval[1], 'say')) {
                        // TODO: reassigning a value using itself is dangerous. this should be re-wroked
                        retval = [retval[0], {
                            log: retval[1],
                            say: retval[1]
                        }];
                    }

                    response.push(retval[1]);

                    if (retval[2]) {
                        response_end = retval[2];
                    }
                }
            }

            for (var _i = 0; _i < deferred.length; _i += 1) {
                var _command = deferred[_i][0];
                var _args = deferred[_i][1];
                var _retval = this.run(_command, _args);

                if (_retval) {
                    // TODO: fix the logic here this very purposly using `!=`. length is not an object and thus,
                    // never null but by using coercion it evaluates to falsey if its not an array
                    // true if array, and not log/say object
                    if (_retval[1].length != null) {
                        // make into log/say object
                        _retval[1] = {
                            say: _retval[1],
                            log: _retval[1]
                        };
                    }

                    response.push(_retval[1]);
                }
            }

            if (commands.length === 0) {
                response = [{
                    say: 'not understood',
                    log: 'not understood'
                }];
                response_end = 'say again';
            }

            if (response.length >= 1) {
                if (response_end) {
                    response_end = ', ' + response_end;
                }

                var r_log = (0, _map3.default)(response, function (r) {
                    return r.log;
                }).join(', ');
                var r_say = (0, _map3.default)(response, function (r) {
                    return r.say;
                }).join(', ');

                window.uiController.ui_log(this.getCallsign() + ', ' + r_log + ' ' + response_end);
                (0, _speech.speech_say)([{ type: 'callsign', content: this }, { type: 'text', content: r_say + ' ' + response_end }]);
            }

            this.updateStrip();

            return true;
        }

        /**
         * @for AircraftInstanceModel
         * @method run
         * @param command
         * @param data
         * @return {function}
         */

    }, {
        key: 'run',
        value: function run(command, data) {
            var call_func = void 0;

            if (COMMANDS[command]) {
                call_func = COMMANDS[command];
            }

            if (!call_func) {
                return ['fail', 'not understood'];
            }

            return this[call_func](data);
        }

        /**
         * @for AircraftInstanceModel
         * @method runHeading
         * @param data
         */

    }, {
        key: 'runHeading',
        value: function runHeading(data) {
            var airport = window.airportController.airport_get();
            var direction = data[0];
            var heading = data[1];
            var incremental = data[2];
            var amount = 0;
            var instruction = void 0;

            if ((0, _isNaN3.default)(heading)) {
                return ['fail', 'heading not understood'];
            }

            if (incremental) {
                amount = heading;

                if (direction === 'left') {
                    heading = (0, _unitConverters.radiansToDegrees)(this.heading) - amount;
                } else if (direction === 'right') {
                    heading = (0, _unitConverters.radiansToDegrees)(this.heading) + amount;
                }
            }

            // TODO: this probably shouldn't be the AircraftInstanceModel's job. this logic should belong somewhere else.
            // Update the FMS
            var wp = this.fms.currentWaypoint;
            var leg = this.fms.currentLeg;
            var f = this.fms.following;

            if (wp.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.RWY) {
                this.cancelLanding();
            }

            // already being vectored or holding. Will now just change the assigned heading.
            if (wp.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.HEADING) {
                this.fms.setCurrent({
                    altitude: wp.altitude,
                    navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HEADING,
                    heading: (0, _unitConverters.degreesToRadians)(heading),
                    speed: wp.speed,
                    turn: direction,
                    hold: false
                });
            } else if (wp.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.HOLD) {
                // in hold. Should leave the hold, and add leg for vectors
                var index = this.fms.current[0] + 1;
                var waypointToAdd = new _Waypoint2.default({
                    altitude: wp.altitude,
                    navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HEADING,
                    heading: (0, _unitConverters.degreesToRadians)(heading),
                    speed: wp.speed,
                    turn: direction,
                    hold: false
                }, airport);

                // add new Leg after hold leg
                this.fms.insertLeg({
                    firstIndex: index,
                    waypoints: [waypointToAdd]
                });

                // move from hold leg to vector leg.
                this.fms.nextWaypoint();
            } else if (f.sid || f.star || f.awy) {
                var _waypointToAdd = new _Waypoint2.default({
                    altitude: wp.altitude,
                    navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HEADING,
                    heading: (0, _unitConverters.degreesToRadians)(heading),
                    speed: wp.speed,
                    turn: direction,
                    hold: false
                }, airport);

                // TODO: this should be an FMS class method that accepts a new `waypointToAdd`
                // insert wp with heading at current position within the already active leg
                leg.waypoints.splice(this.fms.current[1], 0, _waypointToAdd);
            } else if (leg.route !== '[radar vectors]') {
                // needs new leg added
                if (this.fms.atLastWaypoint()) {
                    var _waypointToAdd2 = new _Waypoint2.default({
                        altitude: wp.altitude,
                        navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HEADING,
                        heading: (0, _unitConverters.degreesToRadians)(heading),
                        speed: wp.speed,
                        turn: direction,
                        hold: false
                    }, airport);

                    this.fms.appendLeg({
                        waypoints: [_waypointToAdd2]
                    });

                    this.fms.nextLeg();
                } else {
                    var _waypointToAdd3 = new _Waypoint2.default({
                        altitude: wp.altitude,
                        navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HEADING,
                        heading: (0, _unitConverters.degreesToRadians)(heading),
                        speed: wp.speed,
                        turn: direction,
                        hold: false
                    }, airport);

                    this.fms.insertLegHere({
                        waypoints: [_waypointToAdd3]
                    });
                }
            }

            wp = this.fms.currentWaypoint; // update 'wp'

            // Construct the readback
            instruction = 'fly heading';
            if (direction) {
                instruction = 'turn ' + direction + ' heading';
            }

            var readback = {};
            readback.log = instruction + ' ' + (0, _unitConverters.heading_to_string)(wp.heading);
            readback.say = instruction + ' ' + (0, _radioUtilities.radio_heading)((0, _unitConverters.heading_to_string)(wp.heading));

            if (incremental) {
                readback.log = 'turn ' + amount + ' degrees ' + direction;
                readback.say = 'turn ' + (0, _radioUtilities.groupNumbers)(amount) + ' degrees ' + direction;
            }

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runAltitude
         * @param data
         */

    }, {
        key: 'runAltitude',
        value: function runAltitude(data) {
            var altitude = data[0];
            var expedite = data[1];
            var airport = window.airportController.airport_get();
            var radioTrendAltitude = (0, _radioUtilities.radio_trend)('altitude', this.altitude, this.fms.altitudeForCurrentWaypoint());
            var currentWaypointRadioAltitude = (0, _radioUtilities.radio_altitude)(this.fms.altitudeForCurrentWaypoint());

            if (altitude == null || isNaN(altitude)) {
                // FIXME: move this to it's own command. if expedite can be passed as a sole command it should be its own command
                if (expedite) {
                    this.fms.setCurrent({ expedite: true });

                    return ['ok', radioTrendAltitude + ' ' + this.fms.altitudeForCurrentWaypoint() + ' expedite'];
                }

                return ['fail', 'altitude not understood'];
            }

            if (this.mode === _aircraftConstants.FLIGHT_MODES.LANDING) {
                this.cancelLanding();
            }

            var ceiling = airport.ctr_ceiling;
            if (window.gameController.game.option.get('softCeiling') === 'yes') {
                ceiling += 1000;
            }

            this.fms.setAll({
                // TODO: enumerate the magic numbers
                altitude: (0, _core.clamp)((0, _core.round)(airport.elevation / 100) * 100 + 1000, altitude, ceiling),
                expedite: expedite
            });

            var isExpeditingString = '';
            if (expedite) {
                isExpeditingString = 'and expedite';
            }

            var readback = {
                log: radioTrendAltitude + ' ' + this.fms.altitudeForCurrentWaypoint() + ' ' + isExpeditingString,
                say: radioTrendAltitude + ' ' + currentWaypointRadioAltitude + ' ' + isExpeditingString
            };

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runClearedAsFiled
         * @return {array}
         */

    }, {
        key: 'runClearedAsFiled',
        value: function runClearedAsFiled() {
            if (!this.runSID([this.destination])) {
                return [true, 'unable to clear as filed'];
            }

            var airport = window.airportController.airport_get();

            var _airport$sidCollectio = airport.sidCollection.findRouteByIcao(this.destination),
                procedureName = _airport$sidCollectio.name;

            var readback = {};

            readback.log = 'cleared to destination via the ' + this.destination + ' departure, then as filed. Climb and ' + ('maintain ' + airport.initial_alt + ', expect ' + this.fms.fp.altitude + ' 10 minutes after departure ');
            readback.say = 'cleared to destination via the ' + procedureName + ' ' + ('departure, then as filed. Climb and maintain ' + (0, _radioUtilities.radio_altitude)(airport.initial_alt) + ', ') + ('expect ' + (0, _radioUtilities.radio_altitude)(this.fms.fp.altitude) + ', ' + (0, _radioUtilities.radio_spellOut)('10') + ' minutes after departure\'');

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runClimbViaSID
         */

    }, {
        key: 'runClimbViaSID',
        value: function runClimbViaSID() {
            if (this.fms.currentLeg.type !== _aircraftConstants.FP_LEG_TYPE.SID || !this.fms.climbViaSID()) {
                var isWarning = true;

                window.uiController.ui_log(this.getCallsign() + ' unable to climb via SID', isWarning);

                return;
            }

            var airport = window.airportController.airport_get();

            var _airport$sidCollectio2 = airport.sidCollection.findRouteByIcao(this.fms.currentLeg.route.procedure),
                procedureName = _airport$sidCollectio2.name;

            var readback = {
                log: 'climb via the ' + this.fms.currentLeg.route.procedure + ' departure',
                say: 'climb via the ' + procedureName + ' departure'
            };

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runDescendViaSTAR
         * @param data
         * @return {boolean|undefined}
         */

    }, {
        key: 'runDescendViaSTAR',
        value: function runDescendViaSTAR() {
            if (!this.fms.descendViaSTAR() || !this.fms.following.star) {
                var isWarning = true;
                window.uiController.ui_log(this.getCallsign() + ', unable to descend via STAR', isWarning);

                return;
            }

            var airport = window.airportController.airport_get();

            var _airport$starCollecti = airport.starCollection.findRouteByIcao(this.fms.currentLeg.route.procedure),
                procedureName = _airport$starCollecti.name;

            var readback = {
                log: 'descend via the ' + this.fms.following.star + ' arrival',
                say: 'descend via the ' + procedureName + ' arrival'
            };

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runSpeed
         * @param data
         */

    }, {
        key: 'runSpeed',
        value: function runSpeed(data) {
            var speed = data[0];

            if ((0, _isNaN3.default)(speed)) {
                return ['fail', 'speed not understood'];
            }

            var clampedSpeed = (0, _core.clamp)(this.model.speed.min, speed, this.model.speed.max);
            this.fms.setAll({ speed: clampedSpeed });

            var radioTrendSpeed = (0, _radioUtilities.radio_trend)('speed', this.speed, this.fms.currentWaypoint.speed);
            var readback = {
                log: radioTrendSpeed + ' ' + this.fms.currentWaypoint.speed,
                say: radioTrendSpeed + ' ' + (0, _radioUtilities.radio_spellOut)(this.fms.currentWaypoint.speed)
            };

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runHold
         * @param data
         */

    }, {
        key: 'runHold',
        value: function runHold(data) {
            var airport = window.airportController.airport_get();
            var dirTurns = data[0];
            var legLength = data[1];
            var holdFix = data[2];
            var holdFixLocation = null;
            var inboundHdg = void 0;
            // let inboundDir;

            // TODO: this might be better handled from within the parser
            if (dirTurns == null) {
                // standard for holding patterns is right-turns
                dirTurns = 'right';
            }

            // TODO: this might be better handled from within the parser
            if (legLength == null) {
                legLength = '1min';
            }

            // TODO: simplify this nested if.
            if (holdFix !== null) {
                holdFix = holdFix.toUpperCase();
                holdFixLocation = airport.getFixPosition(holdFix);

                if (!holdFixLocation) {
                    return ['fail', 'unable to find fix ' + holdFix];
                }
            }

            if (this.isTakeoff() && !holdFix) {
                return ['fail', 'where do you want us to hold?'];
            }

            // Determine whether or not to enter the hold from present position
            if (holdFix) {
                // holding over a specific fix (currently only able to do so on inbound course)
                inboundHdg = (0, _vector.vradial)((0, _vector.vsub)(this.position, holdFixLocation));

                if (holdFix !== this.fms.currentWaypoint.fix) {
                    // not yet headed to the hold fix
                    this.fms.insertLegHere({
                        type: 'fix',
                        route: '[GPS/RNAV]',
                        waypoints: [
                        // proceed direct to holding fix
                        new _Waypoint2.default({
                            fix: holdFix,
                            altitude: this.fms.altitudeForCurrentWaypoint(),
                            speed: this.fms.currentWaypoint.speed
                        }, airport),
                        // then enter the hold
                        new _Waypoint2.default({
                            navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HOLD,
                            speed: this.fms.currentWaypoint.speed,
                            altitude: this.fms.altitudeForCurrentWaypoint(),
                            fix: null,
                            hold: {
                                fixName: holdFix,
                                fixPos: holdFixLocation,
                                dirTurns: dirTurns,
                                legLength: legLength,
                                inboundHdg: inboundHdg,
                                timer: null
                            }
                        }, airport)]
                    });
                } else {
                    // TODO: this should be a `Waypoint`
                    // already currently going to the hold fix
                    // Force the initial turn to outbound heading when entering the hold
                    this.fms.appendWaypoint({
                        navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HOLD,
                        speed: this.fms.currentWaypoint.speed,
                        altitude: this.fms.altitudeForCurrentWaypoint(),
                        fix: null,
                        hold: {
                            fixName: holdFix,
                            fixPos: holdFixLocation,
                            dirTurns: dirTurns,
                            legLength: legLength,
                            inboundHdg: inboundHdg,
                            timer: null
                        }
                    });
                }
            } else {
                // holding over present position (currently only able to do so on present course)
                holdFixLocation = this.position; // make a/c hold over their present position
                inboundHdg = this.heading;

                // TODO: these aren't `Waypoints` and they should be
                this.fms.insertLegHere({
                    type: 'fix',
                    waypoints: [{ // document the present position as the 'fix' we're holding over
                        navmode: _aircraftConstants.WAYPOINT_NAV_MODE.FIX,
                        fix: '[custom]',
                        location: holdFixLocation,
                        altitude: this.fms.altitudeForCurrentWaypoint(),
                        speed: this.fms.currentWaypoint.speed
                    }, { // Force the initial turn to outbound heading when entering the hold
                        navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HOLD,
                        speed: this.fms.currentWaypoint.speed,
                        altitude: this.fms.altitudeForCurrentWaypoint(),
                        fix: null,
                        hold: {
                            fixName: holdFix,
                            fixPos: holdFixLocation,
                            dirTurns: dirTurns,
                            legLength: legLength,
                            inboundHdg: inboundHdg,
                            timer: null
                        }
                    }]
                });
            }

            // TODO: abstract to method `.getInboundCardinalDirection()`
            var inboundDir = _radioUtilities.radio_cardinalDir_names[(0, _radioUtilities.getCardinalDirection)((0, _circle.radians_normalize)(inboundHdg + Math.PI)).toLowerCase()];

            if (holdFix) {
                return ['ok', 'proceed direct ' + holdFix + ' and hold inbound, ' + dirTurns + ' turns, ' + legLength + ' legs'];
            }

            return ['ok', 'hold ' + inboundDir + ' of present position, ' + dirTurns + ' turns, ' + legLength + ' legs'];
        }

        /**
         * @for AircraftInstanceModel
         * @method runDirect
         * @param data
         */

    }, {
        key: 'runDirect',
        value: function runDirect(data) {
            var fixname = data[0].toUpperCase();
            // TODO replace with FixCollection
            var fix = window.airportController.airport_get().getFixPosition(fixname);

            if (!fix) {
                return ['fail', 'unable to find fix called ' + fixname];
            }

            // remove intermediate fixes
            if (this.mode === _aircraftConstants.FLIGHT_MODES.TAKEOFF) {
                this.fms.skipToFix(fixname);
            } else if (!this.fms.skipToFix(fixname)) {
                return ['fail', fixname + ' is not in our flightplan'];
            }

            return ['ok', 'proceed direct ' + fixname];
        }
    }, {
        key: 'runFix',
        value: function runFix(data) {
            var last_fix = void 0;
            var fail = void 0;
            var fixes = (0, _map3.default)(data, function (fixname) {
                // TODO: this may beed to be the FixCollection
                var fix = window.airportController.airport_get().getFixPosition(fixname);

                if (!fix) {
                    fail = ['fail', 'unable to find fix called ' + fixname];

                    return;
                }

                // to avoid repetition, compare name with the previous fix
                if (fixname === last_fix) {
                    return;
                }

                last_fix = fixname;

                return fixname;
            });

            if (fail) {
                return fail;
            }

            for (var i = 0; i < fixes.length; i++) {
                // FIXME: use enumerated constant for type
                this.fms.insertLegHere({ type: 'fix', route: fixes[i] });
            }

            if (this.mode !== _aircraftConstants.FLIGHT_MODES.WAITING && this.mode !== _aircraftConstants.FLIGHT_MODES.TAKEOFF && this.mode !== _aircraftConstants.FLIGHT_MODES.APRON && this.mode !== _aircraftConstants.FLIGHT_MODES.TAXI) {
                this.cancelLanding();
            }

            return ['ok', 'proceed direct ' + fixes.join(', ')];
        }

        /**
         * @for AircraftInstanceModel
         * @method runFlyPresentHeading
         * @param data
         */

    }, {
        key: 'runFlyPresentHeading',
        value: function runFlyPresentHeading(data) {
            this.cancelFix();
            this.runHeading([null, (0, _unitConverters.radiansToDegrees)(this.heading)]);

            return ['ok', 'fly present heading'];
        }

        /**
         * @for AircraftInstanceModel
         * @method runSayRoute
         * @param data
         */

    }, {
        key: 'runSayRoute',
        value: function runSayRoute(data) {
            return ['ok', {
                log: 'route: ' + this.fms.fp.route.join(' '),
                say: 'here\'s our route'
            }];
        }

        /**
         * @for AircraftInstanceModel
         * @method runSID
         */

    }, {
        key: 'runSID',
        value: function runSID(data) {
            var airport = window.airportController.airport_get();
            var sidCollection = airport.sidCollection;

            var sidId = data[0];
            var standardRouteModel = sidCollection.findRouteByIcao(sidId);
            var exit = airport.getSIDExitPoint(sidId);
            // TODO: perhaps this should use the `RouteModel`?
            var route = airport.icao + '.' + sidId + '.' + exit;

            if ((0, _isNil3.default)(standardRouteModel)) {
                return ['fail', 'SID name not understood'];
            }

            if (this.category !== _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE) {
                return ['fail', 'unable to fly SID, we are an inbound'];
            }

            if (!this.rwy_dep) {
                this.setDepartureRunway(airportController.airport_get().runway);
            }

            if (!standardRouteModel.hasFixName(this.rwy_dep)) {
                return ['fail', 'unable, the ' + standardRouteModel.name + ' departure not valid from Runway ' + this.rwy_dep];
            }

            // TODO: this is the wrong place for this `.toUpperCase()`
            this.fms.followSID(route.toUpperCase());

            var readback = {
                log: 'cleared to destination via the ' + sidId + ' departure, then as filed',
                say: 'cleared to destination via the ' + standardRouteModel.name + ' departure, then as filed'
            };

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runSTAR
         * @param data {array<string>} a string representation of the STAR, ex: `QUINN.BDEGA2.KSFO`
         */

    }, {
        key: 'runSTAR',
        value: function runSTAR(data) {
            var routeModel = new _RouteModel2.default(data[0]);
            var airport = window.airportController.airport_get();

            var _airport$starCollecti2 = airport.starCollection.findRouteByIcao(routeModel.procedure),
                starName = _airport$starCollecti2.name;

            if (this.category !== _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL) {
                return ['fail', 'unable to fly STAR, we are a departure!'];
            }

            // TODO: the data[0].length check might not be needed. this is covered via the CommandParser when
            // this method runs as the result of a command.
            if (data[0].length === 0 || !airport.starCollection.hasRoute(routeModel.procedure)) {
                return ['fail', 'STAR name not understood'];
            }

            this.fms.followSTAR(routeModel.routeCode);

            // TODO: casing may be an issue here.
            var readback = {
                log: 'cleared to the ' + airport.name + ' via the ' + routeModel.procedure + ' arrival',
                say: 'cleared to the ' + airport.name + ' via the ' + starName + ' arrival'
            };

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runMoveDataBlock
         * @param data
         */

    }, {
        key: 'runMoveDataBlock',
        value: function runMoveDataBlock(dir) {
            // TODO: what do all these numbers mean?
            var positions = { 8: 360, 9: 45, 6: 90, 3: 135, 2: 180, 1: 225, 4: 270, 7: 315, 5: 'ctr' };

            if (!(0, _has3.default)(positions, dir[0])) {
                return;
            }

            this.datablockDir = positions[dir[0]];
        }

        /**
         * Adds a new Leg to fms with a user specified route
         * Note: See notes on 'runReroute' for how to format input for this command
         *
         * @for AircraftInstanceModel
         * @method runRoute
         * @param data
         */

    }, {
        key: 'runRoute',
        value: function runRoute(data) {
            // capitalize everything
            data = data[0].toUpperCase();
            var worked = true;
            var route = this.fms.formatRoute(data);

            if (worked && route) {
                // Add to fms
                worked = this.fms.customRoute(route, false);
            }

            if (!route || !data || data.indexOf(' ') > -1) {
                worked = false;
            }

            // Build the response
            if (worked) {
                var _readback = {
                    log: 'rerouting to :' + this.fms.fp.route.join(' '),
                    say: 'rerouting as requested'
                };

                return ['ok', _readback];
            }

            var readback = {
                log: 'your route "' + data + '" is invalid!',
                say: 'that route is invalid!'
            };

            return ['fail', readback];
        }

        /**
          * Removes all legs, and replaces them with the specified route
          * Note: Input data needs to be provided with single dots connecting all
          * procedurally-linked points (eg KSFO.OFFSH9.SXC or SGD.V87.MOVER), and
          * all other points that will be simply a fix direct to another fix need
          * to be connected with double-dots (eg HLI..SQS..BERRA..JAN..KJAN)
          *
          * @for AircraftInstanceModel
          * @method runReroute
          * @param data
          */

    }, {
        key: 'runReroute',
        value: function runReroute(data) {
            // TODO: capitalize everything?
            data = data[0].toUpperCase();
            var worked = true;
            var route = this.fms.formatRoute(data);

            if (worked && route) {
                // Reset fms
                worked = this.fms.customRoute(route, true);
            }

            // TODO: what exactly are we checking here?
            if (!route || !data || data.indexOf(' ') > -1) {
                worked = false;
            }

            // Build the response
            if (worked) {
                var _readback2 = {
                    log: 'rerouting to: ' + this.fms.fp.route.join(' '),
                    say: 'rerouting as requested'
                };

                return ['ok', _readback2];
            }

            var readback = {
                log: 'your route "' + data + '" is invalid!',
                say: 'that route is invalid!'
            };

            return ['fail', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runTaxi
         * @param data
         */

    }, {
        key: 'runTaxi',
        value: function runTaxi(data) {
            // TODO: all this if logic should be simplified or abstracted
            if (this.category !== _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE) {
                return ['fail', 'inbound'];
            }

            if (this.mode === _aircraftConstants.FLIGHT_MODES.TAXI) {
                return ['fail', 'already taxiing to ' + (0, _radioUtilities.radio_runway)(this.rwy_dep)];
            }

            if (this.mode === _aircraftConstants.FLIGHT_MODES.WAITING) {
                return ['fail', 'already waiting'];
            }

            if (this.mode !== _aircraftConstants.FLIGHT_MODES.APRON) {
                return ['fail', 'wrong mode'];
            }

            // Set the runway to taxi to
            if (data[0]) {
                if (window.airportController.airport_get().getRunway(data[0].toUpperCase())) {
                    this.setDepartureRunway(data[0].toUpperCase());
                } else {
                    return ['fail', 'no runway ' + data[0].toUpperCase()];
                }
            }

            // Start the taxi
            this.taxi_start = window.gameController.game_time();
            var runway = window.airportController.airport_get().getRunway(this.rwy_dep);

            runway.addQueue(this);
            this.mode = _aircraftConstants.FLIGHT_MODES.TAXI;

            var readback = {
                log: 'taxi to runway ' + runway.name,
                say: 'taxi to runway ' + (0, _radioUtilities.radio_runway)(runway.name)
            };

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runTakeoff
         * @param data
         */

    }, {
        key: 'runTakeoff',
        value: function runTakeoff(data) {
            // TODO: all this if logic should be simplified or abstracted
            if (this.category !== 'departure') {
                return ['fail', 'inbound'];
            }

            if (!this.isOnGround()) {
                return ['fail', 'already airborne'];
            }
            if (this.mode === _aircraftConstants.FLIGHT_MODES.APRON) {
                return ['fail', 'unable, we\'re still in the parking area'];
            }
            if (this.mode === _aircraftConstants.FLIGHT_MODES.TAXI) {
                return ['fail', 'taxi to runway ' + (0, _radioUtilities.radio_runway)(this.rwy_dep) + ' not yet complete'];
            }
            if (this.mode === _aircraftConstants.FLIGHT_MODES.TAKEOFF) {
                // FIXME: this is showing immediately after a to clearance.
                return ['fail', 'already taking off'];
            }

            if (this.fms.altitudeForCurrentWaypoint() <= 0) {
                return ['fail', 'no altitude assigned'];
            }

            var runway = window.airportController.airport_get().getRunway(this.rwy_dep);

            if (runway.removeQueue(this)) {
                this.mode = _aircraftConstants.FLIGHT_MODES.TAKEOFF;
                this.scoreWind('taking off');
                this.takeoffTime = window.gameController.game_time();

                if (this.fms.currentWaypoint.speed == null) {
                    this.fms.setCurrent({ speed: this.model.speed.cruise });
                }

                var wind = window.airportController.airport_get().getWind();
                var wind_dir = (0, _core.round)((0, _unitConverters.radiansToDegrees)(wind.angle));
                var readback = {
                    // TODO: the wind_dir calculation should be abstracted
                    log: 'wind ' + (0, _core.round)(wind_dir / 10) * 10 + ' ' + (0, _core.round)(wind.speed) + ', runway ' + this.rwy_dep + ' , cleared for takeoff',
                    say: 'wind ' + (0, _radioUtilities.radio_spellOut)((0, _core.round)(wind_dir / 10) * 10) + ' at ' + (0, _radioUtilities.radio_spellOut)((0, _core.round)(wind.speed)) + ', runway ' + (0, _radioUtilities.radio_runway)(this.rwy_dep) + ', cleared for takeoff'
                };

                return ['ok', readback];
            }

            var waiting = runway.inQueue(this);

            return ['fail', 'number ' + waiting + ' behind ' + runway.queue[waiting - 1].getRadioCallsign(), ''];
        }
    }, {
        key: 'runLanding',
        value: function runLanding(data) {
            var variant = data[0];
            var runway = window.airportController.airport_get().getRunway(data[1]);

            if (!runway) {
                return ['fail', 'there is no runway ' + (0, _radioUtilities.radio_runway)(data[1])];
            }

            this.setArrivalRunway(data[1].toUpperCase());
            // tell fms to follow ILS approach
            this.fms.followApproach('ils', this.rwy_arr, variant);

            var readback = {
                log: 'cleared ILS runway ' + this.rwy_arr + ' approach',
                say: 'cleared ILS runway ' + (0, _radioUtilities.radio_runway)(this.rwy_arr) + ' approach'
            };

            return ['ok', readback];
        }

        /**
         * @for AircraftInstanceModel
         * @method runAbort
         * @param data
         */

    }, {
        key: 'runAbort',
        value: function runAbort(data) {
            // TODO: these ifs on `mode` should be converted to a switch
            if (this.mode === _aircraftConstants.FLIGHT_MODES.TAXI) {
                this.mode = _aircraftConstants.FLIGHT_MODES.APRON;
                this.taxi_start = 0;

                console.log('aborted taxi to runway');

                var isWarning = true;
                window.uiController.ui_log(this.getCallsign() + ' aborted taxi to runway', isWarning);

                return ['ok', 'taxiing back to terminal'];
            } else if (this.mode === _aircraftConstants.FLIGHT_MODES.WAITING) {
                return ['fail', 'unable to return to the terminal'];
            } else if (this.mode === _aircraftConstants.FLIGHT_MODES.LANDING) {
                this.cancelLanding();

                var readback = {
                    log: 'go around, fly present heading, maintain ' + this.fms.altitudeForCurrentWaypoint(),
                    say: 'go around, fly present heading, maintain ' + (0, _radioUtilities.radio_altitude)(this.fms.altitudeForCurrentWaypoint())
                };

                return ['ok', readback];
            } else if (this.mode === _aircraftConstants.FLIGHT_MODES.CRUISE && this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.RWY) {
                this.cancelLanding();

                var _readback3 = {
                    log: 'cancel approach clearance, fly present heading, maintain ' + this.fms.altitudeForCurrentWaypoint(),
                    say: 'cancel approach clearance, fly present heading, maintain ' + (0, _radioUtilities.radio_altitude)(this.fms.altitudeForCurrentWaypoint())
                };

                return ['ok', _readback3];
            } else if (this.mode === _aircraftConstants.FLIGHT_MODES.CRUISE && this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.FIX) {
                this.cancelFix();

                if (this.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL) {
                    return ['ok', 'fly present heading, vector to final approach course'];
                } else if (this.category === 'departure') {
                    return ['ok', 'fly present heading, vector for entrail spacing'];
                }
            }

            // modes 'apron', 'takeoff', ('cruise' for some navmodes)
            return ['fail', 'unable to abort'];
        }

        // FIXME: is this in use?
        /**
         * @for AircraftInstanceModel
         * @method runDebug
         */

    }, {
        key: 'runDebug',
        value: function runDebug() {
            window.aircraft = this;
            return ['ok', { log: 'in the console, look at the variable &lsquo;aircraft&rsquo;', say: '' }];
        }

        // FIXME: is this in use?
        /**
         * @for AircraftInstanceModel
         * @method runDelete
         */

    }, {
        key: 'runDelete',
        value: function runDelete() {
            window.aircraftController.aircraft_remove(this);
        }

        // TODO: move to `fms.cancelFix()`
        /**
         * @for AircraftInstanceModel
         * @method cancelFix
         */

    }, {
        key: 'cancelFix',
        value: function cancelFix() {
            // TODO: this logic could be simplified. do an early return instead of wrapping the entire function in an if.
            if (this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.FIX) {
                var curr = this.fms.currentWaypoint;

                this.fms.appendLeg({
                    altitude: curr.altitude,
                    navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HEADING,
                    heading: this.heading,
                    speed: curr.speed
                });

                this.fms.nextLeg();
                this.updateStrip();

                return true;
            }

            return false;
        }

        /**
         * @for AircraftInstanceModel
         * @method cancelLanding
         */

    }, {
        key: 'cancelLanding',
        value: function cancelLanding() {
            // TODO: this logic could be simplified. do an early return instead of wrapping the entire function in an if.
            if (this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.RWY) {
                var runway = window.airportController.airport_get().getRunway(this.rwy_arr);

                if (this.mode === _aircraftConstants.FLIGHT_MODES.LANDING) {
                    // TODO: enumerate the magic numbers
                    this.fms.setCurrent({
                        altitude: Math.max(2000, (0, _core.round)(this.altitude / 1000) * 1000),
                        heading: runway.angle
                    });
                }

                this.fms.setCurrent({
                    navmode: _aircraftConstants.WAYPOINT_NAV_MODE.HEADING,
                    runway: null
                });

                this.mode = _aircraftConstants.FLIGHT_MODES.CRUISE;
                this.updateStrip();

                return true;
            }

            this.fms.setCurrent({ runway: null });

            return false;
        }

        // FIXME: is this method still in use?
        /**
         * @for AircraftInstanceModel
         * @method pushHistory
         */

    }, {
        key: 'pushHistory',
        value: function pushHistory() {
            this.history.push([this.position[0], this.position[1]]);

            if (this.history.length > 10) {
                this.history.splice(0, this.history.length - 10);
            }
        }

        /**
         * @for AircraftInstanceModel
         * @method moveForward
         */

    }, {
        key: 'moveForward',
        value: function moveForward() {
            this.mode = _aircraftConstants.FLIGHT_MODES.TAXI;
            this.taxi_next = true;
        }

        /**
         * Aircraft is established on FINAL APPROACH COURSE
         * @for AircraftInstanceModel
         * @method runTakeoff
         */

    }, {
        key: 'isEstablished',
        value: function isEstablished() {
            if (this.mode !== _aircraftConstants.FLIGHT_MODES.LANDING) {
                return false;
            }

            // TODO: why 48m?  whats the significance of that number?
            // 160 feet or 48 meters
            return this.approachOffset <= 0.048;
        }

        /**
         * Checks if the aircraft is inside the airspace of a specified airport
         *
         * @for AircraftInstanceModel
         * @method isInsideAirspace
         * @param  {airport} airport the airport whose airspace we are checking
         * @return {Boolean}
         * @private
         */

    }, {
        key: 'isInsideAirspace',
        value: function isInsideAirspace(airport) {
            var withinAirspaceLateralBoundaries = this.distance <= airport.ctr_radius;
            var withinAirspaceAltitudeRange = this.altitude <= airport.ctr_ceiling;

            if (!(0, _isNil3.default)(airport.perimeter)) {
                // polygonal airspace boundary
                withinAirspaceLateralBoundaries = (0, _vector.point_in_area)(this.position, airport.perimeter);
            }

            return withinAirspaceAltitudeRange && withinAirspaceLateralBoundaries;
        }

        /**
         * Aircraft has "weight-on-wheels" (on the ground)
         * @for AircraftInstanceModel
         * @method isOnGround
         */

    }, {
        key: 'isOnGround',
        value: function isOnGround() {
            var error_allowance_ft = 5;
            var airport = window.airportController.airport_get();
            var runway = airport.getRunway(this.rwy_dep || this.rwy_arr);
            var nearRunwayAltitude = (0, _core.abs)(this.altitude - runway.elevation) < error_allowance_ft;
            var nearAirportAltitude = (0, _core.abs)(this.altitude - airport.position.elevation) < error_allowance_ft;

            return nearRunwayAltitude || nearAirportAltitude;
        }

        /**
         * Aircraft is actively following an instrument approach and is elegible for reduced separation
         *
         * If the game ever distinguishes between ILS/MLS/LAAS
         * approaches and visual/localizer/VOR/etc. this should
         * distinguish between them.  Until then, presume landing is via
         * ILS with appropriate procedures in place.
         *
         * @for AircraftInstanceModel
         * @method runTakeoff
         */

    }, {
        key: 'isPrecisionGuided',
        value: function isPrecisionGuided() {
            return this.mode === _aircraftConstants.FLIGHT_MODES.LANDING;
        }

        /**
         * @for AircraftInstanceModel
         * @method isStopped
         */

    }, {
        key: 'isStopped',
        value: function isStopped() {
            // TODO: enumerate the magic number.
            return this.isOnGround() && this.speed < 5;
        }

        /**
         * @for AircraftInstanceModel
         * @method isTaxiing
         */

    }, {
        key: 'isTaxiing',
        value: function isTaxiing() {
            return this.mode === _aircraftConstants.FLIGHT_MODES.APRON || this.mode === _aircraftConstants.FLIGHT_MODES.TAXI || this.mode === _aircraftConstants.FLIGHT_MODES.WAITING;
        }

        /**
         * @for AircraftInstanceModel
         * @method isTakeoff
         */

    }, {
        key: 'isTakeoff',
        value: function isTakeoff() {
            return this.isTaxiing() || this.mode === _aircraftConstants.FLIGHT_MODES.TAKEOFF;
        }

        // TODO: the logic in this method can be cleaned up and simplified
        /**
         * @for AircraftInstanceModel
         * @method isVisible
         */

    }, {
        key: 'isVisible',
        value: function isVisible() {
            // TODO: this if/else if would be cleaner with just if (this.mode === FLIGHT_MODES.WAITING) {}
            // hide aircraft on twys
            if (this.mode === _aircraftConstants.FLIGHT_MODES.APRON || this.mode === _aircraftConstants.FLIGHT_MODES.TAXI) {
                return false;
            }

            if (this.isTaxiing()) {
                // show only the first aircraft in the takeoff queue
                var runway = window.airportController.airport_get().getRunway(this.rwy_dep);
                var waiting = runway.inQueue(this);

                return this.mode === _aircraftConstants.FLIGHT_MODES.WAITING && waiting === 0;
            }

            return true;
        }

        /**
         * @for AircraftInstanceModel
         * @method getWind
         */

    }, {
        key: 'getWind',
        value: function getWind() {
            var windForRunway = {
                cross: 0,
                head: 0
            };

            if (this.rwy_dep) {
                var airport = window.airportController.airport_get();
                var wind = airport.wind;
                var runway = airport.getRunway(this.rwy_dep);
                var angle = (0, _core.abs)((0, _circle.angle_offset)(runway.angle, wind.angle));

                // TODO: these two bits of math should be abstracted to a helper function
                windForRunway.cross = (0, _core.sin)(angle) * wind.speed;
                windForRunway.head = (0, _core.cos)(angle) * wind.speed;
            }

            return windForRunway;
        }

        /**
         * @for AircraftInstanceModel
         * @method radioCall
         * @param msg {string}
         * @param sectorType {string}
         * @param alert {string}
         */

    }, {
        key: 'radioCall',
        value: function radioCall(msg, sectorType, alert) {
            if (this.projected) {
                return;
            }

            // var is unused
            var call = '';
            var callsign_L = this.getCallsign();
            var callsign_S = this.getRadioCallsign();

            if (sectorType) {
                call += window.airportController.airport_get().radio[sectorType];
            }

            // call += ", " + this.getCallsign() + " " + msg;

            // TODO: quick abstraction, this doesn't belong here.
            var logMessage = function logMessage(callsign) {
                return window.airportController.airport_get().radio[sectorType] + ', ' + callsign + ' ' + msg;
            };

            if (alert) {
                var isWarning = true;
                window.uiController.ui_log(logMessage(callsign_L), isWarning);
            } else {
                window.uiController.ui_log(logMessage(callsign_L));
            }

            (0, _speech.speech_say)([{
                type: 'text',
                content: logMessage(callsign_S)
            }]);
        }

        /**
         * @for AircraftInstanceModel
         * @method callUp
         */

    }, {
        key: 'callUp',
        value: function callUp() {
            var alt_log = void 0;
            var alt_say = void 0;

            if (this.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL) {
                var altdiff = this.altitude - this.fms.altitudeForCurrentWaypoint();
                var alt = (0, _radioUtilities.digits_decimal)(this.altitude, -2);

                if (Math.abs(altdiff) > 200) {
                    if (altdiff > 0) {
                        alt_log = 'descending through ' + alt + ' for ' + this.target.altitude;
                        alt_say = 'descending through ' + (0, _radioUtilities.radio_altitude)(alt) + ' for ' + (0, _radioUtilities.radio_altitude)(this.target.altitude);
                    } else if (altdiff < 0) {
                        alt_log = ' climbing through ' + alt + ' for ' + this.target.altitude;
                        alt_say = ' climbing through ' + (0, _radioUtilities.radio_altitude)(alt) + ' for ' + (0, _radioUtilities.radio_altitude)(this.target.altitude);
                    }
                } else {
                    alt_log = 'at ' + alt;
                    alt_say = 'at ' + (0, _radioUtilities.radio_altitude)(alt);
                }

                window.uiController.ui_log(window.airportController.airport_get().radio.app + ', ' + this.getCallsign() + ' with you ' + alt_log);
                (0, _speech.speech_say)([{ type: 'text', content: window.airportController.airport_get().radio.app + ', ' }, { type: 'callsign', content: this }, { type: 'text', content: 'with you ' + alt_say }]);
            }

            if (this.category === _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE) {
                window.uiController.ui_log(window.airportController.airport_get().radio.twr + ', ' + this.getCallsign() + ', ready to taxi');
                (0, _speech.speech_say)([{ type: 'text', content: window.airportController.airport_get().radio.twr }, { type: 'callsign', content: this }, { type: 'text', content: ', ready to taxi' }]);
            }
        }

        // TODO: This method should be moved elsewhere, since it doesn't really belong to the aircraft itself
        /**
         * @for AircraftInstanceModel
         * @method scoreWind
         * @param action
         */

    }, {
        key: 'scoreWind',
        value: function scoreWind(action) {
            var score = 0;
            var components = this.getWind();
            var isWarning = true;

            // TODO: these two if blocks could be done in a single switch statement
            if (components.cross >= 20) {
                window.gameController.events_recordNew(_GameController.GAME_EVENTS.EXTREME_CROSSWIND_OPERATION);
                window.uiController.ui_log(this.getCallsign() + ' ' + action + ' with major crosswind\'', isWarning);
            } else if (components.cross >= 10) {
                window.gameController.events_recordNew(_GameController.GAME_EVENTS.HIGH_CROSSWIND_OPERATION);
                window.uiController.ui_log(this.getCallsign() + ' ' + action + ' with crosswind\'', isWarning);
            }

            if (components.head <= -10) {
                window.gameController.events_recordNew(_GameController.GAME_EVENTS.EXTREME_TAILWIND_OPERATION);
                window.uiController.ui_log(this.getCallsign() + ' ' + action + ' with major tailwind\'', isWarning);
            } else if (components.head <= -1) {
                window.gameController.events_recordNew(_GameController.GAME_EVENTS.HIGH_TAILWIND_OPERATION);
                window.uiController.ui_log(this.getCallsign() + ' ' + action + ' with tailwind\'', isWarning);
            }

            return score;
        }

        /**
         * @for AircraftInstanceModel
         * @method showStrip
         */

    }, {
        key: 'showStrip',
        value: function showStrip() {
            this.$html.detach();

            var scrollPos = this.$strips.scrollTop();

            this.$strips.prepend(this.$html);
            this.$html.show();
            // TODO enumerate the magic number
            // shift scroll down one strip's height
            this.$strips.scrollTop(scrollPos + 45);
        }

        // TODO: this method needs a lot of love. its much too long with waaay too many nested if/else ifs.
        /**
         * @for AircraftInstanceModel
         * @method updateTarget
         */

    }, {
        key: 'updateTarget',
        value: function updateTarget() {
            var airport = window.airportController.airport_get();
            var runway = null;
            var offset = null;
            var offset_angle = null;
            var glideslope_altitude = null;
            var angle = null;
            var runway_elevation = 0;
            var position = void 0;

            if (this.rwy_arr !== null) {
                runway_elevation = airport.getRunway(this.rwy_arr).elevation;
            }

            if (this.fms.altitudeForCurrentWaypoint() > 0) {
                this.fms.setCurrent({
                    altitude: Math.max(1000, this.fms.altitudeForCurrentWaypoint())
                });
            }

            if (this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.RWY) {
                runway = airport.getRunway(this.rwy_arr);
                offset = (0, _flightMath.getOffset)(this, runway.position, runway.angle);
                offset_angle = (0, _vector.vradial)(offset);
                angle = (0, _circle.radians_normalize)(runway.angle);
                glideslope_altitude = (0, _core.clamp)(runway.elevation, runway.getGlideslopeAltitude(offset[1]), this.altitude);
                var assignedHdg = this.fms.currentWaypoint.heading;
                var localizerRange = runway.ils.enabled ? runway.ils.loc_maxDist : 40;
                this.offset_angle = offset_angle;
                this.approachOffset = (0, _core.abs)(offset[0]);
                this.approachDistance = offset[1];
                this.target.heading = assignedHdg;
                this.target.turn = this.fms.currentWaypoint.turn;
                this.target.altitude = this.fms.currentWaypoint.altitude;
                this.target.speed = this.fms.currentWaypoint.speed;

                // Established on ILS
                if (this.mode === _aircraftConstants.FLIGHT_MODES.LANDING) {
                    // Final Approach Heading Control
                    var severity_of_correction = 25; // controls steepness of heading adjustments during localizer tracking
                    var tgtHdg = angle + offset_angle * -severity_of_correction;
                    var minHdg = angle - (0, _unitConverters.degreesToRadians)(30);
                    var maxHdg = angle + (0, _unitConverters.degreesToRadians)(30);
                    this.target.heading = (0, _core.clamp)(tgtHdg, minHdg, maxHdg);

                    // Final Approach Altitude Control
                    this.target.altitude = Math.min(this.fms.currentWaypoint.altitude, glideslope_altitude);

                    // Final Approach Speed Control
                    if (this.fms.currentWaypoint.speed > 0) {
                        this.fms.setCurrent({ start_speed: this.fms.currentWaypoint.speed });
                    }

                    if (this.isOnGround()) {
                        this.target.altitude = runway.elevation;
                        this.target.speed = 0;
                    } else {
                        var dist_final_app_spd = 3.5; // 3.5km ~= 2nm
                        var dist_assigned_spd = 9.5; // 9.5km ~= 5nm
                        this.target.speed = (0, _core.extrapolate_range_clamp)(dist_final_app_spd, offset[1], dist_assigned_spd, this.model.speed.landing, this.fms.currentWaypoint.start_speed);
                    }

                    // Failed Approach
                    if ((0, _core.abs)(offset[0]) > 0.100) {
                        if (!this.projected) {
                            this.updateStrip();
                            this.cancelLanding();
                            var isWarning = true;
                            window.uiController.ui_log(this.getRadioCallsign() + ' aborting landing, lost ILS', isWarning);
                            (0, _speech.speech_say)([{ type: 'callsign', content: this }, { type: 'text', content: ' going around' }]);
                            window.gameController.events_recordNew(_GameController.GAME_EVENTS.GO_AROUND);
                        }
                    }
                } else if (offset[1] < localizerRange) {
                    // Joining the ILS
                    // Check if aircraft has just become established on the localizer
                    var alignedWithRunway = (0, _core.abs)(offset[0]) < 0.050; // within 50m
                    var onRunwayHeading = (0, _core.abs)(this.heading - angle) < (0, _unitConverters.degreesToRadians)(5);
                    var runwayNominalHeading = (0, _unitConverters.degreesToRadians)(parseInt(this.rwy_arr.substr(0, 2), 10) * 10, 10);
                    var maxInterceptAngle = (0, _unitConverters.degreesToRadians)(30);
                    var maxAboveGlideslope = 250;
                    var interceptAngle = (0, _core.abs)((0, _circle.angle_offset)(assignedHdg, runwayNominalHeading));
                    var courseDifference = (0, _core.abs)((0, _circle.angle_offset)(this.heading, runwayNominalHeading));
                    if (alignedWithRunway && onRunwayHeading && this.mode !== _aircraftConstants.FLIGHT_MODES.LANDING) {
                        this.mode = _aircraftConstants.FLIGHT_MODES.LANDING;
                        this.target.heading = angle;
                        // Check legality of localizer interception
                        if (!this.projected) {
                            // do not give penalty during a future projection
                            // TODO: Abstraction on the below, to remove duplicate code
                            // Intercept Angle
                            if (!assignedHdg && courseDifference > maxInterceptAngle) {
                                // intercept via fixes
                                var _isWarning = true;
                                window.uiController.ui_log(this.getCallsign() + ' approach course intercept angle was greater than 30 degrees', _isWarning);
                                window.gameController.events_recordNew(_GameController.GAME_EVENTS.ILLEGAL_APPROACH_CLEARANCE);
                            } else if (interceptAngle > maxInterceptAngle) {
                                // intercept via vectors
                                var _isWarning2 = true;
                                window.uiController.ui_log(this.getCallsign() + ' approach course intercept angle was greater than 30 degrees', _isWarning2);
                                window.gameController.events_recordNew(_GameController.GAME_EVENTS.ILLEGAL_APPROACH_CLEARANCE);
                            }

                            // Glideslope intercept
                            if (this.altitude > glideslope_altitude + maxAboveGlideslope) {
                                var _isWarning3 = true;
                                window.uiController.ui_log(this.getRadioCallsign() + ' joined localizer above glideslope altitude', _isWarning3);
                                window.gameController.events_recordNew(_GameController.GAME_EVENTS.ILLEGAL_APPROACH_CLEARANCE);
                            }
                        }

                        this.updateStrip();
                        this.target.turn = null;
                    }

                    // TODO: this math section should be absctracted to a helper function
                    // Guide aircraft onto the localizer
                    var angle_diff = (0, _circle.angle_offset)(angle, this.heading);
                    var turning_time = Math.abs((0, _unitConverters.radiansToDegrees)(angle_diff)) / 3; // time to turn angle_diff degrees at 3 deg/s
                    var turning_radius = (0, _unitConverters.km)(this.speed) / 3600 * turning_time; // dist covered in the turn, km
                    var dist_to_localizer = offset[0] / (0, _core.sin)(angle_diff); // dist from the localizer intercept point, km
                    var turn_early_km = 1; // start turn 1km early, to avoid overshoots from tailwind
                    var should_attempt_intercept = 0 < dist_to_localizer && dist_to_localizer <= turning_radius + turn_early_km;
                    var in_the_window = (0, _core.abs)(offset_angle) < (0, _unitConverters.degreesToRadians)(1.5); // if true, aircraft will move to localizer, regardless of assigned heading

                    if (should_attempt_intercept || in_the_window) {
                        // time to begin turn
                        var _severity_of_correction = 50; // controls steepness of heading adjustments during localizer tracking
                        var _tgtHdg = angle + offset_angle * -_severity_of_correction;
                        var _minHdg = angle - (0, _unitConverters.degreesToRadians)(30);
                        var _maxHdg = angle + (0, _unitConverters.degreesToRadians)(30);
                        this.target.heading = (0, _core.clamp)(_tgtHdg, _minHdg, _maxHdg);
                    }
                }
            } else if (this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.FIX) {
                var fix = this.fms.currentWaypoint.location;
                if (!fix) {
                    console.error(this.getCallsign() + ' using "fix" navmode, but no fix location!');
                    console.log(this.fms);
                    console.log(this.fms.currentWaypoint);
                }

                var vector_to_fix = (0, _vector.vsub)(this.position, fix);
                var distance_to_fix = (0, _distance.distance2d)(this.position, fix);

                if (distance_to_fix < 1 || distance_to_fix < 10 && distance_to_fix < window.aircraftController.aircraft_turn_initiation_distance(this, fix)) {
                    // if there are more waypoints available
                    if (!this.fms.atLastWaypoint()) {
                        this.fms.nextWaypoint();
                    } else {
                        this.cancelFix();
                    }

                    this.updateStrip();
                } else {
                    this.target.heading = (0, _vector.vradial)(vector_to_fix) - Math.PI;
                    this.target.turn = null;
                }
            } else if (this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.HOLD) {
                var hold = this.fms.currentWaypoint.hold;
                var angle_off_of_leg_hdg = (0, _core.abs)((0, _circle.angle_offset)(this.heading, this.target.heading));

                // within ~2° of upwd/dnwd
                if (angle_off_of_leg_hdg < 0.035) {
                    offset = (0, _flightMath.getOffset)(this, hold.fixPos);

                    // entering hold, just passed the fix
                    if (hold.timer === null && offset[1] < 0 && offset[2] < 2) {
                        // Force aircraft to enter the hold immediately
                        hold.timer = -999;
                    }

                    // Holding Logic
                    // time-based hold legs
                    if (hold.timer && hold.legLength.includes('min')) {
                        if (hold.timer === -1) {
                            // save the time
                            hold.timer = window.gameController.game.time;
                        } else if (window.gameController.game.time >= hold.timer + parseInt(hold.legLength.replace('min', ''), 10) * 60) {
                            // time to turn
                            this.target.heading += Math.PI; // turn to other leg
                            this.target.turn = hold.dirTurns;
                            hold.timer = -1; // reset the timer
                        } else if (hold.legLength.includes('nm')) {
                            // distance-based hold legs
                            // not yet implemented
                        }
                    }
                }
            } else {
                this.target.heading = this.fms.currentWaypoint.heading;
                this.target.turn = this.fms.currentWaypoint.turn;
            }

            if (this.mode !== _aircraftConstants.FLIGHT_MODES.LANDING) {
                this.target.altitude = this.fms.altitudeForCurrentWaypoint();
                this.target.expedite = this.fms.currentWaypoint.expedite;
                this.target.altitude = Math.max(1000, this.target.altitude);
                this.target.speed = (0, _get3.default)(this, 'fms.currentWaypoint.speed', this.speed);
                this.target.speed = (0, _core.clamp)(this.model.speed.min, this.target.speed, this.model.speed.max);
            }

            // If stalling, make like a meteorite and fall to the earth!
            if (this.speed < this.model.speed.min && !this.isOnGround()) {
                this.target.altitude = Math.min(0, this.target.altitude);
            }

            // finally, taxi overrides everything
            var was_taxi = false;

            if (this.mode === _aircraftConstants.FLIGHT_MODES.TAXI) {
                var elapsed = window.gameController.game_time() - this.taxi_start;

                if (elapsed > this.taxi_time) {
                    this.mode = _aircraftConstants.FLIGHT_MODES.WAITING;
                    was_taxi = true;

                    this.updateStrip();
                }
            } else if (this.mode === _aircraftConstants.FLIGHT_MODES.WAITING) {
                runway = window.airportController.airport_get().getRunway(this.rwy_dep);

                position = runway.position;
                this.position[0] = position[0];
                this.position[1] = position[1];
                this.heading = runway.angle;
                this.altitude = runway.elevation;

                if (!this.projected && runway.inQueue(this) === 0 && was_taxi === true) {
                    window.uiController.ui_log(this.getCallsign() + ', holding short of runway ' + this.rwy_dep);
                    (0, _speech.speech_say)([{ type: 'callsign', content: this }, { type: 'text', content: 'holding short of runway ' + (0, _radioUtilities.radio_runway)(this.rwy_dep) }]);

                    this.updateStrip();
                }
            } else if (this.mode === _aircraftConstants.FLIGHT_MODES.TAKEOFF) {
                runway = window.airportController.airport_get().getRunway(this.rwy_dep);

                // Altitude Control
                if (this.speed < this.model.speed.min) {
                    this.target.altitude = runway.elevation;
                } else {
                    this.target.altitude = this.fms.altitudeForCurrentWaypoint();
                }

                // Heading Control
                var rwyHdg = window.airportController.airport_get().getRunway(this.rwy_dep).angle;
                if (this.altitude - runway.elevation < 400) {
                    this.target.heading = rwyHdg;
                } else {
                    if (!this.fms.followCheck().sid && this.fms.currentWaypoint.heading === null) {
                        // if no directional instructions available after takeoff
                        // fly runway heading
                        this.fms.setCurrent({ heading: rwyHdg });
                    }

                    this.mode = _aircraftConstants.FLIGHT_MODES.CRUISE;
                    this.updateStrip();
                }

                // Speed Control
                // go fast!
                this.target.speed = this.model.speed.cruise;
            }

            // Limit speed to 250 knots while under 10,000 feet MSL (it's the law!)
            if (this.altitude < 10000) {
                if (this.isPrecisionGuided()) {
                    // btwn 0 and 250
                    this.target.speed = Math.min(this.target.speed, 250);
                } else {
                    // btwn scheduled speed and 250
                    this.target.speed = Math.min(this.fms.currentWaypoint.speed, 250);
                }
            }
        }

        // TODO: this method needs a lot of love. its much too long with waaay too many nested if/else ifs.
        /**
         * @for AircraftInstanceModel
         * @method updatePhysics
         */

    }, {
        key: 'updatePhysics',
        value: function updatePhysics() {
            if (this.isTaxiing()) {
                return;
            }

            if (this.hit) {
                // 90fps fall rate?...
                this.altitude -= 90 * window.gameController.game_delta();
                this.speed *= 0.99;

                return;
            }

            // TURNING
            // this.target.heading = radians_normalize(this.target.heading);
            if (!this.isOnGround() && this.heading !== this.target.heading) {
                // Perform standard turns 3 deg/s or 25 deg bank, whichever
                // requires less bank angle.
                // Formula based on http://aviation.stackexchange.com/a/8013
                var turn_rate = (0, _core.clamp)(0, 1 / (this.speed / 8.883031), 0.0523598776);
                var turn_amount = turn_rate * window.gameController.game_delta();
                var offset = (0, _circle.angle_offset)(this.target.heading, this.heading);

                if ((0, _core.abs)(offset) < turn_amount) {
                    this.heading = this.target.heading;
                } else if (offset < 0 && this.target.turn === null || this.target.turn === 'left') {
                    this.heading -= turn_amount;
                } else if (offset > 0 && this.target.turn === null || this.target.turn === 'right') {
                    this.heading += turn_amount;
                }
            }

            // ALTITUDE
            var distance = null;
            var expedite_factor = 1.5;
            this.trend = 0;

            if (this.target.altitude < this.altitude - 0.02) {
                distance = -this.model.rate.descent / 60 * window.gameController.game_delta();

                if (this.mode === _aircraftConstants.FLIGHT_MODES.LANDING) {
                    distance *= 3;
                }

                this.trend -= 1;
            } else if (this.target.altitude > this.altitude + 0.02) {
                var climbrate = this.getClimbRate();
                distance = climbrate / 60 * window.gameController.game_delta();

                if (this.mode === _aircraftConstants.FLIGHT_MODES.LANDING) {
                    distance *= 1.5;
                }

                this.trend = 1;
            }

            if (distance) {
                if (this.target.expedite) {
                    distance *= expedite_factor;
                }

                var _offset = this.altitude - this.target.altitude;

                if ((0, _core.abs)(_offset) < (0, _core.abs)(distance)) {
                    this.altitude = this.target.altitude;
                } else {
                    this.altitude += distance;
                }
            }

            if (this.isOnGround()) {
                this.trend = 0;
            }

            // SPEED
            var difference = null;

            if (this.target.speed < this.speed - 0.01) {
                difference = -this.model.rate.decelerate * window.gameController.game_delta() / 2;

                if (this.isOnGround()) {
                    difference *= 3.5;
                }
            } else if (this.target.speed > this.speed + 0.01) {
                difference = this.model.rate.accelerate * window.gameController.game_delta() / 2;
                difference *= (0, _core.extrapolate_range_clamp)(0, this.speed, this.model.speed.min, 2, 1);
            }

            if (difference) {
                var _offset2 = this.speed - this.target.speed;

                if ((0, _core.abs)(_offset2) < (0, _core.abs)(difference)) {
                    this.speed = this.target.speed;
                } else {
                    this.speed += difference;
                }
            }

            if (!this.position) {
                return;
            }

            // Trailling
            if (this.position_history.length === 0) {
                this.position_history.push([this.position[0], this.position[1], window.gameController.game_time() / window.gameController.game_speedup()]);
                // TODO: this can be abstracted
            } else if ((0, _core.abs)(window.gameController.game_time() / window.gameController.game_speedup() - this.position_history[this.position_history.length - 1][2]) > 4 / window.gameController.game_speedup()) {
                this.position_history.push([this.position[0], this.position[1], window.gameController.game_time() / window.gameController.game_speedup()]);
            }

            var angle = this.heading;
            // FIXME: is this ratio correct? is it 0.000514444 or 0.514444?
            var scaleSpeed = this.speed * 0.000514444 * window.gameController.game_delta(); // knots to m/s

            if (window.gameController.game.option.get('simplifySpeeds') === 'no') {
                // TODO: this should be abstracted to a helper function
                // Calculate the true air speed as indicated airspeed * 1.6% per 1000'
                scaleSpeed *= 1 + this.altitude * 0.000016;

                // Calculate movement including wind assuming wind speed
                // increases 2% per 1000'
                var wind = window.airportController.airport_get().wind;
                var vector = void 0;

                if (this.isOnGround()) {
                    vector = (0, _vector.vscale)([(0, _core.sin)(angle), (0, _core.cos)(angle)], scaleSpeed);
                } else {
                    var crab_angle = 0;

                    // Compensate for crosswind while tracking a fix or on ILS
                    if (this.fms.currentWaypoint.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.FIX || this.mode === _aircraftConstants.FLIGHT_MODES.LANDING) {
                        // TODO: this should be abstracted to a helper function
                        var _offset3 = (0, _circle.angle_offset)(this.heading, wind.angle + Math.PI);
                        crab_angle = Math.asin(wind.speed * (0, _core.sin)(_offset3) / this.speed);
                    }

                    // TODO: this should be abstracted to a helper function
                    vector = (0, _vector.vadd)((0, _vector.vscale)((0, _vector.vturn)(wind.angle + Math.PI), wind.speed * 0.000514444 * window.gameController.game_delta()), (0, _vector.vscale)((0, _vector.vturn)(angle + crab_angle), scaleSpeed));
                }

                this.ds = (0, _vector.vlen)(vector);
                // TODO: this should be abstracted to a helper function
                this.groundSpeed = this.ds / 0.000514444 / window.gameController.game_delta();
                this.groundTrack = (0, _vector.vradial)(vector);
                this.position = (0, _vector.vadd)(this.position, vector);
            } else {
                this.ds = scaleSpeed;
                this.groundSpeed = this.speed;
                this.groundTrack = this.heading;
                this.position = (0, _vector.vadd)(this.position, (0, _vector.vscale)([(0, _core.sin)(angle), (0, _core.cos)(angle)], scaleSpeed));
            }

            this.distance = (0, _vector.vlen)(this.position);
            this.radial = (0, _vector.vradial)(this.position);

            if (this.radial < 0) {
                this.radial += (0, _circle.tau)();
            }

            var isInsideAirspace = this.isInsideAirspace(window.airportController.airport_get());

            if (isInsideAirspace !== this.inside_ctr) {
                this.crossBoundary(isInsideAirspace);
            }
        }

        // TODO: this method needs a lot of love. its much too long with waaay too many nested if/else ifs.
        /**
         * @for AircraftInstanceModel
         * @method updateWarning
         */

    }, {
        key: 'updateWarning',
        value: function updateWarning() {
            var area = void 0;
            var warning = void 0;
            var status = void 0;
            var new_inside = void 0;

            // Ignore other aircraft while taxiing
            if (this.isTaxiing()) {
                return;
            }

            warning = false;

            // restricted areas
            // players are penalized for each area entry
            if (this.position) {
                for (var i = 0; i < this.restricted.list.length; i++) {
                    // TODO: this should be abstracted to a helper function
                    //   Polygon matching procedure:
                    //
                    //   1. Filter polygons by aircraft altitude
                    //   2. For other polygons, measure distance to it (distance_to_poly), then
                    //      substract travelled distance every turn
                    //      If distance is about less than 10 seconds of flight,
                    //      assign distance equal to 10 seconds of flight,
                    //      otherwise planes flying along the border of entering at shallow angle
                    //      will cause too many checks.
                    //   3. if distance has reached 0, check if the aircraft is within the poly.
                    //      If not, redo #2.
                    area = this.restricted.list[i];

                    // filter only those relevant by height
                    if (area.data.height < this.altitude) {
                        area.range = null;
                        area.inside = false;
                        continue;
                    }

                    // count distance untill the next check
                    if (area.range) {
                        area.range -= this.ds;
                    }

                    // recalculate for new areas or those that should be checked
                    if (!area.range || area.range <= 0) {
                        new_inside = (0, _vector.point_in_poly)(this.position, area.data.coordinates);

                        // ac has just entered the area: .inside is still false, but st is true
                        if (new_inside && !area.inside) {
                            window.gameController.events_recordNew(_GameController.GAME_EVENTS.AIRSPACE_BUST);
                            area.range = this.speed * 1.85 / 3.6 * 50 / 1000; // check in 50 seconds
                            // speed is kts, range is km.
                            // if a plane got into restricted area, don't check it too often
                        } else {
                            // don't calculate more often than every 10 seconds
                            area.range = Math.max(this.speed * 1.85 / 36 / 1000 * 10, (0, _vector.distance_to_poly)(this.position, area.data.coordinates));
                        }

                        area.inside = new_inside;
                    }
                }

                // raise warning if in at least one restricted area
                _jquery2.default.each(this.restricted.list, function (k, v) {
                    warning = warning || v.inside;
                });
            }

            if (this.terrain_ranges && !this.isOnGround()) {
                var terrain = prop.airport.current.terrain;
                var prev_level = this.terrain_ranges[this.terrain_level];
                var ele = Math.ceil(this.altitude, 1000);
                var curr_ranges = this.terrain_ranges[ele];

                if (ele !== this.terrain_level) {
                    for (var lev in prev_level) {
                        prev_level[lev] = Infinity;
                    }

                    this.terrain_level = ele;
                }

                for (var id in curr_ranges) {
                    curr_ranges[id] -= this.ds;
                    // console.log(curr_ranges[id]);

                    if (curr_ranges[id] < 0 || curr_ranges[id] === Infinity) {
                        area = terrain[ele][id];
                        status = (0, _vector.point_to_mpoly)(this.position, area, id);

                        if (status.inside) {
                            this.altitude = 0;

                            if (!this.hit) {
                                this.hit = true;

                                console.log('hit terrain');
                                var isWarning = true;
                                window.uiController.ui_log(this.getCallsign() + ' collided with terrain in controlled flight', isWarning);
                                (0, _speech.speech_say)([{ type: 'callsign', content: this }, { type: 'text', content: ', we\'re going down!' }]);

                                window.gameController.events_recordNew(_GameController.GAME_EVENTS.COLLISION);
                            }
                        } else {
                            curr_ranges[id] = Math.max(0.2, status.distance);
                            // console.log(this.getCallsign(), 'in', curr_ranges[id], 'km from', id, area[0].length);
                        }
                    }
                }
            }

            this.warning = warning;
        }

        /**
         * @for AircraftInstanceModel
         * @method updateStrip
         */

    }, {
        key: 'updateStrip',
        value: function updateStrip() {
            if (this.projected) {
                return;
            }

            // Update fms.following
            this.fms.followCheck();

            var wp = this.fms.currentWaypoint;
            // Populate strip fields with default values
            var defaultHeadingText = (0, _unitConverters.heading_to_string)(wp.heading);
            var defaultAltitudeText = (0, _get3.default)(wp, 'altitude', '-');
            var defaultDestinationText = (0, _get3.default)(this, 'destination', window.airportController.airport_get().icao);
            var currentSpeedText = wp.speed;

            var headingText = void 0;
            var altitudeText = this.taxi_next ? 'ready' : null;
            var destinationText = this.fms.getFollowingSIDText();
            var hasAltitude = (0, _has3.default)(wp, 'altitude');
            var isFollowingSID = (0, _isString3.default)(destinationText);
            var isFollowingSTAR = (0, _isString3.default)(this.fms.following.star);
            var fixRestrictions = this.fms.currentWaypoint.fixRestrictions;


            this.aircraftStripView.update(defaultHeadingText, defaultAltitudeText, defaultDestinationText, currentSpeedText);

            switch (this.mode) {
                case _aircraftConstants.FLIGHT_MODES.APRON:
                    this.aircraftStripView.updateViewForApron(destinationText, hasAltitude, isFollowingSID);
                    break;
                case _aircraftConstants.FLIGHT_MODES.TAXI:
                    this.aircraftStripView.updateViewForTaxi(destinationText, hasAltitude, isFollowingSID, altitudeText);
                    break;
                case _aircraftConstants.FLIGHT_MODES.WAITING:
                    this.aircraftStripView.updateViewForWaiting(destinationText, hasAltitude, isFollowingSID);
                    break;
                case _aircraftConstants.FLIGHT_MODES.TAKEOFF:
                    // When taking off...
                    this.aircraftStripView.updateViewForTakeoff(destinationText, isFollowingSID);

                    break;
                case _aircraftConstants.FLIGHT_MODES.CRUISE:
                    // When in normal flight...
                    if (wp.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.FIX) {
                        headingText = wp.fix[0] === '_' ? '[RNAV]' : wp.fix;
                        destinationText = this.fms.getFollowingSTARText();
                    } else if (wp.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.HOLD) {
                        headingText = 'holding';
                    } else if (wp.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.RWY) {
                        headingText = 'intercept';
                        destinationText = this.fms.getDesinationIcaoWithRunway();
                    }

                    this.aircraftStripView.updateViewForCruise(wp.navmode, headingText, destinationText, isFollowingSID, isFollowingSTAR, fixRestrictions);
                    break;
                case _aircraftConstants.FLIGHT_MODES.LANDING:
                    destinationText = this.fms.getDesinationIcaoWithRunway();

                    this.aircraftStripView.updateViewForLanding(destinationText);
                    break;
                default:
                    throw new TypeError('Invalid FLIGHT_MODE ' + this.mode + ' passed to .updateStrip()');
            }
        }

        /**
         * @for AircraftInstanceModel
         * @method updateAuto
         */

    }, {
        key: 'updateAuto',
        value: function updateAuto() {}

        /**
         * @for AircraftInstanceModel
         * @method update
         */

    }, {
        key: 'update',
        value: function update() {
            if (prop.aircraft.auto.enabled) {
                this.updateAuto();
            }

            this.updateTarget();
            this.updatePhysics();
        }

        /**
         * @for AircraftInstanceModel
         * @method addConflict
         */

    }, {
        key: 'addConflict',
        value: function addConflict(conflict, other) {
            this.conflicts[other.getCallsign()] = conflict;
        }

        /**
         * @for AircraftInstanceModel
         * @method checkConflict
         */

    }, {
        key: 'checkConflict',
        value: function checkConflict(other) {
            if (this.conflicts[other.getCallsign()]) {
                this.conflicts[other.getCallsign()].update();
                return true;
            }

            return false;
        }

        /**
         * @for AircraftInstanceModel
         * @method hasAlerts
         */

    }, {
        key: 'hasAlerts',
        value: function hasAlerts() {
            var a = [false, false];
            var c = null;
            for (var i in this.conflicts) {
                c = this.conflicts[i].hasAlerts();
                a[0] = a[0] || c[0];
                a[1] = a[1] || c[1];
            }

            return a;
        }

        /**
         * @for AircraftInstanceModel
         * @method removeConflict
         * @param other
         */

    }, {
        key: 'removeConflict',
        value: function removeConflict(other) {
            delete this.conflicts[other.getCallsign()];
        }
    }]);

    return Aircraft;
}();

exports.default = Aircraft;

},{"../airport/Route/RouteModel":548,"../constants/aircraftConstants":570,"../constants/selectors":575,"../game/GameController":580,"../math/circle":583,"../math/core":584,"../math/distance":585,"../math/flightMath":586,"../math/vector":587,"../speech":588,"../utilities/radioUtilities":593,"../utilities/unitConverters":595,"./AircraftStripView":527,"./FlightManagementSystem/AircraftFlightManagementSystem":528,"./FlightManagementSystem/Waypoint":530,"jquery":296,"lodash/forEach":468,"lodash/get":469,"lodash/has":470,"lodash/isEqual":481,"lodash/isNaN":484,"lodash/isNil":485,"lodash/isString":489,"lodash/map":496}],526:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _AircraftInstanceModel = require('./AircraftInstanceModel');

var _AircraftInstanceModel2 = _interopRequireDefault(_AircraftInstanceModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// TODO: this class could use a better name. What differentiates this class from `AircraftInstanceModel`?
/**
 * Definitions for characteristics of a particular aircraft type
 *
 * @class AircraftModel
 */
var AircraftModel = function () {
    /**
     * @for AircraftModel
     * @constructor
     * @param options {object}
     */
    function AircraftModel() {
        var _this = this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, AircraftModel);

        this.onLoadSuccess = function (response) {
            _this.parse(response);

            _this.loading = false;
            _this.loaded = true;

            _this._generatePendingAircraft();
        };

        this.onLoadError = function (_ref) {
            var textStatus = _ref.textStatus;

            _this.loading = false;
            _this._pendingAircraft = [];

            console.error('Unable to load aircraft/ ' + _this.icao + ' : ' + textStatus);
        };

        this.loading = true;
        this.loaded = false;
        this.priorityLoad = false;
        this.name = (0, _get3.default)(options, 'name', null);
        this.icao = (0, _get3.default)(options, 'icao', null);
        this.engines = null;
        this.ceiling = null;
        this.weightclass = (0, _get3.default)(options, 'weightClass', null);
        this.category = (0, _get3.default)(options, 'category', null);
        this._url = '';
        this._pendingAircraft = [];

        this.rate = {
            // radians per second
            turn: 0,
            // feet per second
            climb: 0,
            descent: 0,
            // knots per second
            accelerate: 0,
            decelerate: 0
        };

        this.runway = {
            // km needed to takeoff
            takeoff: 0,
            landing: 0
        };

        this.speed = {
            min: 0,
            max: 0,
            landing: 0,
            cruise: 0
        };

        this.parse(options);

        if (options.url) {
            this.load(options.url);
        }
    }

    /**
     * Set class properties with `data`.
     *
     * This method is run once on instantiation and again `onLoadSuccess`
     *
     * @for AircraftModel
     * @method parse
     * @param data {object}
     */


    _createClass(AircraftModel, [{
        key: 'parse',
        value: function parse(data) {
            this.engines = (0, _get3.default)(data, 'engines', this.engines);
            this.ceiling = (0, _get3.default)(data, 'ceiling', this.ceiling);
            this.runway = (0, _get3.default)(data, 'runway', this.runway);
            this.speed = (0, _get3.default)(data, 'speed', this.speed);
            this.rate = (0, _get3.default)(data, 'rate', this.rate);
        }

        /**
         * @for AircraftModel
         * @method load
         * @param url {string}
         */

    }, {
        key: 'load',
        value: function load(url) {
            var _this2 = this;

            this._url = url;

            zlsa.atc.loadAsset({
                url: url,
                immediate: false
            }).done(function (response) {
                return _this2.onLoadSuccess(response);
            }).fail(function () {
                return _this2.onLoadError.apply(_this2, arguments);
            });
        }

        /**
         * @for AircraftModel
         * @method onLoadSuccess
         * @param response {object}
         */


        /**
         * @for AircraftModel
         * @method onLoadError
         * @param textStatus {string}
         */

    }, {
        key: 'generateAircraft',


        /**
         * Generate a new aircraft of this model
         *
         * Handles the case where this model may be asynchronously loaded
         *
         * @for AircraftModel
         * @method generateAircraft
         * @param options {object}
         */
        value: function generateAircraft(options) {
            // TODO: prop names of loaded and loading are concerning. there may be state machine magic happening here
            // that could lead to issues
            if (!this.loaded) {
                if (this.loading) {
                    this._pendingAircraft.push(options);

                    if (!this.priorityLoad) {
                        zlsa.atc.loadAsset({
                            url: this._url,
                            immediate: true
                        });

                        this.priorityLoad = true;
                    }

                    return true;
                }

                console.warn('Unable to spawn aircraft/ ' + options.icao + ' as loading failed');

                return false;
            }

            return this._generateAircraft(options);
        }

        /**
         * Actual implementation of generateAircraft
         *
         * @for AircraftModel
         * @method _generateAircraft
         * @param options {object}
         * @return {boolean}
         * @private
         */

    }, {
        key: '_generateAircraft',
        value: function _generateAircraft(options) {
            options.model = this;
            var aircraft = new _AircraftInstanceModel2.default(options);

            prop.aircraft.list.push(aircraft);

            console.log('Spawning ' + options.category + ' : ' + aircraft.getCallsign());

            return true;
        }

        /**
         * Generate aircraft which were queued while the model loaded
         *
         * @for AircraftModel
         * @method _generatePendingAircraft
         */

    }, {
        key: '_generatePendingAircraft',
        value: function _generatePendingAircraft() {
            var _this3 = this;

            (0, _forEach3.default)(this._pendingAircraft, function (pendingAircraftOptions) {
                _this3._generateAircraft(pendingAircraftOptions);
            });

            this._pendingAircraft = [];
        }
    }]);

    return AircraftModel;
}();

exports.default = AircraftModel;

},{"./AircraftInstanceModel":525,"lodash/forEach":468,"lodash/get":469}],527:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _core = require('../math/core');

var _aircraftConstants = require('../constants/aircraftConstants');

var _selectors = require('../constants/selectors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * unique id for each AircraftStripView instance
 *
 * @property ID
 * @type {number}
 */
var ID = 0;

/**
 * Root html element
 *
 * @property AIRCRAFT_STRIP_TEMPLATE
 * @type {string}
 * @final
 */
var AIRCRAFT_STRIP_TEMPLATE = '<li class="strip"></li>';

/**
 * Height of the AircraftStrip DOM element in px.
 *
 * @property AIRCRAFT_STRIP_HEIGHT
 * @type {number}
 * @final
 */
var AIRCRAFT_STRIP_HEIGHT = 45;

/**
 * @class AircraftStripView
 */

var AircraftStripView = function () {
    /**
     * @for AircraftStripView
     * @constructor
     * @param callsign {string}  this property is a result of a function call and not directly tied to the
     *                           `AircraftInstanceModel`, thus it is included explicitly intead of obtainined
     *                           from the `AircraftInstanceModel`
     * @param aircraftInstanceModel {AircraftInstanceModel}
     */
    function AircraftStripView() {
        var _this = this;

        var callsign = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
        var aircraftInstanceModel = arguments[1];

        _classCallCheck(this, AircraftStripView);

        this.onClickHandler = function (event) {
            window.inputController.input_select(_this.callsign);
        };

        this.onDoubleClickHandler = function (event) {
            prop.canvas.panX = 0 - (0, _core.round)(window.uiController.km_to_px(event.data.position[0]));
            prop.canvas.panY = (0, _core.round)(window.uiController.km_to_px(event.data.position[1]));
            prop.canvas.dirty = true;
        };

        // TODO: change to use lodash _uniqueId
        this._id = ID++;

        this.$element = null;
        this.$callsign = null;
        this.$aircraft = null;
        this.$heading = null;
        this.$altitude = null;
        this.$destination = null;
        this.$speed = null;

        this.height = AIRCRAFT_STRIP_HEIGHT;
        this.callsign = callsign;
        this.icao = aircraftInstanceModel.model.icao;
        this.destination = aircraftInstanceModel.destination;
        this.weightclass = aircraftInstanceModel.model.weightclass;
        this.category = aircraftInstanceModel.category;
        this.flightPlan = aircraftInstanceModel.fms.fp.route.join(' ');

        return this._init().setupHandlers(aircraftInstanceModel).layout().redraw();
    }

    /**
     * @for AircraftStripView
     * @method
     */


    _createClass(AircraftStripView, [{
        key: '_init',
        value: function _init() {
            this.$element = (0, _jquery2.default)(AIRCRAFT_STRIP_TEMPLATE);
            this.$aircraft = (0, _jquery2.default)(this.buildSpanForViewItem(_selectors.SELECTORS.CLASSNAMES.AIRCRAFT, this.buildIcaoWithWeightClass()));
            this.$callsign = (0, _jquery2.default)(this.buildSpanForViewItem(_selectors.SELECTORS.CLASSNAMES.CALLSIGN, this.callsign));
            this.$heading = (0, _jquery2.default)(this.buildSpanForViewItem(_selectors.SELECTORS.CLASSNAMES.HEADING));
            this.$altitude = (0, _jquery2.default)(this.buildSpanForViewItem(_selectors.SELECTORS.CLASSNAMES.ALTITUDE));
            this.$destination = (0, _jquery2.default)(this.buildSpanForViewItem(_selectors.SELECTORS.CLASSNAMES.DESTINATION, this.destination));
            this.$speed = (0, _jquery2.default)(this.buildSpanForViewItem(_selectors.SELECTORS.CLASSNAMES.SPEED));

            return this;
        }

        /**
         * @for AircraftStripView
         * @method setupHandlers
         */

    }, {
        key: 'setupHandlers',
        value: function setupHandlers(aircraftInstanceModel) {
            this.$element.on('click', this.onClickHandler);
            this.$element.on('dblclick', aircraftInstanceModel, this.onDoubleClickHandler);

            return this;
        }

        /**
         * @for AircraftStripView
         * @method layout
         */

    }, {
        key: 'layout',
        value: function layout() {
            // TODO: some of the static HTML here could be moved to template constants
            this.$element.append(this.$callsign);
            this.$element.append(this.$heading);
            this.$element.append(this.$altitude);
            this.$element.append(this.$aircraft);
            this.$element.append(this.$destination);
            this.$element.append(this.$speed);
            this.$element.addClass(this.findClassnameForFlightCateogry());
            // TODO: this doesnt appear to be doing what the below comment says it should be doing
            // show fp route on hover
            this.$element.prop('title', this.flightPlan);

            return this;
        }

        /**
         * @for AircraftStripView
         * @method redraw
         */

    }, {
        key: 'redraw',
        value: function redraw() {
            return this;
        }

        /**
         * @for AircraftStripView
         * @method enable
         */

    }, {
        key: 'enable',
        value: function enable() {
            return this;
        }

        /**
         * @for AircraftStripView
         * @method disable
         */

    }, {
        key: 'disable',
        value: function disable() {
            this.$element.off('click', this.onClickHandler);
            this.$element.off('dblclick', this.onDoubleClickHandler);

            return this.destroy();
        }

        /**
         * @for AircraftStripView
         * @method destroy
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.$element = null;
            this.$callsign = null;
            this.$aircraft = null;
            this.$heading = null;
            this.$altitude = null;
            this.$destination = null;
            this.$speed = null;

            this.callsign = '';
            this.icao = '';
            this.destination = '';
            this.weightclass = '';
            this.category = '';
            this.flightPlan = '';

            return this;
        }

        /**
         * Return a span with a classname and/or content string.
         *
         * Used when initializing templates. Removes the need for having individual template constants for each line
         * when the only difference is a classname and content. Also provides a way to cache all the AircraftStripView
         * selectors on instantiation.
         *
         * @for AircraftStripView
         * @param className {string}
         * @param content {string}
         */

    }, {
        key: 'buildSpanForViewItem',
        value: function buildSpanForViewItem(className) {
            var content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

            return '<span class="' + className + '">' + content + '</span>';
        }

        /**
         * @for AircraftStripView
         * @method buildIcaoWithWeightClass
         * @return aircraftIcao {string}
         */

    }, {
        key: 'buildIcaoWithWeightClass',
        value: function buildIcaoWithWeightClass() {
            var aircraftIcao = this.icao;

            // TODO: indexOf is goofy here, this can be simplified
            // Bottom Line Data
            if (['H', 'U'].indexOf(this.weightclass) > -1) {
                aircraftIcao = 'H/' + this.icao;
            }

            return aircraftIcao.toUpperCase();
        }

        /**
         * @for AircraftStripView
         * @method findClassnameForFlightCateogry
         * @return {string}
         */

    }, {
        key: 'findClassnameForFlightCateogry',
        value: function findClassnameForFlightCateogry() {
            return this.category === _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE ? _selectors.SELECTORS.CLASSNAMES.DEPARTURE : _selectors.SELECTORS.CLASSNAMES.ARRIVAL;
        }

        /**
         * Fascade method for jquery `.hide()`
         *
         * @for AircraftStripView
         * @method hide
         * @param duration {number}
         */

    }, {
        key: 'hide',
        value: function hide() {
            var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            this.$element.hide(duration);
        }

        /**
         * @for AircraftStripView
         * @method update
         */

    }, {
        key: 'update',
        value: function update(headingText, altitudeText, destinationText, currentSpeedText) {
            this.resetStripStyles();
            this.updateAircraftTelemetryText(headingText, altitudeText, destinationText, currentSpeedText);

            return this;
        }

        /**
         * Remove all old styling
         *
         * @for AircraftStripView
         * @method resetStripStyles
         * @param headingText {string}
         * @param altitudeText {string}
         * @param destinationText {string}
         * @param currentSpeedText {string}
         */

    }, {
        key: 'resetStripStyles',
        value: function resetStripStyles() {
            var classnamesToRemove = 'runway hold waiting taxi lookingGood allSet';

            this.$heading.removeClass(classnamesToRemove);
            this.$altitude.removeClass(classnamesToRemove);
            this.$destination.removeClass(classnamesToRemove);
            this.$speed.removeClass(classnamesToRemove);
        }

        /**
         * @for AircraftStripView
         * @method updateAircraftTelemetryText
         * @param headingText {string}
         * @param altitudeText {string}
         * @param destinationText {string}
         * @param currentSpeedText {string}
         */

    }, {
        key: 'updateAircraftTelemetryText',
        value: function updateAircraftTelemetryText(headingText, altitudeText, destinationText, currentSpeedText) {
            this.$heading.text(headingText);
            this.$altitude.text(altitudeText);
            this.$destination.text(destinationText);
            this.$speed.text(currentSpeedText);
        }

        /**
         * @for AircraftStripView
         * @method updateViewForApron
         * @param destinationText {string}
         * @param hasAltitude {boolean}
         * @param isFollowingSID {boolean}
         */

    }, {
        key: 'updateViewForApron',
        value: function updateViewForApron(destinationText, hasAltitude, isFollowingSID) {
            this.$speed.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            this.$heading.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            this.$heading.text(_aircraftConstants.FLIGHT_MODES.APRON);

            if (hasAltitude) {
                this.$altitude.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            }

            if (isFollowingSID) {
                // TODO: this should be a class method on the FMS
                this.$destination.text(destinationText);
                this.$destination.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            }
        }

        /**
         * @for AircraftStripView
         * @method updateViewForTaxi
         * @param destinationText {string}
         * @param hasAltitude {boolean}
         * @param isFollowingSID {boolean}
         * @param altitudeText {string}
         */

    }, {
        key: 'updateViewForTaxi',
        value: function updateViewForTaxi(destinationText, hasAltitude, isFollowingSID, altitudeText) {
            // TODO: abstract FROM HERE
            this.$speed.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            this.$heading.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            this.$heading.text(_aircraftConstants.FLIGHT_MODES.TAXI);

            if (hasAltitude) {
                this.$altitude.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            }

            if (isFollowingSID) {
                // TODO: this should be a class method on the FMS
                this.$destination.text(destinationText);
                this.$destination.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            }
            // TODO: abstract TO HERE

            if (altitudeText) {
                this.$altitude.text(altitudeText);
            }
        }

        /**
         * @for AircraftStripView
         * @method updateViewForWaiting
         * @param destinationText {string}
         * @param hasAltitude {boolean}
         * @param isFollowingSID {boolean}
         */

    }, {
        key: 'updateViewForWaiting',
        value: function updateViewForWaiting(destinationText, hasAltitude, isFollowingSID) {
            this.$speed.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            this.$heading.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            this.$heading.text(_aircraftConstants.FLIGHT_MODES.WAITING);

            if (hasAltitude) {
                this.$altitude.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            }

            if (isFollowingSID) {
                // TODO: this should be a class method on the FMS
                this.$destination.text(destinationText);
                this.$destination.addClass(_selectors.SELECTORS.CLASSNAMES.RUNWAY);
            }
        }

        /**
         * @for AircraftStripView
         * @method updateTakeOffView
         * @param destinationText {string}
         */

    }, {
        key: 'updateViewForTakeoff',
        value: function updateViewForTakeoff(destinationText, isFollowingSID) {
            this.$heading.text(_aircraftConstants.FLIGHT_MODES.TAKEOFF);

            if (isFollowingSID) {
                this.$destination.text(destinationText);
                this.$destination.addClass(_selectors.SELECTORS.CLASSNAMES.LOOKING_GOOD);
            }
        }

        /**
         * @for AircraftStripView
         * @method updateViewForLanding
         * @param destinationText {string}
         */

    }, {
        key: 'updateViewForLanding',
        value: function updateViewForLanding(destinationText) {
            var ON_GLIDESLOPE = 'GS';
            var ON_ILS = 'on ILS';

            this.$heading.addClass(_selectors.SELECTORS.CLASSNAMES.ALL_SET);
            this.$heading.text(ON_ILS);
            this.$altitude.addClass(_selectors.SELECTORS.CLASSNAMES.ALL_SET);
            this.$altitude.text(ON_GLIDESLOPE);
            this.$speed.addClass(_selectors.SELECTORS.CLASSNAMES.ALL_SET);
            this.$destination.addClass(_selectors.SELECTORS.CLASSNAMES.ALL_SET);
            this.$destination.text(destinationText);
        }

        /**
         * @for AircraftStripView
         * @method updateViewForCruise
         * @param navMode
         * @param headingText {string}
         * @param destinationText {string}
         * @param isFollowingSID {boolean}
         * @param isFollowingSTAR {boolean}
         * @param fixRestrictions {object}
         */

    }, {
        key: 'updateViewForCruise',
        value: function updateViewForCruise(navMode) {
            var headingText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var destinationText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
            var isFollowingSID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            var isFollowingSTAR = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
            var fixRestrictions = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

            switch (navMode) {
                case _aircraftConstants.WAYPOINT_NAV_MODE.FIX:
                    this.$heading.text(headingText);

                    if (isFollowingSID) {
                        this.$heading.addClass(_selectors.SELECTORS.CLASSNAMES.ALL_SET);
                        this.$altitude.addClass(_selectors.SELECTORS.CLASSNAMES.ALL_SET);
                        this.$destination.addClass(_selectors.SELECTORS.CLASSNAMES.ALL_SET);
                        this.$speed.addClass(_selectors.SELECTORS.CLASSNAMES.ALL_SET);
                    }

                    if (isFollowingSTAR) {
                        this.$heading.addClass(_selectors.SELECTORS.CLASSNAMES.FOLLOWING_STAR);
                        this.$destination.text(destinationText);
                        this.$destination.addClass(_selectors.SELECTORS.CLASSNAMES.FOLLOWING_STAR);

                        if (fixRestrictions.altitude) {
                            this.$altitude.addClass(_selectors.SELECTORS.CLASSNAMES.FOLLOWING_STAR);
                        }

                        if (fixRestrictions.speed) {
                            this.$speed.addClass(_selectors.SELECTORS.CLASSNAMES.FOLLOWING_STAR);
                        }
                    }

                    break;
                case _aircraftConstants.WAYPOINT_NAV_MODE.HOLD:
                    this.$heading.text(headingText);
                    this.$heading.addClass(_selectors.SELECTORS.CLASSNAMES.HOLD);
                    break;
                case _aircraftConstants.WAYPOINT_NAV_MODE.RWY:
                    // attempting ILS intercept
                    this.$heading.addClass(_selectors.SELECTORS.CLASSNAMES.LOOKING_GOOD);
                    this.$heading.text(headingText);
                    this.$altitude.addClass(_selectors.SELECTORS.CLASSNAMES.LOOKING_GOOD);
                    this.$speed.addClass(_selectors.SELECTORS.CLASSNAMES.LOOKING_GOOD);
                    this.$destination.addClass(_selectors.SELECTORS.CLASSNAMES.LOOKING_GOOD);
                    this.$destination.text(destinationText);
                    break;
                default:
                    break;
            }
        }

        /**
         * Click handler for a single click on an AircraftStripView
         *
         * @for AircraftStripView
         * @method onClickHandler
         * @param event {jquery event}
         */


        /**
         * Click handler for a double-click on an AircraftStripView
         *
         * @for AircraftStripView
         * @method onDoubleClickHandler
         * @param  event {jquery event}
         */

    }]);

    return AircraftStripView;
}();

exports.default = AircraftStripView;

},{"../constants/aircraftConstants":570,"../constants/selectors":575,"../math/core":584,"jquery":296}],528:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-plusplus */


var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _last2 = require('lodash/last');

var _last3 = _interopRequireDefault(_last2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _FixCollection = require('../../airport/Fix/FixCollection');

var _FixCollection2 = _interopRequireDefault(_FixCollection);

var _Waypoint = require('./Waypoint');

var _Waypoint2 = _interopRequireDefault(_Waypoint);

var _Leg = require('./Leg');

var _Leg2 = _interopRequireDefault(_Leg);

var _RouteModel = require('../../airport/Route/RouteModel');

var _RouteModel2 = _interopRequireDefault(_RouteModel);

var _core = require('../../math/core');

var _aircraftConstants = require('../../constants/aircraftConstants');

var _logLevel = require('../../constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Enumeration of the Leg index in `this.current`
 *
 * @property
 * @type {number}
 * @final
 */
var LEG = 0;

/**
 * Enumeration of the Waypoint within leg index in `this.current`
 *
 * @property
 * @type {number}
 * @final
 */
var WAYPOINT_WITHIN_LEG = 1;

/**
  * Manage current and future aircraft waypoints
  *
  * waypoint navmodes
  * -----------------
  * May be one of null, "fix", "heading", "hold", "rwy"
  *
  * * null is assigned, if the plane is not actively following an
  *    objective. This is only the case, if a plane enters the airspace
  *    or an action has been aborted and no new command issued
  *
  * * "fix" is assigned, if the plane is heading for a fix. In this
  *    case, the attribute request.fix is used for navigation
  *
  * * "heading" is assigned, if the plane was given directive to follow
  *    the course set out by the given heading. In this case, the
  *    attributes request.heading and request.turn are used for
  *    navigation
  *
  * * "hold" is assigned, if the plane should hold its position. As
  *    this is archieved by continuously turning, request.turn is used
  *    in this case
  *
  * * "rwy" is assigned, if the plane is heading for a runway. This is
  *    only the case, if the plane was issued the command to land. In
  *    this case, request.runway is used
  *
  * @class AircraftFlightManagementSystem
 */

var AircraftFlightManagementSystem = function () {
    /**
     * @for AircraftFlightManagementSystem
     * @constructor
     * @param options {object}
     */
    function AircraftFlightManagementSystem(options) {
        _classCallCheck(this, AircraftFlightManagementSystem);

        /**
         * @property may_aircrafts_eid
         * @type {number}
         * @default options.aircraft.eid
         */
        this.my_aircrafts_eid = options.aircraft.eid;

        // TODO: we should remove this reference and instead supply methods that the aircraft can call via the fms
        /**
         * @property my_aircraft
         * @type {AircrafInstanceModel}
         * @default options.aircraft
         */
        this.my_aircraft = options.aircraft;

        /**
         * @property legs
         * @type {array}
         * @default []
         */
        this.legs = [];

        /**
         * Current indicies for Leg and Waypoint within that Leg.
         *
         * [current_Leg, current_Waypoint_within_that_Leg]
         *
         * @property current
         * @type {array}
         * @default [0, 0]
         */
        this.current = [0, 0];

        // TODO: possible model object here
        /**
         * @property fp
         * @type {object}
         */
        this.fp = {
            altitude: null,
            route: []
        };

        // TODO: possible model object here
        /**
         * @property following
         * @type {object}
         */
        this.following = {
            sid: null, // Standard Instrument Departure Procedure
            star: null, // Standard Terminal Arrival Route Procedure
            iap: null, // Instrument Approach Procedure (like ILS, GPS, RNAV, VOR-A, etc)
            awy: null, // Airway (V, J, T, Q, etc.)
            tfc: null, // Traffic (another airplane)
            anything: false // T/F flag for if anything is being "followed"
        };

        // TODO: this doesn't belong in the constructor
        // TODO: enumerate the magic numbers
        // set initial altitude
        this.fp.altitude = (0, _core.clamp)(1000, options.model.ceiling, 60000);

        if (options.aircraft.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL) {
            this.prependLeg({ route: 'UNASSIGNED' });
        } else if (options.aircraft.category === _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE) {
            this.prependLeg({ route: window.airportController.airport_get().icao });
        }

        this.update_fp_route();
    }

    /** ***************** FMS FLIGHTPLAN CONTROL FUNCTIONS *******************/

    /**
     * Insert a Leg at the front of the flightplan
     */


    _createClass(AircraftFlightManagementSystem, [{
        key: 'prependLeg',
        value: function prependLeg(data) {
            var prev = this.currentWaypoint;
            var legToAdd = new _Leg2.default(data, this);

            this.legs.unshift(legToAdd);
            this.update_fp_route();

            // TODO: these if blocks a repeated elsewhere, perhaps currentWaypoint can handle this logic?
            // Verify altitude & speed not null
            var curr = this.currentWaypoint;
            if (prev && !curr.altitude) {
                curr.altitude = prev.altitude;
            }

            if (prev && !curr.speed) {
                curr.speed = prev.speed;
            }
        }

        /**
         * Insert a waypoint at current position and immediately activate it
         */

    }, {
        key: 'insertWaypointHere',
        value: function insertWaypointHere(data) {
            var airport = window.airportController.airport_get();
            var prev = this.currentWaypoint;
            var waypointToAdd = new _Waypoint2.default(data, airport);

            // TODO: split this up into smaller chunks
            this.currentLeg.waypoints.splice(this.current[WAYPOINT_WITHIN_LEG], 0, waypointToAdd);
            this.update_fp_route();

            // TODO: these if blocks a repeated elsewhere, perhaps currentWaypoint can handle this logic?
            // Verify altitude & speed not null
            var curr = this.currentWaypoint;
            if (prev && !curr.altitude) {
                curr.altitude = prev.altitude;
            }

            if (prev && !curr.speed) {
                curr.speed = prev.speed;
            }
        }

        /**
         * Insert a Leg at a particular position in the flightplan
         * Note: if no position passed in, defaults to add to the end
         */

    }, {
        key: 'insertLeg',
        value: function insertLeg(data) {
            // TODO: reassigining data here is dangerous.
            if (data.firstIndex == null) {
                data.firstIndex = this.legs.length;
            }

            var prev = this.currentWaypoint;
            var legToAdd = new _Leg2.default(data, this);

            this.legs.splice(data.firstIndex, 0, legToAdd);

            this.update_fp_route();

            // Adjust 'current'
            if (this.current[LEG] >= data.firstIndex) {
                this.current[WAYPOINT_WITHIN_LEG] = 0;
            }

            // TODO: these if blocks a repeated elsewhere, perhaps currentWaypoint can handle this logic?
            // Verify altitude & speed not null
            var curr = this.currentWaypoint;
            if (prev && !curr.altitude) {
                curr.altitude = prev.altitude;
            }

            if (prev && !curr.speed) {
                curr.speed = prev.speed;
            }
        }

        /**
         * Insert a Leg at current position immediately activate it
         */

    }, {
        key: 'insertLegHere',
        value: function insertLegHere(data) {
            // index of current leg
            data.firstIndex = this.current[LEG];
            // put new Leg at current position
            this.insertLeg(data);
            // start at first wp in this new leg
            this.current[WAYPOINT_WITHIN_LEG] = 0;
        }

        /**
         *  Insert a Leg at the end of the flightplan
         */

    }, {
        key: 'appendLeg',
        value: function appendLeg(data) {
            var legToAdd = new _Leg2.default(data, this);

            this.legs.push(legToAdd);
            this.update_fp_route();
        }

        /**
         *  Insert a waypoint after the *current* waypoint
         */

    }, {
        key: 'appendWaypoint',
        value: function appendWaypoint(data) {
            var airport = window.airportController.airport_get();
            var waypointToAdd = new _Waypoint2.default(data, airport);

            this.currentLeg.waypoints.splice(this.current[WAYPOINT_WITHIN_LEG] + 1, 0, waypointToAdd);
            this.update_fp_route();
        }

        /**
         *  Switch to the next waypoint
         */

    }, {
        key: 'nextWaypoint',
        value: function nextWaypoint() {
            var prev = this.currentWaypoint;
            var leg = this.current[LEG];
            var wp = this.current[WAYPOINT_WITHIN_LEG] + 1;

            if (wp < this.legs[leg].waypoints.length) {
                // look to next waypoint in current leg
                this.current[WAYPOINT_WITHIN_LEG]++;
            } else if (leg + 1 < this.legs.length) {
                // look to the next leg
                this.current[LEG]++;
                this.current[WAYPOINT_WITHIN_LEG] = 0; // look to the first waypoint of that leg
            }

            // TODO: these if blocks a repeated elsewhere, perhaps currentWaypoint can handle this logic?
            // Replace null values with current values
            var curr = this.currentWaypoint;
            if (prev && !curr.altitude) {
                curr.altitude = prev.altitude;
            }

            if (prev && !curr.speed) {
                curr.speed = prev.speed;
            }

            if (!curr.heading && curr.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.HEADING) {
                curr.heading = prev.heading;
            }
        }

        /**
         *  Switch to the next Leg
         */

    }, {
        key: 'nextLeg',
        value: function nextLeg() {
            var prev = this.currentWaypoint;
            this.current[LEG]++;
            this.current[WAYPOINT_WITHIN_LEG] = 0;

            // TODO: these if blocks a repeated elsewhere, perhaps currentWaypoint can handle this logic?
            // Replace null values with current values
            var curr = this.currentWaypoint;
            if (prev && !curr.altitude) {
                curr.altitude = prev.altitude;
            }

            if (prev && !curr.speed) {
                curr.speed = prev.speed;
            }

            if (!curr.heading && curr.navmode === _aircraftConstants.WAYPOINT_NAV_MODE.HEADING) {
                curr.heading = prev.heading;
            }
        }

        /**
         * Skips to the given waypoint
         * @param {string} name - the name of the fix to skip to
         */

    }, {
        key: 'skipToFix',
        value: function skipToFix(name) {
            var prev = this.currentWaypoint;

            // TODO: these nested for loops should be simplified
            for (var l = 0; l < this.legs.length; l++) {
                for (var w = 0; w < this.legs[l].waypoints.length; w++) {
                    if (this.legs[l].waypoints[w].fix === name) {
                        this.current = [l, w];

                        // TODO: these if blocks a repeated elsewhere, perhaps currentWaypoint can handle this logic?
                        // Verify altitude & speed not null
                        var curr = this.currentWaypoint;
                        if (prev && !curr.altitude) {
                            curr.altitude = prev.altitude;
                        }

                        if (prev && !curr.speed) {
                            curr.speed = prev.speed;
                        }

                        return true;
                    }
                }
            }

            return false;
        }

        /**
         * Modify all waypoints
         */

    }, {
        key: 'setAll',
        value: function setAll(data) {
            // TODO: refactor this, what is actually happening here?
            for (var i = 0; i < this.legs.length; i++) {
                for (var j = 0; j < this.legs[i].waypoints.length; j++) {
                    for (var k in data) {
                        this.legs[i].waypoints[j][k] = data[k];
                    }
                }
            }
        }

        /**
         * Modify the current waypoint
         */

    }, {
        key: 'setCurrent',
        value: function setCurrent(data) {
            // TODO: refactor this, what is actually happening here?
            // FIXME: it may be easier to replace current waypoint with a new one?
            for (var i in data) {
                this.currentWaypoint[i] = data[i];
            }
        }

        /**
         * Updates fms.fp.route to correspond with the fms Legs
         */

    }, {
        key: 'update_fp_route',
        value: function update_fp_route() {
            var flightPlanRoute = [];

            for (var i = 0; i < this.legs.length; i++) {
                var leg = this.legs[i];

                if (!leg.type) {
                    continue;
                }

                // FIXME: replace the string splitting with the `RouteModel` class methods
                switch (leg.type) {
                    case _aircraftConstants.FP_LEG_TYPE.SID:
                        // departure airport
                        flightPlanRoute.push(leg.route.entry);
                        // 'sidname.exitPoint'
                        flightPlanRoute.push(leg.route.procedure + '.' + leg.route.exit);

                        break;
                    case _aircraftConstants.FP_LEG_TYPE.STAR:
                        // 'entryPoint.starname.exitPoint'
                        flightPlanRoute.push(leg.route.entry + '.' + leg.route.procedure);
                        // arrival airport
                        flightPlanRoute.push(leg.route.exit);

                        break;
                    case _aircraftConstants.FP_LEG_TYPE.IAP:
                        // no need to include these in flightplan (because wouldn't happen in real life)
                        break;
                    case _aircraftConstants.FP_LEG_TYPE.AWY:
                        var previousFlightPlanRoute = flightPlanRoute[flightPlanRoute.length - 1];

                        if (previousFlightPlanRoute !== leg.route.split('.')[0]) {
                            flightPlanRoute.push(leg.route.split('.')[0]); // airway entry fix
                            flightPlanRoute.push(leg.route.split('.')[1]); // airway identifier
                            flightPlanRoute.push(leg.route.split('.')[2]); // airway exit fix
                        }

                        break;
                    case _aircraftConstants.FP_LEG_TYPE.FIX:
                        // this is just a fixname
                        flightPlanRoute.push(leg.route);

                        break;
                    case _aircraftConstants.FP_LEG_TYPE.MANUAL:
                        // no need to include these in flightplan (because wouldn't happen in real life)
                        break;
                    default:
                        break;
                }

                // TODO: this should be first and return early
                if (flightPlanRoute.length === 0) {
                    flightPlanRoute.push(this.legs[0].route);
                }
            }

            this.fp.route = flightPlanRoute;
        }

        /**
         * Calls various task-based functions and sets 'fms.following' flags
         */

    }, {
        key: 'followCheck',
        value: function followCheck() {
            var leg = this.currentLeg;
            this.following.anything = true;

            // tODO replace the string splitting with the `RouteModel`
            switch (leg.type) {
                case _aircraftConstants.FP_LEG_TYPE.SID:
                    this.following.sid = leg.route.procedure;
                    break;
                case _aircraftConstants.FP_LEG_TYPE.STAR:
                    this.following.star = leg.route.procedure;
                    break;
                case _aircraftConstants.FP_LEG_TYPE.IAP:
                    // *******NEEDS TO BE FINISHED***************************
                    // this.following.iap = ;
                    break;
                case 'tfc':
                    // **FUTURE FUNCTIONALITY**
                    // this.following.anything = true;
                    // this.following.tfc = // EID of the traffic we're following
                    break;
                case _aircraftConstants.FP_LEG_TYPE.AWY:
                    // **FUTURE FUNCTIONALITY**
                    this.following.awy = leg.route.split('.')[1];
                    break;
                default:
                    this.followClear();
                    return false;
            }

            return this.following;
        }

        // TODO: rename to something more accurate like `resetFollowingType`
        /**
         * Clears any current follows by updating the 'fms.following' flags
         */

    }, {
        key: 'followClear',
        value: function followClear() {
            this.following = {
                sid: null,
                star: null,
                iap: null,
                awy: null,
                tfc: null,
                anything: false
            };
        }

        /**
         * Join an instrument approach (eg. ILS/GPS/RNAV/VOR/LAAS/etc)
         *
         * @param {string} type - the type of approach (like "ils")
         * @param {Runway} rwy - the Runway object the approach ends into
         * @param {string} variant - (optional) for stuff like "RNAV-Z 17L"
         */

    }, {
        key: 'followApproach',
        value: function followApproach(type, rwy, variant) {
            // Note: 'variant' is set up to pass to this function, but is not used here yet.
            if (type === 'ils') {
                this.my_aircraft.cancelFix();
                // TODO: this looks like a model object
                this.setCurrent({
                    navmode: 'rwy',
                    runway: rwy.toUpperCase(),
                    turn: null,
                    start_speed: this.my_aircraft.speed
                });
            }
            // if-else all the other approach types here...
            // ILS, GPS, RNAV, VOR, NDB, LAAS/WAAS, MLS, etc...
        }

        /**
         * Inserts the SID as the first Leg in the fms's flightplan
         */

    }, {
        key: 'followSID',
        value: function followSID(route) {
            var airport = window.airportController.airport_get();

            for (var i = 0; i < this.legs.length; i++) {
                // sid assigned after taking off without SID
                if (this.legs[i].route === airport.icao) {
                    // remove the manual departure leg
                    this.legs.splice(i, 1);
                } else if (this.legs[i].type === _aircraftConstants.FP_LEG_TYPE.SID) {
                    // check to see if SID already assigned
                    // remove the old SID
                    this.legs.splice(i, 1);
                }
            }

            // Add the new SID Leg
            this.prependLeg({
                type: _aircraftConstants.FP_LEG_TYPE.SID,
                route: route
            });

            this.setAll({
                altitude: Math.max(airport.initial_alt, this.my_aircraft.altitude)
            });
        }

        /**
         * Inserts the STAR as the last Leg in the fms's flightplan
         */

    }, {
        key: 'followSTAR',
        value: function followSTAR(route) {
            for (var i = 0; i < this.legs.length; i++) {
                if (this.legs[i].type === _aircraftConstants.FP_LEG_TYPE.STAR) {
                    // check to see if STAR already assigned
                    this.legs.splice(i, 1); // remove the old STAR
                }
            }

            this.current = [0, 0];
            // Add the new STAR Leg
            this.appendLeg({
                route: route,
                type: _aircraftConstants.FP_LEG_TYPE.STAR
            });
        }

        // TODO: move this logic to the `RouteModel`
        /**
         * Takes a single-string route and converts it to a segmented route the fms can understand
         *
         * Note: Input Data Format : "KSFO.OFFSH9.SXC.V458.IPL.J2.JCT..LLO..ACT..KACT"
         *       Return Data Format: ["KSFO.OFFSH9.SXC", "SXC.V458.IPL", "IPL.J2.JCT", "LLO", "ACT", "KACT"]
         */

    }, {
        key: 'formatRoute',
        value: function formatRoute(data) {
            // const routeModel = new RouteModel(data);

            // Format the user's input
            var route = [];
            var airport = window.airportController.airport_get();
            var fixOK = function fixOK(fixName) {
                return _FixCollection2.default.findFixByName(fixName) !== null;
            };

            if (data.indexOf(' ') !== -1) {
                return; // input can't contain spaces
            }

            // TODO: this should be reassigned and returned instead of operating on the passed in paramater
            // split apart "direct" pieces
            data = data.split('..');

            // TODO: This block needs some work. the logic could be simplified.
            // deal with multilinks (eg 'KSFO.OFFSH9.SXC.V458.IPL')
            for (var i = 0; i < data.length; i++) {
                var a = void 0;

                if (data[i].split('.').length === 1) {
                    if (!fixOK(data[i])) {
                        return;
                    }

                    // just a fix/navaid
                    route.push(data[i]);
                    continue;
                } else {
                    // is a procedure, eg SID, STAR, IAP, airway, etc.
                    if (data[i].split('.').length % 2 !== 1) {
                        // user either didn't specify start point or end point
                        return;
                    }

                    // TODO: this should be abstracted to another class method.
                    var pieces = data[i].split('.');
                    // FIXME: what does 'a' mean? better naming
                    a = [pieces[0] + '.' + pieces[1] + '.' + pieces[2]];

                    // chop up the multilink
                    for (var j = 3; j < data[i].split('.').length; j + 2) {
                        if (!fixOK(pieces[0]) || !fixOK(pieces[2])) {
                            return; // invalid join/exit points
                        }

                        if (!airport.sidCollection.hasRoute(pieces[1]) || !Object.keys(airport.airways).indexOf(pieces[1])) {
                            // invalid procedure
                            return;
                        }

                        a.push(pieces[j - 1] + '.' + pieces[j] + pieces[j + 1]);
                    }
                }

                // push the properly reformatted multilink
                route = route.concat(a);
            }

            return route;
        }

        // TODO: refactor this to use `RouteModel` and possibly a `LegsCollection` class
        /**
         * Take an array of leg routes and build the legs that will go into the fms
         * @param {array} route - an array of properly formatted route strings
         *                        Example: ["KSFO.OFFSH9.SXC", "SXC.V458.IPL",
         *                                 "IPL.J2.JCT", "LLO", "ACT", "KACT"]
         * @param {boolean} fullRouteClearance - set to true IF you want the provided route to completely
         *                                       replace the current contents of 'this.legs'
         */

    }, {
        key: 'customRoute',
        value: function customRoute(route, fullRouteClearance) {
            // save the current waypoint
            var curr = this.currentWaypoint;

            var legs = [];

            for (var i = 0; i < route.length; i++) {
                var routeSections = route[i].split('.');

                // just a fix/navaid
                if (routeSections.length === 1) {
                    var legToAdd = new _Leg2.default({ type: _aircraftConstants.FP_LEG_TYPE.FIX, route: route[i] }, this);

                    legs.push(legToAdd);
                } else if (routeSections.length === 3) {
                    var routeModel = new _RouteModel2.default(route[i]);
                    var currentAirport = window.airportController.airport_get();

                    if (!(0, _isNil3.default)(currentAirport.sidCollection.findRouteByIcao(routeModel.procedure))) {
                        // it's a SID!
                        var _legToAdd = new _Leg2.default({ type: _aircraftConstants.FP_LEG_TYPE.SID, route: routeModel.routeCode }, this);

                        legs.push(_legToAdd);
                    } else if (!(0, _isNil3.default)(currentAirport.starCollection.findRouteByIcao(routeModel.procedure))) {
                        // it's a STAR!
                        var _legToAdd2 = new _Leg2.default({ type: _aircraftConstants.FP_LEG_TYPE.STAR, route: routeModel.routeCode }, this);

                        legs.push(_legToAdd2);
                    } else if (Object.keys(window.airportController.airport_get().airways).indexOf(routeModel.procedure) > -1) {
                        // it's an airway!
                        var _legToAdd3 = new _Leg2.default({ type: _aircraftConstants.FP_LEG_TYPE.AWY, route: routeModel.routeCode }, this);

                        legs.push(_legToAdd3);
                    }
                } else {
                    // neither formatted like "JAN" nor "JAN.V18.MLU"
                    log('Passed invalid route to fms. Unable to create leg from input: ' + route[i], _logLevel.LOG.WARNING);
                    return false;
                }
            }

            // TODO: this should be its own method
            // TODO: this could be simplified. there is a lot of branching logic here that makes this block tough to follow.
            // insert user's route to the legs
            if (!fullRouteClearance) {
                // Check if user's route hooks up to the current Legs anywhere
                var pieces = legs[legs.length - 1].route.split('.');
                var last_fix = pieces[pieces.length - 1];
                var continuity = this.indexOfWaypoint(last_fix);

                // user route connects with existing legs
                if (continuity) {
                    var inMiddleOfLeg = continuity.lw[1] !== this.legs[continuity.lw[0]].waypoints.length - 1;
                    var legsToRemove = Math.max(0, continuity.lw[0] - inMiddleOfLeg - this.current[LEG]);

                    if (inMiddleOfLeg) {
                        // change the existing leg @ merge point
                        // Remove the waypoints before the merge point
                        this.legs[continuity.lw[0]].waypoints.splice(0, continuity.lw[1]);
                        var r = this.legs[continuity.lw[0]].route.split('.');

                        // TODO: this should be a helper method
                        // Update the leg's route to reflect the change
                        this.legs[continuity.lw[0]].route = last_fix + '.' + r[1] + '.' + r[2];
                    }

                    // remove old legs before the point where the two routes join
                    this.legs.splice.apply(this.legs, [Math.max(0, continuity.lw[0] - legsToRemove), legsToRemove].concat(legs));
                    // move to the newly inserted Leg
                    this.current[LEG] = Math.max(0, continuity.lw[0] - legsToRemove);
                    this.current[WAYPOINT_WITHIN_LEG] = 0;
                } else {
                    // no route continuity... just adding legs
                    // insert the legs after the active Leg
                    this.legs.splice.apply(this.legs, [this.current[LEG] + 1, 0].concat(legs));
                    this.nextLeg();
                }
            } else {
                // TODO: move up and return early
                // replace all legs with the legs we've built here in this function
                this.legs = legs;
                this.current = [0, 0]; // look to beginning of route
            }

            this.update_fp_route();

            // Maintain old speed and altitude
            if (this.currentWaypoint.altitude == null) {
                this.setCurrent({ altitude: curr.altitude });
            }

            if (this.currentWaypoint.speed == null) {
                this.setCurrent({ speed: curr.speed });
            }

            return true;
        }

        /**
         * Climbs aircraft in compliance with the SID they're following
         * Adds altitudes and speeds to each waypoint that are as high as
         * possible without exceeding any the following:
         *    - (alt) airspace ceiling ('ctr_ceiling')
         *    - (alt) filed cruise altitude
         *    - (alt) waypoint's altitude restriciton
         *    - (spd) 250kts when under 10k ft
         *    - (spd) waypoint's speed restriction
         */

    }, {
        key: 'climbViaSID',
        value: function climbViaSID() {
            if (this.currentLeg.type !== _aircraftConstants.FP_LEG_TYPE.SID) {
                return false;
            }

            var wp = this.currentLeg.waypoints;
            var cruise_alt = this.fp.altitude;
            var cruise_spd = this.my_aircraft.model.speed.cruise;

            for (var i = 0; i < wp.length; i++) {
                var waypoint = wp[i];

                var _window$airportContro = window.airportController.airport_get(),
                    ctr_ceiling = _window$airportContro.ctr_ceiling;

                waypoint.setAltitude(ctr_ceiling, cruise_alt);
                waypoint.setSpeed(cruise_spd);
            }

            return true;
        }

        /**
         * Descends aircraft in compliance with the STAR they're following
         * Adds altitudes and speeds to each waypoint in accordance with the STAR
         */

    }, {
        key: 'descendViaSTAR',
        value: function descendViaSTAR() {
            var waypointList = this.getStarLegWaypoints();

            // TODO: would a star leg ever not have waypoints?
            if (!waypointList) {
                return;
            }

            var start_alt = this.currentWaypoint.altitude || this.my_aircraft.altitude;
            var start_spd = this.currentWaypoint.speed || this.my_aircraft.model.speed.cruise;

            for (var i = 0; i < waypointList.length; i++) {
                var waypoint = waypointList[i];
                var previousWaypoint = waypointList[i - 1];

                if (i >= 1) {
                    start_alt = previousWaypoint.altitude;
                    start_spd = previousWaypoint.speed;
                }

                waypoint.setAltitude(null, start_alt);
                waypoint.setSpeed(start_spd);
            }

            return true;
        }

        /** ************************ FMS QUERY FUNCTIONS **************************/
        /**
         * True if waypoint of the given name exists
         */

    }, {
        key: 'hasWaypoint',
        value: function hasWaypoint(name) {
            // TODO: lodash will simplify this logic block
            for (var i = 0; i < this.legs.length; i++) {
                for (var j = 0; j < this.legs[i].waypoints.length; j++) {
                    if (this.legs[i].waypoints[j].fix === name) {
                        return true;
                    }
                }
            }

            return false;
        }

        /**
         * Returns object's position in flightplan as object with 2 formats
         *
         * @param {string} fix - name of the fix to look for in the flightplan
         * @returns {wp: "position-of-fix-in-waypoint-list",
         *           lw: "position-of-fix-in-leg-wp-matrix"}
         */

    }, {
        key: 'indexOfWaypoint',
        value: function indexOfWaypoint(fix) {
            var wp = 0;

            for (var l = 0; l < this.legs.length; l++) {
                for (var w = 0; w < this.legs[l].waypoints.length; w++) {
                    if (this.legs[l].waypoints[w].fix === fix) {
                        // TODO: what do wp and lw stand for?
                        return {
                            wp: wp,
                            lw: [l, w]
                        };
                    }

                    wp++;
                }
            }

            return false;
        }

        /**
         * Returns currentWaypoint's position in flightplan as object with 2 formats
         * @returns {wp: "position-of-fix-in-waypoint-list",
         *           lw: "position-of-fix-in-leg-wp-matrix"}
         */

    }, {
        key: 'indexOfCurrentWaypoint',
        value: function indexOfCurrentWaypoint() {
            var wp = 0;
            for (var i = 0; i < this.current[LEG]; i++) {
                // add wp's of completed legs
                wp += this.legs[i].waypoints.length;
            }

            wp += this.current[WAYPOINT_WITHIN_LEG];

            // TODO: what do wp and lw stand for?
            return {
                wp: wp,
                lw: this.current
            };
        }

        /** ************************* FMS GET FUNCTIONS ***************************/

    }, {
        key: 'fixes',


        /**
        * Returns an array of all fixes along the flightplan route
        */
        value: function fixes() {
            return (0, _map3.default)(this.waypoints(), function (w) {
                return w.fix;
            });
        }

        /**
         * Return this fms's parent aircraft
         */

    }, {
        key: 'my_aircraft',
        value: function my_aircraft() {
            // TODO: if we already have a ref to the current aircraft, `this.my_aircraft`, why are we getting it again here?
            return window.aircraftController.aircraft_get(this.my_aircrafts_eid);
        }

        /**
         * Returns a waypoint at the provided position
         *
         * @method waypoint
         * @param {array or number} pos - position of the desired waypoint. May be
         *                          provided either as an array showing the leg and
         *                          waypoint within the leg (eg [l,w]), or as the
         *                          number representing the position of the desired
         *                          waypoint in the list of all waypoints (running
         *                          this.waypoints() will return the list)
         * @returns {Waypoint} - the Waypoint object at the specified location
         */

    }, {
        key: 'waypoint',
        value: function waypoint(pos) {
            // input is like [leg, waypointWithinLeg]
            if (Array.isArray(pos)) {
                return this.legs[pos[0]].waypoints[pos[1]];
            } else if (typeof pos === 'number') {
                // input is a position of wp in list of all waypoints
                var l = 0;

                // count up to pos to locate the waypoint
                while (pos >= 0) {
                    if (this.legs[l].waypoints.length <= pos) {
                        pos -= this.legs[l].waypoints.length;
                        l++;
                    } else {
                        return this.legs[l].waypoints[pos];
                    }
                }
            }

            return;
        }

        /**
         * Find a leg with type `star` and return that leg's waypoints.
         *
         * @method getSt
         * @return {array<Waypoint>}
         */

    }, {
        key: 'getStarLegWaypoints',
        value: function getStarLegWaypoints() {
            var starLeg = (0, _find3.default)(this.legs, { type: _aircraftConstants.FP_LEG_TYPE.STAR });

            return starLeg.waypoints || [];
        }

        /**
        * Returns all waypoints in fms, in order
        */

    }, {
        key: 'waypoints',
        value: function waypoints() {
            // TODO: move to _map() or refactor
            // TODO: there is a better way to do this with lodash
            var waypointList = _jquery2.default.map(this.legs, function (v) {
                return v.waypoints;
            });

            return waypointList;
        }
    }, {
        key: 'atLastWaypoint',
        value: function atLastWaypoint() {
            // TODO: simplify
            return this.indexOfCurrentWaypoint().wp === this.waypoints().length - 1;
        }

        /**
         * Given a SID that is currently being followed, return a string of: `SID_NAME.LAST_FIX`
         *
         * ex:
         * - current SID name = OFFSH9
         * - current SID route = KSFO.OFFSH9.SXC
         *
         * Given the above current values, this function would return:
         * `OFFSH9.SXC`
         *
         * @for AircraftFlightManagementSystem
         * @method getFollowingSideText
         * @return {string|null}
         */

    }, {
        key: 'getFollowingSIDText',
        value: function getFollowingSIDText() {
            if (!this.following.sid) {
                return null;
            }

            return this.following.sid + '.' + this.currentLeg.route.exit;
        }

        /**
         * @for AircraftFlightManagementSystem
         * @method getFollowingSTARText
         * @return {string|null}
         */

    }, {
        key: 'getFollowingSTARText',
        value: function getFollowingSTARText() {
            if (!this.following.star) {
                return null;
            }

            var _window$airportContro2 = window.airportController.airport_get(),
                icao = _window$airportContro2.icao;

            return this.following.star + '.' + icao.toUpperCase();
        }

        /**
         * Returns a string used in the `AircraftStripView` for a landing aircraft.
         *
         * `KSFO 28L`
         *
         * @for AircraftFlightManagementSystem
         * @method getDesinationIcaoWithRunway
         * @return {string}
         */

    }, {
        key: 'getDesinationIcaoWithRunway',
        value: function getDesinationIcaoWithRunway() {
            return (0, _last3.default)(this.fp.route) + ' ' + this.currentWaypoint.runway;
        }

        /**
         * @for AircraftFlightManagementSystem
         * @method altitudeForCurrentWaypoint
         * @return {number|null}
         */

    }, {
        key: 'altitudeForCurrentWaypoint',
        value: function altitudeForCurrentWaypoint() {
            return this.currentWaypoint.altitude;
        }
    }, {
        key: 'currentLeg',
        get: function get() {
            return this.legs[this.current[LEG]];
        }
    }, {
        key: 'currentWaypoint',
        get: function get() {
            if (this.legs.length < 1) {
                return null;
            }

            var currentLeg = this.currentLeg;

            return currentLeg.waypoints[this.current[WAYPOINT_WITHIN_LEG]];
        }
    }]);

    return AircraftFlightManagementSystem;
}();

exports.default = AircraftFlightManagementSystem;

},{"../../airport/Fix/FixCollection":546,"../../airport/Route/RouteModel":548,"../../constants/aircraftConstants":570,"../../constants/logLevel":574,"../../math/core":584,"./Leg":529,"./Waypoint":530,"jquery":296,"lodash/find":466,"lodash/isNil":485,"lodash/last":494,"lodash/map":496}],529:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _Waypoint = require('./Waypoint');

var _Waypoint2 = _interopRequireDefault(_Waypoint);

var _RouteModel = require('../../airport/Route/RouteModel');

var _RouteModel2 = _interopRequireDefault(_RouteModel);

var _aircraftConstants = require('../../constants/aircraftConstants');

var _logLevel = require('../../constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
  * This class acts as a collection of Waypoint model objects.
  *
  * @class Leg
  */
var Leg = function () {
    /**
     *
     * @for Leg
     * @constructor
     * @param data
     * @param {object} route:           "KSFO.OFFSH9.SXC", either a fix, or with format 'start.procedure.end', or
     *                                  "[RNAV/GPS]" for custom positions
     *                 type: "sid",     can be 'sid', 'star', 'iap', 'awy', 'fix'
     *                 firstIndex: 0    the position (index) in fms.legs to insert this leg
     */
    function Leg() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var fms = arguments[1];

        _classCallCheck(this, Leg);

        /**
         * String representation of a route.
         *
         * May be a single fix or a route expressed in dot notation. ex:
         * - `KSFO.OFFSH9.SXC`
         * - `FAITH`
         *
         * @property route
         * @type {string}
         * @default ''
         */
        this.route = '';

        /**
         * @property type
         * @type {string}
         * @default ''
         */
        this.type = '';

        // TODO: possibly implement as a waypointCollection
        /**
         * A collection of Waypoint instances
         *
         * @property waypoints
         * @type {Array}
         * @default []
         */
        this.waypoints = [];

        this.parse(data, fms);
    }

    /**
     * Parse input data and apply to this leg
     *
     * @for Leg
     * @method parse
     * @param data {object}
     * @param fms {AircraftFlightManagementSystem}
     */


    _createClass(Leg, [{
        key: 'parse',
        value: function parse(data, fms) {
            // TODO: move radar vectors to constants file
            this.route = (0, _get3.default)(data, 'route', '[radar vectors]');
            this.type = (0, _get3.default)(data, 'type', _aircraftConstants.FP_LEG_TYPE.MANUAL);
            this.waypoints = (0, _get3.default)(data, 'waypoints', []);

            if (this.waypoints.length === 0) {
                this.generateWaypoints(data, fms);
            }
        }

        /**
         * Adds Waypoint objects to this Leg based on the route type
         *
         * @for Leg
         * @method generateWaypoints
         * @param data {object}
         * @param fms {AircraftFlightManagementSystem}
         */

    }, {
        key: 'generateWaypoints',
        value: function generateWaypoints(data, fms) {
            if (!this.type) {
                return;
            }

            var airport = window.airportController.airport_get();

            switch (this.type) {
                case _aircraftConstants.FP_LEG_TYPE.SID:
                    // TODO: this is gross. we instantiate route with a string and new mutate it here to a RouteModel.
                    this.route = new _RouteModel2.default(data.route);
                    this._generateWaypointsForSid(data, fms);

                    break;
                case _aircraftConstants.FP_LEG_TYPE.STAR:
                    // TODO: this is gross. we instantiate route with a string and new mutate it here to a RouteModel.
                    this.route = new _RouteModel2.default(data.route);
                    this._generateWaypointsForStar(data, fms);

                    break;
                case _aircraftConstants.FP_LEG_TYPE.IAP:
                    // FUTURE FUNCTIONALITY
                    this._generateWaypointsForIap(data, airport);

                    break;
                case _aircraftConstants.FP_LEG_TYPE.AWY:
                    // TODO: this is gross. we instantiate route with a string and new mutate it here to a RouteModel.
                    this.route = new _RouteModel2.default(data.route);
                    this._generateWaypointsForAirway(data, airport);

                    break;
                case _aircraftConstants.FP_LEG_TYPE.FIX:
                    this._generateWaypointForFix(airport);

                    break;
                case _aircraftConstants.FP_LEG_TYPE.MANUAL:
                    this._generateManualWaypoint(airport);

                    break;
                default:
                    this._generateEmptyWaypoint(airport);

                    break;
            }
        }

        /**
         * Add a new Waypoint to the collection
         *
         * @method addWaypointToLeg
         * @param waypointToAdd {Waypoint}
         */

    }, {
        key: 'addWaypointToLeg',
        value: function addWaypointToLeg(waypointToAdd) {
            if (!(waypointToAdd instanceof _Waypoint2.default)) {
                throw new TypeError('Invalid parameter, expecte waypointToAdd to be an instanceof the Waypoint class');
            }

            this.waypoints.push(waypointToAdd);
        }

        /**
         * @for Leg
         * @method _generateWaypointsForSid
         * @param data {object}
         * @param fms {AircraftFlightManagementSystem}
         * @private
         */

    }, {
        key: '_generateWaypointsForSid',
        value: function _generateWaypointsForSid(data, fms) {
            if (!fms) {
                log('Attempted to generate waypoints for SID, but cannot because fms ref not passed!', _logLevel.LOG.WARNING);

                return;
            }

            this._resetWaypoints();

            var rwy = fms.my_aircraft.rwy_dep;

            if (!rwy) {
                var isWarning = true;

                window.uiController.ui_log(fms.my_aircraft.getCallsign() + ' unable to fly SID, we haven\'t been assigned a departure runway!', isWarning);

                return;
            }

            var airport = window.airportController.airport_get(this.route.entry);
            var waypointsForSid = airport.findWaypointModelsForSid(this.route.procedure, rwy, this.route.exit);

            // TODO: refactor/abstract this boolean logic
            // Remove the placeholder leg (if present)
            if (fms.my_aircraft.isOnGround() && fms.legs.length > 0 && fms.legs[0].route === airport.icao && pairs.length > 0) {
                // remove the placeholder leg, to be replaced below with SID Leg
                fms.legs.splice(0, 1);
            }

            for (var i = 0; i < waypointsForSid.length; i++) {
                var waypointToAdd = waypointsForSid[i].generateFmsWaypoint(airport);

                this.addWaypointToLeg(waypointToAdd);
            }

            if (!this.waypoints[0].speed) {
                this.waypoints[0].speed = fms.my_aircraft.model.speed.cruise;
            }
        }

        /**
         * @for Leg
         * @method _generateWaypointsForStar
         * @param data {object}
         * @param fms {AircraftFlightManagementSystem}
         * @private
         */

    }, {
        key: '_generateWaypointsForStar',
        value: function _generateWaypointsForStar(data, fms) {
            if (!fms) {
                log('Attempted to generate waypoints for STAR, but cannot because fms ref not passed!', _logLevel.LOG.WARNING);

                return;
            }

            this._resetWaypoints();

            var rwy = fms.my_aircraft.rwy_arr;
            var airport = window.airportController.airport_get(this.route.exit);
            var waypointsForStar = airport.findWaypointModelsForStar(this.route.procedure, this.route.entry, rwy);

            for (var i = 0; i < waypointsForStar.length; i++) {
                var waypointToAdd = waypointsForStar[i].generateFmsWaypoint(airport);

                this.addWaypointToLeg(waypointToAdd);
            }

            if (!this.waypoints[0].speed) {
                this.waypoints[0].speed = fms.my_aircraft.model.speed.cruise;
            }
        }

        // NOT IN USE

    }, {
        key: '_generateWaypointsForIap',
        value: function _generateWaypointsForIap(data, airport) {
            return;
        }

        // NOT IN USE
        /**
         * @for Leg
         * @method _generateWaypointsForAirway
         * @param data {object}
         * @param fms {AircraftFlightManagementSystem}
         * @private
         */

    }, {
        key: '_generateWaypointsForAirway',
        value: function _generateWaypointsForAirway(data, airport) {
            var _this = this;

            var start = this.route.split('.')[0];
            var airway = this.route.split('.')[1];
            var end = this.route.split('.')[2];
            // Verify airway is valid
            var apt = window.airportController.airport_get();

            if (!(0, _has3.default)(apt, 'airways') || !(0, _has3.default)(apt.airways, 'airway')) {
                log('Airway ' + airway + ' not defined at ' + apt.icao, _logLevel.LOG.WARNING);
                return;
            }

            // Verify start/end points are along airway
            var awy = apt.airways[airway];
            if (!(awy.indexOf(start) !== -1 && awy.indexOf(end) !== -1)) {
                log('Unable to follow ' + airway + ' from ' + start + ' to ' + end, _logLevel.LOG.WARNING);
                return;
            }

            // TODO: abstract this logic
            // Build list of fixes, depending on direction traveling along airway
            var fixes = [];
            var readFwd = awy.indexOf(end) > awy.indexOf(start);

            if (readFwd) {
                for (var f = awy.indexOf(start); f <= awy.indexOf(end); f++) {
                    fixes.push(awy[f]);
                }
            } else {
                for (var _f = awy.indexOf(start); _f >= awy.indexOf(end); _f--) {
                    fixes.push(awy[_f]);
                }
            }

            this._resetWaypoints();

            (0, _forEach3.default)(fixes, function (fix) {
                var waypointToAdd = new _Waypoint2.default({ fix: fix }, airport);

                _this.addWaypointToLeg(waypointToAdd);
            });
        }

        /**
         * @for Leg
         * @method _generateWaypointForFix
         * @param airport {AirportInstanceModel}
         * @private
         */

    }, {
        key: '_generateWaypointForFix',
        value: function _generateWaypointForFix(airport) {
            this._resetWaypoints();

            var waypointToAdd = new _Waypoint2.default({ fix: this.route }, airport);

            this.addWaypointToLeg(waypointToAdd);
        }

        /**
         * @for Leg
         * @method _generateManualWaypoint
         * @param airport {AirportInstanceModel}
         * @private
         */

    }, {
        key: '_generateManualWaypoint',
        value: function _generateManualWaypoint(airport) {
            var waypointToAdd = new _Waypoint2.default({ route: this.route }, airport);

            this.addWaypointToLeg(waypointToAdd);
        }

        /**
         * @for Leg
         * @method _generateEmptyWaypoint
         * @param airport {AirportInstanceModel}
         * @private
         */

    }, {
        key: '_generateEmptyWaypoint',
        value: function _generateEmptyWaypoint(airport) {
            var waypointToAdd = new _Waypoint2.default({ route: '' }, airport);

            this.addWaypointToLeg(waypointToAdd);
        }

        /**
         * Reset the waypoint property to an empty array.
         *
         * Provides a single method that encapsulates common functionality that
         * can be used throughout the class.
         *
         * @for Leg
         * @method _resetWaypoints
         * @private
         */

    }, {
        key: '_resetWaypoints',
        value: function _resetWaypoints() {
            this.waypoints = [];
        }
    }]);

    return Leg;
}();

exports.default = Leg;

},{"../../airport/Route/RouteModel":548,"../../constants/aircraftConstants":570,"../../constants/logLevel":574,"./Waypoint":530,"lodash/forEach":468,"lodash/get":469,"lodash/has":470,"lodash/map":496}],530:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _head2 = require('lodash/head');

var _head3 = _interopRequireDefault(_head2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _FixCollection = require('../../airport/Fix/FixCollection');

var _FixCollection2 = _interopRequireDefault(_FixCollection);

var _aircraftConstants = require('../../constants/aircraftConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Symbol denoting a greater than restriction
 *
 * @property ABOVE_SYMBOL
 * @type {string}
 * @final
 */
var ABOVE_SYMBOL = '+';

/**
 * Symbol denoting a less than restriction
 *
 * @property ABOVE_SYMBOL
 * @type {string}
 * @final
 */
var BELOW_SYMBOL = '-';

// TODO: there should be a helper function for this
/**
 * Number to used to cnovert a FL altitude to an altitude in thousands
 *
 * @property ABOVE_SYMBOL
 * @type {string}
 * @final
 */
var FL_TO_THOUSANDS_MULTIPLIER = 100;

/**
 * Enemuration for an invalid index number.
 *
 * @property INVALID_INDEX
 * @type {number}
 * @final
 */
var INVALID_INDEX = -1;

/**
 * Enumeration for the radix value of `parseInt`
 *
 * @proeprty DECIMAL_RADIX
 * @type {number}
 * @final
 */
var DECIMAL_RADIX = 10;

/**
  * Build a waypoint object
  *
  * Note that .prependLeg() or .appendLeg() or .insertLeg()
  * should be called in order to add waypoints to the fms, based on which
  * you want. This function serves only to build the waypoint object; it is
  * placed by one of the other three functions.
  *
  * @class Waypoint
  */

var Waypoint = function () {
    /**
     * Initialize Waypoint with empty values, then call the parser
     *
     * @for Waypoint
     * @constructor
     */
    function Waypoint() {
        var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var airport = arguments[1];

        _classCallCheck(this, Waypoint);

        this.altitude = null;
        this.fix = null;
        this.navmode = null;
        this.heading = null;
        this.turn = null;
        this.location = null;
        this.expedite = false;
        this.speed = null;

        this.hold = {
            dirTurns: null,
            fixName: null,
            fixPos: null,
            inboundHd: null,
            legLength: null,
            timer: 0
        };

        this.fixRestrictions = {
            alt: null,
            spd: null
        };

        this.route = '';

        this.parse(data, airport);
    }

    /**
     * Parse input data and apply to this waypoint
     *
     * @for Waypoint
     * @method parse
     * @param data {object}
     */


    _createClass(Waypoint, [{
        key: 'parse',
        value: function parse(data, airport) {
            // TODO: is this used?
            this.route = (0, _get3.default)(data, 'route', this.route);
            this.altitude = (0, _get3.default)(data, 'altitude', this.altitude);
            this.navmode = (0, _get3.default)(data, 'navmode', this.navmode);
            this.heading = (0, _get3.default)(data, 'heading', this.heading);
            this.turn = (0, _get3.default)(data, 'turn', this.turn);
            this.location = (0, _get3.default)(data, 'location', this.location);
            this.expedite = (0, _get3.default)(data, 'expedite', this.expedite);
            this.speed = (0, _get3.default)(data, 'speed', this.speed);
            this.hold = (0, _get3.default)(data, 'hold', this.hold);

            // Populate Waypoint with data
            if (data.fix) {
                this.navmode = _aircraftConstants.WAYPOINT_NAV_MODE.FIX;
                this.fix = data.fix;
                this.location = _FixCollection2.default.getFixPositionCoordinates(data.fix);
            }

            this.extractFixRestrictions(data);
            this.setInitialNavMode(airport);
        }

        /**
         * @for Waypoint
         * @method extractFixRestrictions
         * @param fixRestrictions {object}
         */

    }, {
        key: 'extractFixRestrictions',
        value: function extractFixRestrictions(_ref) {
            var fixRestrictions = _ref.fixRestrictions;

            if ((0, _isNil3.default)(fixRestrictions)) {
                return;
            }

            this.fixRestrictions = fixRestrictions;
        }

        /**
         * If there isn't a navmode set, set one here
         *
         * For aircraft that don't yet have proper guidance (eg: SID/STAR, or departing aircraft)
         *
         * @for Waypoint
         * @method setInitialNavMode
         */

    }, {
        key: 'setInitialNavMode',
        value: function setInitialNavMode(airport) {
            if (this.navmode) {
                return;
            }

            this.navmode = _aircraftConstants.WAYPOINT_NAV_MODE.HEADING;
            var firstRouteSegment = (0, _head3.default)(this.route.split('.'));

            if (firstRouteSegment === airport.icao && this.heading === null) {
                // aim departure along runway heading
                var _airport$getRunway = airport.getRunway(airport.runway),
                    angle = _airport$getRunway.angle;

                this.heading = angle;
            } else if (firstRouteSegment === 'UNASSIGNED' && this.heading === null) {
                // FIXME: radial is not defined or set anywhere in this class. this block DOES get hit for
                // every arriving aircraft

                // aim arrival @ middle of airspace
                this.heading = this.radial + Math.PI;
            }
        }

        // TODO: rename centerCeiling and make this method more flexible
        // TODO: use a default constant for cruiseAltitude
        /**
         * @for Waypoint
         * @method setAltitude
         * @param centerCeiling {number}  ceiling of the airspace in feet
         * @param cruiseAltitude {number} cruiseAltitude of the current aircraft
         */

    }, {
        key: 'setAltitude',
        value: function setAltitude() {
            var centerCeiling = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
            var cruiseAltitude = arguments[1];
            var altitudeRestriction = this.fixRestrictions.alt;


            if (!altitudeRestriction) {
                this.altitude = !(0, _isNil3.default)(centerCeiling) ? Math.min(centerCeiling, cruiseAltitude) : cruiseAltitude;

                return;
            }

            // TODO: there has to be an easier way to do this logic.
            if (altitudeRestriction.indexOf(ABOVE_SYMBOL) !== INVALID_INDEX) {
                // at-or-above altitudeRestriction restriction
                var minAlt = parseInt(altitudeRestriction.replace(ABOVE_SYMBOL, ''), DECIMAL_RADIX);
                var minimumAltitudeWithoutSymbol = minAlt * FL_TO_THOUSANDS_MULTIPLIER;

                // not a fan of this ternary, but I don't think there is a better way to do it
                this.altitude = minimumAltitudeWithoutSymbol > cruiseAltitude ? minimumAltitudeWithoutSymbol : cruiseAltitude;
            } else if (altitudeRestriction.indexOf(BELOW_SYMBOL) !== INVALID_INDEX) {
                var maxAlt = parseInt(altitudeRestriction.replace(BELOW_SYMBOL, ''), DECIMAL_RADIX);
                var maximumAltitudeWithoutSymbol = maxAlt * FL_TO_THOUSANDS_MULTIPLIER;

                // climb as high as restrictions permit
                this.altitude = Math.min(maximumAltitudeWithoutSymbol, cruiseAltitude);
            } else {
                // cross AT this altitudeRestriction
                this.altitude = parseInt(altitudeRestriction, DECIMAL_RADIX) * FL_TO_THOUSANDS_MULTIPLIER;
            }
        }

        /**
         * @for Waypoint
         * @method setSpeed
         * @param cruiseSpeed {number}  cruiseSpeed of the current aircraft
         */

    }, {
        key: 'setSpeed',
        value: function setSpeed(cruiseSpeed) {
            var speedRestriction = this.fixRestrictions.spd;


            if (!speedRestriction) {
                this.speed = cruiseSpeed;

                return;
            }

            // TODO: there has to be an easier way to do this logic.
            if (speedRestriction.indexOf(ABOVE_SYMBOL) !== INVALID_INDEX) {
                // at-or-above speed restriction
                var minSpd = parseInt(speedRestriction.replace(ABOVE_SYMBOL, ''), DECIMAL_RADIX);

                this.speed = minSpd > cruiseSpeed ? minSpd : cruiseSpeed;
            } else if (speedRestriction.indexOf(BELOW_SYMBOL) !== INVALID_INDEX) {
                var maxSpd = parseInt(speedRestriction.replace(BELOW_SYMBOL, ''), DECIMAL_RADIX);

                // go as fast as restrictions permit
                this.speed = Math.min(maxSpd, cruiseSpeed);
            } else {
                // cross AT this speed
                this.speed = parseInt(speedRestriction, DECIMAL_RADIX);
            }
        }
    }]);

    return Waypoint;
}();

exports.default = Waypoint;

},{"../../airport/Fix/FixCollection":546,"../../constants/aircraftConstants":570,"lodash/get":469,"lodash/head":472,"lodash/isNil":485}],531:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _AirlineModel = require('./AirlineModel');

var _AirlineModel2 = _interopRequireDefault(_AirlineModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Temporary const declaration here to attach to the window AND use as internal property
var airline = {};

/**
 * @class AirlineController
 */

var AirlineController = function () {
    /**
     * @constructor
     */
    function AirlineController() {
        _classCallCheck(this, AirlineController);

        this.airline = airline;
        this.airline.airlines = {};
        prop.airline = airline;
    }

    /**
     * @for AirlineController
     * @method airline_get
     * @param icao {string}
     * return {AirlineModel|null}
     */


    _createClass(AirlineController, [{
        key: 'airline_get',
        value: function airline_get(icao) {
            icao = icao.toLowerCase();

            if (!(0, _has3.default)(this.airline.airlines, icao)) {
                this.addAirline(icao);
            }

            return this.airline.airlines[icao];
        }

        /**
         * @for airlineController
         * @method addAirline
         * @param icao {string}
         */

    }, {
        key: 'addAirline',
        value: function addAirline(icao) {
            var airlineToAdd = new _AirlineModel2.default(icao, {
                url: 'assets/airlines/' + icao + '.json'
            });

            this.airline.airlines[icao] = airlineToAdd;
        }
    }]);

    return AirlineController;
}();

exports.default = AirlineController;

},{"./AirlineModel":532,"lodash/has":470}],532:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _generalUtilities = require('../utilities/generalUtilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * An aircrcraft operating agency
 *
 * @class AirlineModel
 */
var AirlineModel = function () {
    /**
     * Create new airline
     *
     * @constructor
     * @for AirlineModel
     * @param icao {string}
     * @param options {object}
     */
    function AirlineModel(icao, options) {
        _classCallCheck(this, AirlineModel);

        // ICAO airline designation
        this.icao = icao;
        // Agency name
        this.name = (0, _get3.default)(options, 'name', 'Default airline');
        // Radio callsign
        this.callsign = 'Default';
        // Parameters for flight number generation
        this.flightNumberGeneration = {
            // How many characters in the flight number
            length: 3,
            // Whether to use alphabetical characters
            alpha: false
        };

        // Named weighted sets of aircraft
        this.fleets = {
            default: []
        };

        this.loading = true;
        this.loaded = false;
        this.priorityLoad = false;
        this._pendingAircraft = [];

        this.parse(options);

        if (options.url) {
            this.load(options.url);
        }
    }

    /**
     * Initialize object from data
     *
     * This method will be called twice at minimum; once on instantiation and again once
     * `onLoadSuccess`. Most of the properties below will only be available `onLoadSuccess`
     *
     * @for AirlineModel
     * @method parse
     * @param data {object}
     */


    _createClass(AirlineModel, [{
        key: 'parse',
        value: function parse(data) {
            this.icao = (0, _get3.default)(data, 'icao', this.icao);

            if (data.callsign) {
                this.callsign = data.callsign.name;

                if (data.callsign.length) {
                    this.flightNumberGeneration.length = data.callsign.length;
                }

                this.flightNumberGeneration.alpha = (0, _has3.default)(data, 'callsign.alpha');
            }

            if (data.fleets) {
                this.fleets = data.fleets;
            } else if (data.aircraft) {
                this.fleets.default = data.aircraft;
            }

            (0, _forEach3.default)(this.fleets, function (fleet) {
                (0, _forEach3.default)(fleet, function (aircraftInFleet) {
                    var NAME_INDEX = 0;
                    aircraftInFleet[NAME_INDEX] = aircraftInFleet[NAME_INDEX].toLowerCase();
                });
            });
        }

        /**
         * Load the data for this airline
         *
         * @for AirlineModel
         * @method load
         * @param url {string}
         */

    }, {
        key: 'load',
        value: function load(url) {
            var _this = this;

            this._url = url;

            if (this.loaded) {
                return;
            }

            zlsa.atc.loadAsset({
                url: url,
                immediate: this.priorityLoad
            }).done(function (response) {
                return _this.onLoadSuccess(response);
            }).fail(function () {
                return _this.onLoadError.apply(_this, arguments);
            });
        }

        /**
         * @for AirlineModel
         * @method onLoadSuccess
         * @param response {object}
         */

    }, {
        key: 'onLoadSuccess',
        value: function onLoadSuccess(response) {
            this.parse(response);

            this.loading = false;
            this.loaded = true;

            this.validateFleets();
            this._generatePendingAircraft();
        }

        /**
         * @for AirlineModel
         * @method onLoadError
         * @param textStatus {string}
         */

    }, {
        key: 'onLoadError',
        value: function onLoadError(_ref) {
            var textStatus = _ref.textStatus;

            this.loading = false;
            this._pendingAircraft = [];

            console.error('Unable to load airline/' + this.icao + ': ' + textStatus);
        }

        /**
         * Return a random ICAO aircraft designator from the given fleet
         *
         * If no fleet is specified the default fleet is used
         *
         * @for AirlineModel
         * @method chooseAircraft
         * @param fleet
         * @return
         */

    }, {
        key: 'chooseAircraft',
        value: function chooseAircraft(fleet) {
            if (!fleet) {
                fleet = 'default';
            }

            // TODO: why is this a try/catch?
            // TODO: this try/catch block could be improved. its hard to tell what his block is actually doing.
            try {
                return (0, _generalUtilities.choose_weight)(this.fleets[fleet.toLowerCase()]);
            } catch (error) {
                console.log('Unable to find fleet ' + fleet + ' for airline ' + this.icao);

                throw error;
            }
        }

        /**
         * Create an aircraft
         *
         * @for AirlineModel
         * @method generateAircraft
         * @param options {object}
         * @return
         */

    }, {
        key: 'generateAircraft',
        value: function generateAircraft(options) {
            if (!this.loaded) {
                if (this.loading) {
                    this._pendingAircraft.push(options);

                    if (!this.priorityLoad) {
                        zlsa.atc.loadAsset({
                            url: this._url,
                            immediate: true
                        });

                        this.priorityLoad = true;
                    }

                    return true;
                }

                console.warn('Unable to spawn aircraft for airline/ ' + this.icao + ' as loading failed');

                return false;
            }

            return this._generateAircraft(options);
        }

        // TODO: the logic here can be simplified.
        /**
         * Create a flight number/identifier
         *
         * @for AirlineModel
         * @method generateFlightNumber
         * @return flightNumber {string}
         */

    }, {
        key: 'generateFlightNumber',
        value: function generateFlightNumber() {
            var flightNumber = '';
            var list = '0123456789';

            // Start with a number other than zero
            flightNumber += (0, _generalUtilities.choose)(list.substr(1));

            if (this.flightNumberGeneration.alpha) {
                // TODO: why `this.flightNumberGeneration.length - 3`?  enumerate the magic number.
                for (var i = 0; i < this.flightNumberGeneration.length - 3; i++) {
                    flightNumber += (0, _generalUtilities.choose)(list);
                }

                list = 'abcdefghijklmnopqrstuvwxyz';

                for (var _i = 0; _i < 2; _i++) {
                    flightNumber += (0, _generalUtilities.choose)(list);
                }
            } else {
                for (var _i2 = 1; _i2 < this.flightNumberGeneration.length; _i2++) {
                    flightNumber += (0, _generalUtilities.choose)(list);
                }
            }

            // if this flightNumber already exists, repeat the process of generating a new flightNumber
            if (window.aircraftController.isCallsignInList(flightNumber)) {
                return this.generateFlightNumber();
            }

            return flightNumber;
        }

        /**
         * Checks all fleets for valid aircraft identifiers and log errors
         *
         * @for AirlineModel
         * @method validateFleets
         */

    }, {
        key: 'validateFleets',
        value: function validateFleets() {
            var _this2 = this;

            (0, _forEach3.default)(this.fleets, function (fleet) {
                (0, _forEach3.default)(fleet, function (fleetAircraft) {
                    var NAME_INDEX = 0;
                    // Preload the aircraft model
                    window.aircraftController.aircraft_model_get(fleetAircraft[NAME_INDEX]);

                    if (typeof fleetAircraft[1] !== 'number') {
                        console.warn('Airline ' + _this2.icao.toUpperCase() + ' uses non numeric weight for aircraft ' + fleetAircraft[NAME_INDEX] + ', expect errors');
                    }
                });
            });
        }

        /**
         * Generate aircraft which were queued while the model loaded
         *
         * @for AirlineModel
         * @method _generatePendingAircraft
         * @private
         */

    }, {
        key: '_generatePendingAircraft',
        value: function _generatePendingAircraft() {
            var _this3 = this;

            (0, _forEach3.default)(this._pendingAircraft, function (aircraftOptions) {
                _this3._generateAircraft(aircraftOptions);
            });

            this._pendingAircraft = null;
        }

        /**
         * @for AirlineModel
         * @method _generateAircraft
         * @param options {object}
         * @return {function}
         */

    }, {
        key: '_generateAircraft',
        value: function _generateAircraft(options) {
            if (!options.callsign) {
                options.callsign = this.generateFlightNumber();

                window.aircraftController.addCallsignToList(options.callsign);
            }

            if (!options.icao) {
                options.icao = this.chooseAircraft(options.fleet);
            }

            var model = window.aircraftController.aircraft_model_get(options.icao.toLowerCase());

            return model.generateAircraft(options);
        }
    }]);

    return AirlineModel;
}();

exports.default = AirlineModel;

},{"../utilities/generalUtilities":592,"lodash/forEach":468,"lodash/get":469,"lodash/has":470}],533:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.randomAirlineSelectionHelper = exports.airlineNameAndFleetHelper = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _generalUtilities = require('../utilities/generalUtilities');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: this file needs to be renamed to something more generalized.

/**
 * Symobl that possibly seperates and airline name from its fleet classification
 *
 * @property NAME_FLEET_SEPERATOR
 * @type {string}
 * @final
 */
var NAME_FLEET_SEPERATOR = '/';

/**
 * @property INVALID_INDEX
 * @type {number}
 * @final
 */
var INVALID_INDEX = -1;

/**
 * Enemeration of an index value of `0`
 *
 * @property FIRST_INDEX
 * @type {number}
 * @final
 */
var FIRST_INDEX = 0;

/**
 * Enemeration of an index value of `1`
 *
 * @property SECOND_INDEX
 * @type {number}
 * @final
 */
var SECOND_INDEX = 1;

/**
 * Accepts a selected airline name, which may or may not contain the `NAME_FLEET_SEPERATOR`, and
 * returns the `airlineNameAndFleet` object with updated property values.
 *
 * @function _extractNameAndFleetFromCurrentAirline
 * @param selectedAirline {string}
 * @param airlineNameAndFleet {object}
 * @return airlineNameAndFleet {object}
 */
var _extractNameAndFleetFromCurrentAirline = function _extractNameAndFleetFromCurrentAirline(selectedAirline, airlineNameAndFleet) {
    airlineNameAndFleet.name = selectedAirline;

    if (selectedAirline.indexOf(NAME_FLEET_SEPERATOR) > INVALID_INDEX) {
        var nameAndFleet = selectedAirline.split(NAME_FLEET_SEPERATOR);

        airlineNameAndFleet.name = nameAndFleet[FIRST_INDEX];
        airlineNameAndFleet.fleet = nameAndFleet[SECOND_INDEX];
    }

    return airlineNameAndFleet;
};

/**
 * Accepts an airline, as defined in an airport json file from the `departures` and `arrivals` sections,
 * and returns a consistent object containing an airline name and fleet classification.
 *
 * @method airlineNameAndFleetHelper
 * @param airline {string}
 * @return airlineNameAndFleet {object}
 */
var airlineNameAndFleetHelper = exports.airlineNameAndFleetHelper = function airlineNameAndFleetHelper(airline) {
    if (!(0, _isArray3.default)(airline)) {
        throw new TypeError('Invalid parameter. Expected airline to be an array but instead received ' + (typeof airline === 'undefined' ? 'undefined' : _typeof(airline)));
    }

    // this could be a model object, but the values used here are temporary so we just use a constant
    // and update its key values as needed.
    var airlineNameAndFleet = {
        name: '',
        fleet: ''
    };

    if (airline.length === 0) {
        return airlineNameAndFleet;
    }

    return _extractNameAndFleetFromCurrentAirline(airline[FIRST_INDEX], airlineNameAndFleet);
};

/**
 * Accepts a list of airlines, as defined in an airport json file from the `departures` and `arrivals` sections,
 * and returns a consistent object containing an airline name and fleet classification.
 *
 * @function randomAirlineSelectionHelper
 * @param airlineList {array}
 * @return {object}
 */
var randomAirlineSelectionHelper = exports.randomAirlineSelectionHelper = function randomAirlineSelectionHelper(airlineList) {
    // TODO: a large portion of this function is duplicated above, refactor
    if (!(0, _isArray3.default)(airlineList)) {
        throw new TypeError('Invalid parameter. Expected airlineList to be an array but instead received ' + (typeof airlineList === 'undefined' ? 'undefined' : _typeof(airlineList)));
    }

    // this could be a model object, but the values used here are temporary so we just use a constant
    // and update its key values as needed.
    var airlineNameAndFleet = {
        name: '',
        fleet: ''
    };

    if (airlineList.length === 0) {
        return airlineNameAndFleet;
    }

    var selectedAirline = (0, _generalUtilities.choose_weight)(airlineList);

    return _extractNameAndFleetFromCurrentAirline(selectedAirline, airlineNameAndFleet);
};

},{"../utilities/generalUtilities":592,"lodash/isArray":476}],534:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _lowerCase2 = require('lodash/lowerCase');

var _lowerCase3 = _interopRequireDefault(_lowerCase2);

var _AirlineController = require('../airline/AirlineController');

var _AirlineController2 = _interopRequireDefault(_AirlineController);

var _AircraftController = require('../aircraft/AircraftController');

var _AircraftController2 = _interopRequireDefault(_AircraftController);

var _AirportModel = require('./AirportModel');

var _AirportModel2 = _interopRequireDefault(_AirportModel);

var _storageKeys = require('../constants/storageKeys');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Temporary const declaration here to attach to the window AND use as internal property
var airport = {};

/**
 * @property DEFAULT_AIRPORT_ICAO
 * @type {string}
 * @final
 */
var DEFAULT_AIRPORT_ICAO = 'ksfo';

/**
 * @class AirportController
 */

var AirportController = function () {
    /**
     * @constructor
     * @param airportLoadList {array<object>}  List of airports to load
     * @param updateRun {function}
     */
    function AirportController(airportLoadList, updateRun) {
        _classCallCheck(this, AirportController);

        this.updateRun = updateRun;
        this.airport = airport;
        this.airport.airports = {};
        this.airport.current = null;
        this.airlineController = null;
        this.aircraftController = null;
        this._airportListToLoad = airportLoadList;
    }

    /**
     * Lifecycle method. Should run only once on App initialiazation
     *
     * @for AirportController
     * @method init_pre
     */


    _createClass(AirportController, [{
        key: 'init_pre',
        value: function init_pre() {
            prop.airport = airport;

            this.airlineController = new _AirlineController2.default();
            this.aircraftController = new _AircraftController2.default();

            window.airlineController = this.airlineController;
            window.aircraftController = this.aircraftController;
        }

        /**
         * Lifecycle method. Should run only once on App initialiazation
         *
         * Load each airport in the `airportLoadList`
         *
         * @for AirportController
         * @method init
         */

    }, {
        key: 'init',
        value: function init() {
            for (var i = 0; i < this._airportListToLoad.length; i++) {
                var _airport = this._airportListToLoad[i];

                this.airport_load(_airport);
            }
        }

        /**
         * Lifecycle method called from `App`.
         *
         * This acts as a fascade for the `aircraftController.aircraft_update` method,
         * where aircraft data is recalculated before re-rendering
         *
         * @method recalculate
         */

    }, {
        key: 'recalculate',
        value: function recalculate() {
            this.aircraftController.aircraft_update();
        }

        /**
         * Lifecycle method. Should run only once on App initialiazation
         *
         * @for AirportController
         * @method ready
         */

    }, {
        key: 'ready',
        value: function ready() {
            var airportName = DEFAULT_AIRPORT_ICAO;

            if ((0, _has3.default)(localStorage, _storageKeys.STORAGE_KEY.ATC_LAST_AIRPORT) || (0, _has3.default)(this.airport.airports, (0, _lowerCase3.default)(localStorage[_storageKeys.STORAGE_KEY.ATC_LAST_AIRPORT]))) {
                airportName = (0, _lowerCase3.default)(localStorage[_storageKeys.STORAGE_KEY.ATC_LAST_AIRPORT]);
            }

            this.airport_set(airportName);
        }

        /**
         * @function airport_load
         * @param icao {string}
         * @param level {string}
         * @param name {string}
         * @return airport {AirtportInstance}
         */

    }, {
        key: 'airport_load',
        value: function airport_load(_ref) {
            var icao = _ref.icao,
                level = _ref.level,
                name = _ref.name;

            icao = icao.toLowerCase();

            if (this.hasAirport()) {
                console.log(icao + ': already loaded');

                return null;
            }

            // create a new Airport with a reference to this.updateRun()
            var airport = new _AirportModel2.default({
                icao: icao,
                level: level,
                name: name
            }, this.updateRun);

            this.airport_add(airport);

            return airport;
        }

        /**
         * @function airport_add
         * @param airport
         */

    }, {
        key: 'airport_add',
        value: function airport_add(airport) {
            this.airport.airports[airport.icao] = airport;
        }

        /**
         * @for AirportController
         * @method airport_set
         */

    }, {
        key: 'airport_set',
        value: function airport_set(icao) {
            if (this.hasStoredIcao(icao)) {
                icao = localStorage[_storageKeys.STORAGE_KEY.ATC_LAST_AIRPORT];
            }

            icao = icao.toLowerCase();

            if (!this.airport.airports[icao]) {
                console.log(icao + ': no such airport');

                return;
            }

            if (this.airport.current) {
                this.airport.current.unset();
                this.aircraftController.aircraft_remove_all();
            }

            var nextAirportModel = this.airport.airports[icao];
            nextAirportModel.set();
        }
        /**
         * @function airport_get
         * @param icao {string}
         * @return
         */

    }, {
        key: 'airport_get',
        value: function airport_get(icao) {
            if (!icao) {
                return this.airport.current;
            }

            return this.airport.airports[icao.toLowerCase()];
        }

        /**
         * @method hasStoredIcao
         * @return {boolean}
         */

    }, {
        key: 'hasStoredIcao',
        value: function hasStoredIcao(icao) {
            return !icao && (0, _has3.default)(localStorage, _storageKeys.STORAGE_KEY.ATC_LAST_AIRPORT);
        }

        /**
         * @method hasAirport
         * @return {boolean}
         */

    }, {
        key: 'hasAirport',
        value: function hasAirport(icao) {
            return (0, _has3.default)(this.airport.airports, icao);
        }

        /**
         * Remove an aircraft from the queue of any runway(s) at the AirportModel
         * @for AirportModel
         * @method removeAircraftFromAllRunwayQueues
         * @param  {aircraft} aircraft The aircraft to remove
         */

    }, {
        key: 'removeAircraftFromAllRunwayQueues',
        value: function removeAircraftFromAllRunwayQueues(aircraft) {
            var runwayPrimaryEndIndex = 0;
            var runwaySecondaryEndIndex = 1;
            var runways = this.airport_get().runways;
            for (var runwayPair = 0; runwayPair < runways.length; runwayPair++) {
                runways[runwayPair][runwayPrimaryEndIndex].removeQueue(aircraft, true);
                runways[runwayPair][runwaySecondaryEndIndex].removeQueue(aircraft, true);
            }
        }
    }]);

    return AirportController;
}();

exports.default = AirportController;

},{"../aircraft/AircraftController":524,"../airline/AirlineController":531,"../constants/storageKeys":576,"./AirportModel":535,"lodash/has":470,"lodash/lowerCase":495}],535:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable no-multi-spaces, func-names, camelcase, no-undef, max-len, object-shorthand */


var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _head2 = require('lodash/head');

var _head3 = _interopRequireDefault(_head2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _AirspaceModel = require('./AirspaceModel');

var _AirspaceModel2 = _interopRequireDefault(_AirspaceModel);

var _PositionModel = require('../base/PositionModel');

var _PositionModel2 = _interopRequireDefault(_PositionModel);

var _RunwayModel = require('./RunwayModel');

var _RunwayModel2 = _interopRequireDefault(_RunwayModel);

var _FixCollection = require('./Fix/FixCollection');

var _FixCollection2 = _interopRequireDefault(_FixCollection);

var _StandardRouteCollection = require('./StandardRoute/StandardRouteCollection');

var _StandardRouteCollection2 = _interopRequireDefault(_StandardRouteCollection);

var _arrivalFactory = require('./Arrival/arrivalFactory');

var _departureFactory = require('./Departure/departureFactory');

var _unitConverters = require('../utilities/unitConverters');

var _core = require('../math/core');

var _circle = require('../math/circle');

var _flightMath = require('../math/flightMath');

var _vector = require('../math/vector');

var _logLevel = require('../constants/logLevel');

var _selectors = require('../constants/selectors');

var _storageKeys = require('../constants/storageKeys');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// TODO: This function should really live in a different file and have tests.
// what does ra stand for? runway angle? what about n? need better names here.
/**
 * @function ra
 * @param n {numer}
 * @return {number}
 */
var ra = function ra(n) {
    var deviation = (0, _unitConverters.degreesToRadians)(10);

    return n + (0, _core.extrapolate_range_clamp)(0, Math.random(), 1, -deviation, deviation);
};

var DEFAULT_CTR_RADIUS_NM = 80;
var DEFAULT_CTR_CEILING_FT = 10000;
var DEFAULT_INITIAL_ALTITUDE_FT = 5000;
var DEAFULT_RR_RADIUS_NM = 5;

/**
 *
 *
 * @class AirportModel
 */

var AirportModel = function () {
    /**
     * @constructor
     * @param options {object}
     * @param updateRun {function}
     */
    function AirportModel() {
        var _this = this;

        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var updateRun = arguments[1];

        _classCallCheck(this, AirportModel);

        this.onLoadAirportSuccess = function (response) {
            _this.parse(response);

            if (_this.has_terrain) {
                return;
            }

            _this.loading = false;
            _this.loaded = true;
            _this.set();
        };

        this.onLoadAirportError = function (_ref) {
            var textStatus = _ref.textStatus;

            console.error('Unable to load airport/' + _this.icao + ': ' + textStatus);

            _this.loading = false;
            _this.airport.current.set();
        };

        this.updateRun = updateRun;
        // FIXME: All properties of this class should be instantiated here, even if they wont have values yet.
        // there is a lot of logic below that can be elimininated by simply instantiating values here.
        this.loaded = false;
        this.loading = false;
        this.name = null;
        this.icao = null;
        this.radio = null;
        this.level = null;
        this.position = null;
        this.runways = [];
        // TODO: rename to `runwayName`
        this.runway = null;
        // this property is kept for each airport to allow for re-hydration of the `FixCollection` on airport change
        this.fixes = {};
        this.sidCollection = null;
        this.starCollection = null;
        this.maps = {};
        this.airways = {};
        this.restricted_areas = [];
        this.metadata = {
            rwy: {}
        };
        // array of areas under this sector's control. If null, draws circle with diameter of 'ctr_radius'
        this.airspace = null;
        // area outlining the outermost lateral airspace boundary. Comes from this.airspace[0]
        this.perimeter = null;
        this.timeout = {
            runway: null,
            departure: null
        };
        this.departures = [];
        this.arrivals = [];

        this.wind = {
            speed: 10,
            angle: 0
        };

        this.ctr_radius = 80;
        this.ctr_ceiling = 10000;
        this.initial_alt = 5000;
        this.rr_radius_nm = 0;
        this.rr_center = 0;

        this.parse(options);
    }

    /**
     * @property real_fixes
     * @return {array<FixModel>}
     */


    _createClass(AirportModel, [{
        key: 'parse',


        /**
         * @for AirportModel
         * @method parse
         * @param data {object}
         */
        value: function parse(data) {
            this.name = (0, _get3.default)(data, 'name', this.name);
            this.icao = (0, _get3.default)(data, 'icao', this.icao).toLowerCase();
            this.level = (0, _get3.default)(data, 'level', this.level);

            // exit early if `position` doesnt exist in data. on app initialiazation, we loop through every airport
            // in the `airportLoadList` and instantiate a model for each but wont have the full data set until the
            // airport json file is loaded.
            if (!data.position) {
                return;
            }

            this.setCurrentPosition(data.position, data.magnetic_north);

            this.radio = (0, _get3.default)(data, 'radio', this.radio);
            this.has_terrain = (0, _get3.default)(data, 'has_terrain', false);
            this.airways = (0, _get3.default)(data, 'airways', {});
            this.ctr_radius = (0, _get3.default)(data, 'ctr_radius', DEFAULT_CTR_RADIUS_NM);
            this.ctr_ceiling = (0, _get3.default)(data, 'ctr_ceiling', DEFAULT_CTR_CEILING_FT);
            this.initial_alt = (0, _get3.default)(data, 'initial_alt', DEFAULT_INITIAL_ALTITUDE_FT);
            this.rr_radius_nm = (0, _get3.default)(data, 'rr_radius_nm');
            this.rr_center = (0, _get3.default)(data, 'rr_center');

            this.fixes = (0, _get3.default)(data, 'fixes', {});
            _FixCollection2.default.addItems(this.fixes, this.position);

            this.sidCollection = new _StandardRouteCollection2.default(data.sids);
            this.starCollection = new _StandardRouteCollection2.default(data.stars);

            this.loadTerrain();
            this.buildAirportAirspace(data.airspace);
            this.buildAirportRunways(data.runways);
            this.buildAirportMaps(data.maps);
            this.buildRestrictedAreas(data.restricted);
            this.updateCurrentWind(data.wind);
            this.buildAirportDepartures(data.departures);
            this.buildArrivals(data.arrivals);
            this.buildRunwayMetaData();
        }

        /**
         * @for AirportModel
         * @method setCurrentPosition
         * @param currentPosition {array}
         */

    }, {
        key: 'setCurrentPosition',
        value: function setCurrentPosition(currentPosition, magneticNorth) {
            if (!currentPosition) {
                return;
            }

            this.position = new _PositionModel2.default(currentPosition, null, magneticNorth);
        }

        /**
         * create 3d polygonal airspace
         *
         * @for AirportModel
         * @method buildAirportAirspace
         * @param airspace
         */

    }, {
        key: 'buildAirportAirspace',
        value: function buildAirportAirspace(airspace) {
            var _this2 = this;

            if (!airspace) {
                return;
            }

            // for each area
            this.airspace = (0, _map3.default)(airspace, function (airspaceSection) {
                return new _AirspaceModel2.default(airspaceSection, _this2.position, _this2.magnetic_north);
            });

            // airspace perimeter (assumed to be first entry in data.airspace)
            this.perimeter = (0, _head3.default)(this.airspace);

            // change ctr_radius to point along perimeter that's farthest from rr_center
            // const pos = new PositionModel(this.perimeter.poly[0].position, this.position, this.magnetic_north);

            this.ctr_radius = Math.max.apply(Math, _toConsumableArray((0, _map3.default)(this.perimeter.poly, function (v) {
                return (0, _vector.vlen)((0, _vector.vsub)(v.position, _PositionModel2.default.calculatePosition(_this2.rr_center, _this2.position, _this2.magnetic_north)));
            })));
        }

        /**
         * @for AirportModel
         * @method buildAirportRunways
         * @param runways {array}
         */

    }, {
        key: 'buildAirportRunways',
        value: function buildAirportRunways(runways) {
            var _this3 = this;

            if (!runways) {
                return;
            }

            (0, _forEach3.default)(runways, function (runway) {
                runway.reference_position = _this3.position;
                runway.magnetic_north = _this3.magnetic_north;

                // TODO: what do the 0 and 1 mean? magic numbers should be enumerated

                _this3.runways.push([new _RunwayModel2.default(runway, 0, _this3), new _RunwayModel2.default(runway, 1, _this3)]);
            });
        }

        /**
         * @for AirportModel
         * @method buildAirportMaps
         * @param maps {object}
         */

    }, {
        key: 'buildAirportMaps',
        value: function buildAirportMaps(maps) {
            var _this4 = this;

            if (!maps) {
                return;
            }

            (0, _forEach3.default)(maps, function (map, key) {
                _this4.maps[key] = [];
                var lines = map;

                (0, _forEach3.default)(lines, function (line) {
                    var start = _PositionModel2.default.calculatePosition([line[0], line[1]], _this4.position, _this4.magnetic_north);
                    var end = _PositionModel2.default.calculatePosition([line[2], line[3]], _this4.position, _this4.magnetic_north);

                    _this4.maps[key].push([start[0], start[1], end[0], end[1]]);
                });
            });
        }

        /**
         * @for AirportModel
         * @method buildRestrictedAreas
         * @param restrictedAreas
         */

    }, {
        key: 'buildRestrictedAreas',
        value: function buildRestrictedAreas(restrictedAreas) {
            var _this5 = this;

            if (!restrictedAreas) {
                return;
            }

            (0, _forEach3.default)(restrictedAreas, function (area) {
                // TODO: what is `obj` going to be? need better name.
                var obj = {};
                if (area.name) {
                    obj.name = area.name;
                }

                obj.height = (0, _unitConverters.parseElevation)(area.height);
                obj.coordinates = _jquery2.default.map(area.coordinates, function (v) {
                    return [_PositionModel2.default.calculatePosition(v, _this5.position, _this5.magnetic_north)];
                });

                // TODO: is this right? max and min are getting set to the same value?
                // const coords = obj.coordinates;
                var coords_max = obj.coordinates[0];
                var coords_min = obj.coordinates[0];

                (0, _forEach3.default)(obj.coordinates, function (v) {
                    coords_max = [Math.max(v[0], coords_max[0]), Math.max(v[1], coords_max[1])];
                    coords_min = [Math.min(v[0], coords_min[0]), Math.min(v[1], coords_min[1])];
                });

                obj.center = (0, _vector.vscale)((0, _vector.vadd)(coords_max, coords_min), 0.5);

                _this5.restricted_areas.push(obj);
            });
        }

        /**
         * @for AirportModel
         * @method updateCurrentWind
         * @param currentWind
         */

    }, {
        key: 'updateCurrentWind',
        value: function updateCurrentWind(currentWind) {
            if (!currentWind) {
                return;
            }

            this.wind.speed = currentWind.speed;
            this.wind.angle = (0, _unitConverters.degreesToRadians)(currentWind.angle);
        }
    }, {
        key: 'buildAirportDepartures',
        value: function buildAirportDepartures(departures) {
            if (!departures) {
                return;
            }

            this.departures = (0, _departureFactory.departureFactory)(this, departures);
        }

        /**
         * @for AirportModel
         * @method buildArrivals
         * @param arrivals {array}
         */

    }, {
        key: 'buildArrivals',
        value: function buildArrivals(arrivals) {
            if (!arrivals) {
                return;
            }

            for (var i = 0; i < arrivals.length; i++) {
                if (!(0, _has3.default)(arrivals[i], 'type')) {
                    log(this.icao + ' arrival stream #' + i + ' not given type!', _logLevel.LOG.WARNING);
                } else {
                    this.arrivals.push((0, _arrivalFactory.arrivalFactory)(this, arrivals[i]));
                }
            }
        }

        /**
         * @for AirportModel
         * @method buildRunwayMetaData
         */

    }, {
        key: 'buildRunwayMetaData',
        value: function buildRunwayMetaData() {
            // TODO: translate these to _forEach()
            for (var rwy1 in this.runways) {
                for (var rwy1end in this.runways[rwy1]) {
                    // setup primary runway object
                    this.metadata.rwy[this.runways[rwy1][rwy1end].name] = {};

                    for (var rwy2 in this.runways) {
                        if (rwy1 === rwy2) {
                            continue;
                        }

                        for (var rwy2end in this.runways[rwy2]) {
                            // setup secondary runway subobject
                            var r1 = this.runways[rwy1][rwy1end];
                            var r2 = this.runways[rwy2][rwy2end];
                            var offset = (0, _flightMath.getOffset)(r1, r2.position, r1.angle);
                            this.metadata.rwy[r1.name][r2.name] = {};

                            // generate this runway pair's relationship data
                            this.metadata.rwy[r1.name][r2.name].lateral_dist = (0, _core.abs)(offset[0]);
                            this.metadata.rwy[r1.name][r2.name].straight_dist = (0, _core.abs)(offset[2]);
                            this.metadata.rwy[r1.name][r2.name].converging = (0, _vector.raysIntersect)(r1.position, r1.angle, r2.position, r2.angle);
                            this.metadata.rwy[r1.name][r2.name].parallel = (0, _core.abs)((0, _circle.angle_offset)(r1.angle, r2.angle)) < (0, _unitConverters.degreesToRadians)(10);
                        }
                    }
                }
            }
        }

        /**
         * @for AirportModel
         * @method set
         */

    }, {
        key: 'set',
        value: function set() {
            if (!this.loaded) {
                this.load();

                return;
            }

            localStorage[_storageKeys.STORAGE_KEY.ATC_LAST_AIRPORT] = this.icao;
            prop.airport.current = this;

            prop.canvas.draw_labels = true;
            (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_LABELS).toggle(!(0, _isEmpty3.default)(this.maps));
            (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_RESTRICTED_AREAS).toggle((this.restricted_areas || []).length > 0);
            (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_SIDS).toggle(!(0, _isNil3.default)(this.sidCollection));

            prop.canvas.dirty = true;
            (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_TERRAIN).toggle(!(0, _isEmpty3.default)(this.terrain));

            window.gameController.game_reset_score_and_events();

            this.start = window.gameController.game_time();

            // when the parse method is run, this method also runs. however, when an airport is being re-loaded,
            // only this method runs. this doesnt belong here but needs to be here so the fixes get populated correctly.
            // FIXME: make FixCollection a instance class ainstead of a static class
            _FixCollection2.default.addItems(this.fixes, this.position);

            this.updateRunway();
            this.addAircraft();
            this.updateRun(true);
        }

        /**
         * @for AirportModel
         * @method unset
         */

    }, {
        key: 'unset',
        value: function unset() {
            for (var i = 0; i < this.arrivals.length; i++) {
                this.arrivals[i].stop();
            }

            this.departures.stop();

            if (this.timeout.runway) {
                window.gameController.game_clear_timeout(this.timeout.runway);
            }
        }

        /**
         * @for AirportModel
         * @method addAircraft
         */

    }, {
        key: 'addAircraft',
        value: function addAircraft() {
            if (this.departures) {
                this.departures.start();
            }

            if (this.arrivals) {
                for (var i = 0; i < this.arrivals.length; i++) {
                    this.arrivals[i].start();
                }
            }
        }

        /**
         * @for AirportModel
         * @method getWind
         * @return wind {number}
         */

    }, {
        key: 'getWind',
        value: function getWind() {
            // TODO: there are a lot of magic numbers here. What are they for and what do they mean? These should be enumerated.
            var wind = clone(this.wind);
            var s = 1;
            var angle_factor = (0, _core.sin)((s + window.gameController.game_time()) * 0.5) + (0, _core.sin)((s + window.gameController.game_time()) * 2);
            // TODO: why is this var getting reassigned to a magic number?
            s = 100;
            var speed_factor = (0, _core.sin)((s + window.gameController.game_time()) * 0.5) + (0, _core.sin)((s + window.gameController.game_time()) * 2);
            wind.angle += (0, _core.extrapolate_range_clamp)(-1, angle_factor, 1, (0, _unitConverters.degreesToRadians)(-4), (0, _unitConverters.degreesToRadians)(4));
            wind.speed *= (0, _core.extrapolate_range_clamp)(-1, speed_factor, 1, 0.9, 1.05);

            return wind;
        }

        /**
         * @for AirportModel
         * @method updateRunway
         */

    }, {
        key: 'updateRunway',
        value: function updateRunway() {
            var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

            // TODO: this method contains some ambiguous names. need better names.
            var wind = this.getWind();
            var headwind = {};

            for (var i = 0; i < this.runways.length; i++) {
                var runway = this.runways[i];
                headwind[runway[0].name] = Math.cos(runway[0].angle - ra(wind.angle)) * wind.speed;
                headwind[runway[1].name] = Math.cos(runway[1].angle - ra(wind.angle)) * wind.speed;
            }

            var best_runway = '';
            var best_runway_headwind = -Infinity;
            for (var _runway in headwind) {
                if (headwind[_runway] > best_runway_headwind && this.getRunway(_runway).length > length) {
                    best_runway = _runway;
                    best_runway_headwind = headwind[_runway];
                }
            }

            this.runway = best_runway;
            this.timeout.runway = window.gameController.game_timeout(this.updateRunway, Math.random() * 30, this);
        }

        /**
         * @for AirportModel
         * @method selectRunway
         */

    }, {
        key: 'selectRunway',
        value: function selectRunway() {
            return this.runway;
        }
    }, {
        key: 'parseTerrain',
        value: function parseTerrain(data) {
            // TODO: reassignment of this to apt is not needed here. change apt to this.
            // terrain must be in geojson format
            var apt = this;
            apt.terrain = {};

            (0, _forEach3.default)(data.features, function (f) {
                // const f = data.features[i];
                // m => ft, rounded to 1K (but not divided)
                var ele = (0, _core.round)(f.properties.elevation / 0.3048, 1000);

                if (!apt.terrain[ele]) {
                    apt.terrain[ele] = [];
                }

                var multipoly = f.geometry.coordinates;
                // TODO: add enumeration
                if (f.geometry.type === 'LineString') {
                    multipoly = [[multipoly]];
                }

                // TODO: add enumeration
                if (f.geometry.type === 'Polygon') {
                    multipoly = [multipoly];
                }

                _jquery2.default.each(multipoly, function (i, poly) {
                    // multipoly contains several polys
                    // each poly has 1st outer ring and other rings are holes
                    apt.terrain[ele].push(_jquery2.default.map(poly, function (line_string) {
                        return [_jquery2.default.map(line_string, function (pt) {
                            pt.reverse(); // `PositionModel` requires [lat,lon] order
                            var pos = new _PositionModel2.default(pt, apt.position, apt.magnetic_north);

                            return [pos.position];
                        })];
                    }));
                });
            });
        }

        /**
         * @for AirportModel
         * @method loadTerrain
         */

    }, {
        key: 'loadTerrain',
        value: function loadTerrain() {
            var _this6 = this;

            if (!this.has_terrain) {
                return;
            }

            // TODO: there is a lot of binding here, use => functions and this probably wont be an issue.
            zlsa.atc.loadAsset({
                url: 'assets/airports/terrain/' + this.icao.toLowerCase() + '.geojson',
                immediate: true
            })
            // TODO: change to onSuccess and onError handler abstractions
            .done(function (data) {
                try {
                    log('Parsing terrain');
                    _this6.parseTerrain(data);
                } catch (e) {
                    log(e.message);
                }

                _this6.loading = false;
                _this6.loaded = true;
                _this6.set();
            }).fail(function (jqXHR, textStatus, errorThrown) {
                console.error('Unable to load airport/terrain/' + _this6.icao + ': ' + textStatus);

                _this6.loading = false;
                _this6.airport.current.set();
            });
        }

        /**
         * @for AirportModel
         * @method load
         */

    }, {
        key: 'load',
        value: function load() {
            var _this7 = this;

            if (this.loaded) {
                return;
            }

            this.updateRun(false);
            this.loading = true;

            zlsa.atc.loadAsset({
                url: 'assets/airports/' + this.icao.toLowerCase() + '.json',
                immediate: true
            }).done(function (response) {
                return _this7.onLoadAirportSuccess(response);
            }).fail(function () {
                return _this7.onLoadAirportError.apply(_this7, arguments);
            });
        }

        /**
         * @method onLoadAirportSuccess
         * @param response {object}
         */


        /**
         * @for AirportModel
         * @method onLoadAirportError
         * @param textStatus {string}
         */

    }, {
        key: 'getRestrictedAreas',


        /**
         * @for AirportModel
         * @method getRestrictedAreas
         * @return {array|null}
         */
        value: function getRestrictedAreas() {
            return (0, _get3.default)(this, 'restricted_areas', null);
        }

        /**
         * Get the position of a FixModel
         *
         * @for AirportModel
         * @method getFixPosition
         * @param fixName {string}
         * @return {array}
         */

    }, {
        key: 'getFixPosition',
        value: function getFixPosition(fixName) {
            // TODO: if possible, replace with FoxCollection.getFixPositionCoordinates
            var fixModel = _FixCollection2.default.findFixByName(fixName);

            return fixModel.position;
        }

        /**
         * @for AirportModel
         * @param id {string}
         * @param exit {string}
         * @param runway {string}
         * @return {array}
         */

    }, {
        key: 'getSID',
        value: function getSID(id, exit, runway) {
            return this.sidCollection.findFixesForSidByRunwayAndExit(id, exit, runway);
        }

        /**
         *
         * @for AirportModel
         * @method findWaypointModelsForSid
         * @param id {string}
         * @param entry {string}
         * @param runway {string}
         * @param isPreSpawn {boolean} flag used to determine if distances between waypoints should be calculated
         * @return {array<StandardWaypointModel>}
         */

    }, {
        key: 'findWaypointModelsForSid',
        value: function findWaypointModelsForSid(id, entry, runway) {
            var isPreSpawn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            return this.sidCollection.findFixModelsForRouteByEntryAndExit(id, entry, runway, isPreSpawn);
        }

        /**
         * @for AirportModel
         * @method getSIDExitPoint
         * @param icao {string}  Name of SID
         * @return {string}  Name of Exit fix in SID
         */

    }, {
        key: 'getSIDExitPoint',
        value: function getSIDExitPoint(icao) {
            return this.sidCollection.findRandomExitPointForSIDIcao(icao);
        }

        /**
         * Return an array of [Waypoint, fixRestrictions] for a given STAR
         *
         * Note: Passing a value for 'rwy' will help the fms distinguish between
         *       different branches of a STAR, when it splits into different paths
         *       for landing on different runways (eg 'HAWKZ4, landing south' vs
         *       'HAWKZ4, landing north'). Not strictly required, but not passing
         *       it will cause an incomplete route in many cases (depends on the
         *       design of the actual STAR in the airport's json file).
         *
         * @param {string} id - the identifier for the STAR (eg 'LENDY6')
         * @param {string} entry - the entryPoint from which to join the STAR
         * @param {string} rwy - (optional) the planned arrival runway
         * @return {array<string>}
         */

    }, {
        key: 'getSTAR',
        value: function getSTAR(id, entry, rwy) {
            return this.starCollection.findFixesForStarByEntryAndRunway(id, entry, rwy);
        }

        /**
         *
         * @for AirportModel
         * @method findWaypointModelsForStar
         * @param id {string}
         * @param entry {string}
         * @param runway {string}
         * @param isPreSpawn {boolean} flag used to determine if distances between waypoints should be calculated
         * @return {array<StandardWaypointModel>}
         */

    }, {
        key: 'findWaypointModelsForStar',
        value: function findWaypointModelsForStar(id, entry, runway) {
            var isPreSpawn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

            return this.starCollection.findFixModelsForRouteByEntryAndExit(id, entry, runway, isPreSpawn);
        }

        /**
         *
         *
         */

    }, {
        key: 'getRunway',
        value: function getRunway(name) {
            if (!name) {
                return null;
            }

            name = name.toLowerCase();

            for (var i = 0; i < this.runways.length; i++) {
                if (this.runways[i][0].name.toLowerCase() === name) {
                    return this.runways[i][0];
                }
                if (this.runways[i][1].name.toLowerCase() === name) {
                    return this.runways[i][1];
                }
            }

            return null;
        }
    }, {
        key: 'real_fixes',
        get: function get() {
            return _FixCollection2.default.findRealFixes();
        }

        /**
         * @property elevation
         * @return {number}
         */

    }, {
        key: 'elevation',
        get: function get() {
            return this.position.elevation;
        }

        /**
         * @property magnetic_north
         * @return {number}
         */

    }, {
        key: 'magnetic_north',
        get: function get() {
            return this.position.magneticNorthInRadians;
        }
    }]);

    return AirportModel;
}();

exports.default = AirportModel;

},{"../base/PositionModel":560,"../constants/logLevel":574,"../constants/selectors":575,"../constants/storageKeys":576,"../math/circle":583,"../math/core":584,"../math/flightMath":586,"../math/vector":587,"../utilities/unitConverters":595,"./AirspaceModel":536,"./Arrival/arrivalFactory":541,"./Departure/departureFactory":545,"./Fix/FixCollection":546,"./RunwayModel":549,"./StandardRoute/StandardRouteCollection":552,"jquery":296,"lodash/forEach":468,"lodash/get":469,"lodash/has":470,"lodash/head":472,"lodash/isEmpty":480,"lodash/isNil":485,"lodash/map":496}],536:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _isEqual2 = require('lodash/isEqual');

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _BaseModel2 = require('../base/BaseModel');

var _BaseModel3 = _interopRequireDefault(_BaseModel2);

var _PositionModel = require('../base/PositionModel');

var _PositionModel2 = _interopRequireDefault(_PositionModel);

var _unitConverters = require('../utilities/unitConverters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An enclosed region defined by a series of Position objects and an altitude range
 *
 * @class AirspaceModel
 */
var AirspaceModel = function (_BaseModel) {
  _inherits(AirspaceModel, _BaseModel);

  /**
   * @for AirspaceModel
   * @constructor
   * @param airspace {object}
   * @param airportPosition {PositionModel}
   * @param magneticNorth {number}
   */
  function AirspaceModel(airspace, airportPosition, magneticNorth) {
    var _ret;

    _classCallCheck(this, AirspaceModel);

    var _this = _possibleConstructorReturn(this, (AirspaceModel.__proto__ || Object.getPrototypeOf(AirspaceModel)).call(this));

    if (!airspace || !airportPosition || !(0, _isNumber3.default)(magneticNorth)) {
      // eslint-disable-next-line max-len
      throw new TypeError('Invalid parameter, expected airspace, airportPosition and magneticNorth to be defined');
    }

    /**
     * List of lat/long coordinates that outline the shape of the area
     *
     * DO NOT repeat the origin to 'close' the shape, this happens programatically
     *
     * @property poly
     * @type {array}
     */
    _this.poly = [];

    /**
     * Altitude at bottom of area, in hundreds of feet
     *
     * @property floor
     * @type {number}
     */
    _this.floor = -1;

    /**
     * Altitude of top of area, in hundreds of feet
     *
     * @property ceiling
     * @type {number}
     */
    _this.ceiling = -1;

    /**
     * FAA airspace classification (A,B,C,D,E,G)
     *
     * @property airspace_class
     * @type {string}
     */
    _this.airspace_class = '';

    return _ret = _this._init(airspace, airportPosition, magneticNorth), _possibleConstructorReturn(_this, _ret);
  }

  /**
   * Initialize the model
   *
   * @for AirspaceModel
   * @method _init
   * @param airspace {array}
   * @param airportPosition {PositionModel}
   * @param magneticNorth {number}
   * @private
   */


  _createClass(AirspaceModel, [{
    key: '_init',
    value: function _init(airspace, airportPosition, magneticNorth) {
      this.floor = (0, _unitConverters.convertToThousands)(airspace.floor);
      this.ceiling = (0, _unitConverters.convertToThousands)(airspace.ceiling);
      this.airspace_class = airspace.airspace_class;
      this.poly = this._buildPolyPositionModels(airspace.poly, airportPosition, magneticNorth);

      return this;
    }

    /**
     * @for AirspaceModel
     * @method reset
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.poly = [];
      this.floor = -1;
      this.ceiling = -1;
      this.airspace_class = '';
    }

    /**
     * Create a PositionModel for each poly listed in `airspace.poly`.
     *
     * If the last entry is the same as the first, remove it because the path will be closed automatically.
     *
     * @for AirspaceModel
     * @method _buildPolyPositionModels
     * @param polyList {array}
     * @param airportPosition {PositionModel}
     * @param magneticNorth {number}
     * @return polyPositionModels {array}
     * @private
     */

  }, {
    key: '_buildPolyPositionModels',
    value: function _buildPolyPositionModels(polyList, airportPosition, magneticNorth) {
      var polyPositionModels = (0, _map3.default)(polyList, function (poly) {
        return new _PositionModel2.default(poly, airportPosition, magneticNorth);
      });

      var firstIndex = 0;
      var lastIndex = polyPositionModels.length - 1;

      if ((0, _isEqual3.default)(polyPositionModels[firstIndex].position, polyPositionModels[lastIndex].position)) {
        // shape shouldn't fully close; will draw with 'cc.closepath()' so we remove the last item
        polyPositionModels.pop();
      }

      return polyPositionModels;
    }
  }]);

  return AirspaceModel;
}(_BaseModel3.default);

exports.default = AirspaceModel;

},{"../base/BaseModel":556,"../base/PositionModel":560,"../utilities/unitConverters":595,"lodash/isEqual":481,"lodash/isNumber":486,"lodash/map":496}],537:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _random2 = require('lodash/random');

var _random3 = _interopRequireDefault(_random2);

var _FixCollection = require('../Fix/FixCollection');

var _FixCollection2 = _interopRequireDefault(_FixCollection);

var _RouteModel = require('../Route/RouteModel');

var _RouteModel2 = _interopRequireDefault(_RouteModel);

var _PositionModel = require('../../base/PositionModel');

var _PositionModel2 = _interopRequireDefault(_PositionModel);

var _randomAirlineSelectionHelper = require('../../airline/randomAirlineSelectionHelper');

var _unitConverters = require('../../utilities/unitConverters');

var _core = require('../../math/core');

var _flightMath = require('../../math/flightMath');

var _aircraftConstants = require('../../constants/aircraftConstants');

var _airportConstants = require('../../constants/airportConstants');

var _globalConstants = require('../../constants/globalConstants');

var _logLevel = require('../../constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @property INTERVAL_DELAY_IN_MS
 * @type {number}
 * @final
 */
var INTERVAL_DELAY_IN_MS = _globalConstants.TIME.ONE_HOUR_IN_SECONDS;

// TODO: this shouldn't live here. perhaps move to `FixCollection` as an exported function?
/**
 * Encapsulation of a `FixCollection` method.
 *
 * This allows for centralization of this logic, while avoiding the need for
 * another class method.
 *
 * @method getFixPostiion
 * @param fixName {string}
 * @return fix.position {array}
 */
var getFixPosition = function getFixPosition(fixName) {
    var fix = _FixCollection2.default.findFixByName(fixName);

    return fix.position;
};

/**
 * Generate arrivals at random, averaging the specified arrival rate
 *
 * @class ArrivalBase
 */

var ArrivalBase = function () {
    /**
     * @for ArrivalBase
     * @constructor
     * @param airport {AirportInstanceModel}
     * @param options {object}
     */
    function ArrivalBase(airport, options) {
        _classCallCheck(this, ArrivalBase);

        // FIXME: this creates a circular reference and should be refactored
        /**
         * Airport that arrivals belong to
         *
         * @property airport
         * @type {AirportInstanceModel}
         * @default airport
         */
        this.airport = airport;

        /**
         * List of airlines with weight for each
         *
         * @property airlines
         * @type {array[]}
         * @default []
         */
        this.airlines = [];

        // TODO: this needs a better name. this is actually fixes for a route
        /**
         * Set of fixes to traverse (eg. for STARs) as defined in the airport json file.
         *
         * Spawn occurs at first fix listed.
         * This property gets sent to an `AirportInstanceModel` and becomes that aircraft's
         * waypoint list in the fms.
         *
         * @property fixes
         * @type {array}
         * @default []
         */
        this.fixes = [];

        /**
         * Text representation of a `StandardRoute`.
         *
         * `RouteModel` object provides methods for dealing with a route string.
         * Expects string to be in the shape of:
         * - `ORIGIN_FIXNAME.ROUTE_NAME.DESTINATION_FIXNAME`
         *
         * @property activeRouteModel
         * @type {RouteModel}
         * @default null
         */
        this.activeRouteModel = null;

        /**
         * Altitude in feet or min/max range of altitudes
         *
         * Altitude may be passed in as either an array of altitudes [min, max], or as a single number.
         *
         * @property altitude
         * @type {array}
         * @default [AIRPORT_CONSTANTS.DEFAULT_SPAWN_ALTITUDE_MIN, AIRPORT_CONSTANTS.DEFAULT_SPAWN_ALTITUDE_MAX]
         */
        this.altitude = [_airportConstants.AIRPORT_CONSTANTS.DEFAULT_SPAWN_ALTITUDE_MIN, _airportConstants.AIRPORT_CONSTANTS.DEFAULT_SPAWN_ALTITUDE_MAX];

        /**
         * Initial heading of a spawned aircraft
         *
         * @property heading
         * @type {number}
         * @default null
         */
        this.heading = null;

        /**
         * Bearing from airspace center to spawn point.
         *
         * Shouldn't be used with fixes
         *
         * @property radial
         * @type {number}
         * @default 0
         */
        this.radial = 0;

        /**
         * game time
         *
         * @property cycleStart
         * @type {number}
         * @default 0
         */
        this.cycleStart = 0;

        /**
         * Start at the beginning of the surge
         *
         * @property offset
         * @type {number}
         * @default 0
         */
        this.offset = 0;

        /**
         * 30 minute cycle
         *
         * @property period
         * @type {number}
         * @default 1800
         */
        this.period = _globalConstants.TIME.ONE_HOUR_IN_SECONDS / 2;

        /**
         * Initial speed in knots of spawned aircraft.
         *
         * @property speed
         * @type {number}
         * @default AIRPORT_CONSTANTS.DEFAULT_SPAWN_AIRCRAFT_SPEED_KTS
         */
        this.speed = _airportConstants.AIRPORT_CONSTANTS.DEFAULT_SPAWN_AIRCRAFT_SPEED_KTS;

        /**
         * Arrival rate along this stream.
         *
         * Number represents aircraft per hour (acph)
         *
         * @property frequency
         * @type {number}
         * @default 0
         */
        this.frequency = 0;

        /**
         * @property timeout
         * @type {function}
         * @default null
         */
        this.timeout = null;

        this.parse(options);
    }

    /**
     * Initialize arrival stream
     *
     * @for ArrivalBase
     * @method parse
     * @param options {object}
     * @private
     */


    _createClass(ArrivalBase, [{
        key: 'parse',
        value: function parse(options) {
            this.airlines = (0, _get3.default)(options, 'airlines', this.airlines);
            this.altitude = (0, _get3.default)(options, 'altitude', this.altitude);
            this.frequency = (0, _get3.default)(options, 'frequency', this.frequency);
            this.speed = (0, _get3.default)(options, 'speed', this.speed);

            // Make corrections to data
            if (options.radial) {
                this.radial = (0, _unitConverters.degreesToRadians)(options.radial);
            }

            if (options.heading) {
                this.heading = (0, _unitConverters.degreesToRadians)(options.heading);
            }

            // altitude may be passed in as either an array of altitudes [min, max], or as a single number.
            // here we check for the single number and transform it into a [min, max] format.
            if (typeof this.altitude === 'number') {
                this.altitude = [this.altitude, this.altitude];
            }

            if (options.route) {
                this.activeRouteModel = new _RouteModel2.default(options.route);
            } else if (options.fixes) {
                // TODO: this may not be needed at all. we could just use `_get()` instead.
                // `this.fixes` eventually makes its way to the `AircraftInstanceModel.fms` via
                // `AircraftInstanceModel.setArrivalWaypoints()`. that method simply builds another object and
                // pulls each item from this array. creating an object here is doesn't appear to serve any real purpose.
                this.fixes = (0, _map3.default)(options.fixes, function (fix) {
                    return {
                        fix: fix
                    };
                });
            }

            this.preloadAirlines();
        }

        /**
         * Loop through each airline provided from an airport json and ensure it had been loaded.
         *
         * @for ArrivalBase
         * @method preloadAirlines
         */

    }, {
        key: 'preloadAirlines',
        value: function preloadAirlines() {
            // TODO: this really doesn't belong here and should be moved
            // Pre-load the airlines
            for (var i = 0; i < this.airlines.lenth; i++) {
                var airline = this.airlines[i];
                // reassigns `airline.name` to `airlineName` for readability

                var _airlineNameAndFleetH = (0, _randomAirlineSelectionHelper.airlineNameAndFleetHelper)(airline),
                    airlineName = _airlineNameAndFleetH.name;

                window.airlineController.airline_get(airlineName);
            }
        }

        /**
         * Backfill STAR routes with arrivals closer than the spawn point.
         *
         * Should be run only once on airport load.
         *
         * Aircraft spawn at the first point defined in the `arrivals` entry of the airport json file.
         * When that spawn point is very far from the airspace boundary, it obviously takes quite a
         * while for them to reach the airspace. This function spawns (all at once) arrivals along
         * the route, between the spawn point and the airspace boundary, in order to
         * ensure the player is not kept waiting for their first arrival aircraft.
         *
         * @for ArrivalBase
         * @method preSpawn
         */

    }, {
        key: 'preSpawn',
        value: function preSpawn() {
            // find last fix along STAR that is outside of airspace, ie: next fix is within airspace
            // distance between closest fix outside airspace and airspace border in nm
            var extra = 0;
            var totalDistance = 0;
            var isPreSpawn = true;
            var waypointModelList = this.airport.findWaypointModelsForStar(this.activeRouteModel.procedure, this.activeRouteModel.entry, this.airport.runway, isPreSpawn);

            for (var i = 0; i < waypointModelList.length; i++) {
                var waypoint = waypointModelList[i];
                var waypointPosition = waypoint.position;
                var previousWaypoint = waypoint;
                var previousPosition = waypoint.position;

                if (i > 0) {
                    previousWaypoint = waypointModelList[i - 1];
                    previousPosition = previousWaypoint.position;
                }

                if ((0, _flightMath.isWithinAirspace)(this.airport, waypointPosition) && i > 0) {
                    extra = (0, _unitConverters.nm)((0, _flightMath.calculateDistanceToBoundary)(this.airport, previousPosition));

                    continue;
                }

                totalDistance += waypoint.distanceFromPreviousWaypoint;
            }

            // FIXME: incluing this causes aircraft to spawn within airspace. something goofy is going on here.
            // totalDistance += extra;

            // distance between each arriving aircraft, in nm
            var entrailDistance = this.speed / this.frequency;
            var spawnOffsets = this.assembleSpawnOffsets(entrailDistance, totalDistance);
            var spawnPositions = this.calculateSpawnPositions(waypointModelList, spawnOffsets);

            this.createAircraftAtSpawnPositions(spawnPositions);
        }

        /**
         * @for ArrivalBase
         * @method assembleSpawnOffsets
         * @param entrailDistance {number}
         * @param totalDistance {number}
         * @return spawnOffsets {array}
         */

    }, {
        key: 'assembleSpawnOffsets',
        value: function assembleSpawnOffsets(entrailDistance, totalDistance) {
            var spawnOffsets = [];

            // distance between successive arrivals in nm
            for (var i = entrailDistance; i < totalDistance; i += entrailDistance) {
                spawnOffsets.push(i);
            }

            return spawnOffsets;
        }

        /**
         * @for ArrivalBase
         * @method calculateSpawnPositions
         * @param waypointModelList {array<StandardWaypointModel>}
         * @param spawnOffsets {array}
         * @return spawnPositions {array}
         */

    }, {
        key: 'calculateSpawnPositions',
        value: function calculateSpawnPositions(waypointModelList, spawnOffsets) {
            var spawnPositions = [];

            // for each new aircraft
            for (var i = 0; i < spawnOffsets.length; i++) {
                var spawnOffset = spawnOffsets[i];

                // for each fix ahead
                for (var j = 1; j < waypointModelList.length; j++) {
                    var waypoint = waypointModelList[j];

                    if (spawnOffset > waypoint.distanceFromPreviousWaypoint) {
                        // if point beyond next fix subtract distance from spawnOffset and continue
                        spawnOffset -= waypoint.distanceFromPreviousWaypoint;

                        continue;
                    } else {
                        // if point before next fix
                        var nextFix = waypoint;
                        var previousFix = waypointModelList[j - 1];
                        var heading = (0, _flightMath.bearingToPoint)(previousFix.gpsXY, nextFix.gpsXY);
                        var spawnPoint = (0, _flightMath.fixRadialDist)(previousFix.gps, heading, spawnOffset);
                        var spawnPosition = new _PositionModel2.default(spawnPoint, this.airport.position, this.airport.magnetic_north);

                        // TODO: this looks like it should be a model object
                        spawnPositions.push({
                            heading: heading,
                            pos: spawnPosition,
                            nextFix: nextFix.name
                        });

                        break;
                    }
                }
            }

            return spawnPositions;
        }

        /**
         * Given an array of `spawnPositions`, create new aircraft for each `spawnPosition`
         *
         * @for ArrivalBase
         * @method createAircraftAtSpawnPositions
         * @param spawnPositions {array}
         */

    }, {
        key: 'createAircraftAtSpawnPositions',
        value: function createAircraftAtSpawnPositions(spawnPositions) {
            // Spawn aircraft along the route, ahead of the standard spawn point
            for (var i = 0; i < spawnPositions.length; i++) {
                var _spawnPositions$i = spawnPositions[i],
                    heading = _spawnPositions$i.heading,
                    pos = _spawnPositions$i.pos,
                    nextFix = _spawnPositions$i.nextFix;
                var icao = this.airport.icao;

                var airline = (0, _randomAirlineSelectionHelper.randomAirlineSelectionHelper)(this.airlines);
                var aircraftToAdd = {
                    category: _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL,
                    destination: icao,
                    airline: airline.name,
                    fleet: airline.fleet,
                    // TODO: should eventually look up altitude restrictions and try to spawn in an appropriate range
                    //       this can be done with the `waypointModelList` and `StandardWaypointModel` objects,
                    //       in conjuntion with the `RouteModel`.
                    altitude: 10000,
                    // TODO: this could be a _get() instead of an || assignment
                    heading: heading || this.heading,
                    waypoints: this.fixes,
                    route: (0, _get3.default)(this, 'activeRouteModel.routeCode', ''),
                    position: pos.position,
                    speed: this.speed,
                    nextFix: nextFix
                };

                window.aircraftController.aircraft_new(aircraftToAdd);
            }
        }

        /**
         * Stop this arrival stream
         *
         * @for ArrivalBase
         * @method stop
         */

    }, {
        key: 'stop',
        value: function stop() {
            if (this.timeout) {
                window.gameController.game_clear_timeout(this.timeout);
            }
        }

        /**
         * Start this arrival stream
         *
         * @for ArrivalBase
         * @method start
         */

    }, {
        key: 'start',
        value: function start() {
            // TODO: what do these numbers mean? enumerate the magic numbers.
            var delay = (0, _random3.default)(0, _globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.frequency);
            this.timeout = window.gameController.game_timeout(this.spawnAircraft, delay, this, [true, true]);

            if (this.activeRouteModel) {
                this.preSpawn();
            }
        }

        // TODO: this method should accept explicit arguments
        /**
         * Spawn a new aircraft
         *
         * @for ArrivalBase
         * @method spawnAircraft
         */

    }, {
        key: 'spawnAircraft',
        value: function spawnAircraft(args) {
            var position = void 0;
            var heading = void 0;
            var distance = void 0;
            // args = [boolean, boolean]
            var altitude = (0, _core.round)((0, _random3.default)(this.altitude[0], this.altitude[1]) / 1000) * 1000;
            var message = !(window.gameController.game_time() - this.airport.start < 2);
            var airline = (0, _randomAirlineSelectionHelper.randomAirlineSelectionHelper)(this.airlines);
            // What is this next variable for, why is it here and can it be removed?
            // FIXME: this is not used
            var start_flag = args[0];
            var timeout_flag = args[1] || false;

            // spawn at first fix
            if (this.fixes.length > 1) {
                // calculate heading to next fix
                position = getFixPosition(this.fixes[0].fix);
                var nextPosition = getFixPosition(this.fixes[1].fix);
                heading = (0, _flightMath.bearingToPoint)(position, nextPosition);
            } else if (this.activeRouteModel) {
                var isPreSpawn = false;
                var waypointModelList = this.airport.findWaypointModelsForStar(this.activeRouteModel.procedure, this.activeRouteModel.entry, this.airport.runway, isPreSpawn);

                // grab position of first fix
                position = waypointModelList[0].position;
                // calculate heading from first waypoint to second waypoint
                heading = (0, _flightMath.bearingToPoint)(position, waypointModelList[1].position);
            } else {
                // spawn outside the airspace along 'this.radial'
                distance = 2 * this.airport.ctr_radius;
                // TODO: this should really use `PositionModel`
                position = [(0, _core.sin)(this.radial) * distance, (0, _core.cos)(this.radial) * distance];
                heading = this.heading || this.radial + Math.PI;
            }

            var aircraftToAdd = {
                altitude: altitude,
                heading: heading,
                message: message,
                position: position,
                category: _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL,
                destination: this.airport.icao,
                airline: airline.name,
                fleet: airline.fleet,
                waypoints: this.fixes,
                route: (0, _get3.default)(this, 'activeRouteModel.routeCode', ''),
                // TODO: this should use a `PositionModel` instead of just using it to get a position
                // this will take a lot of refactoring, though, as aircraft.position is used all over the app.
                speed: this.speed
            };

            window.aircraftController.aircraft_new(aircraftToAdd);

            if (timeout_flag) {
                this.timeout = window.gameController.game_timeout(this.spawnAircraft, this.nextInterval(), this, [null, true]);
            }
        }

        /**
         * Determine delay until next spawn
         *
         * @for ArrivalBase
         * @method nextInterval
         * @return {number}
         */

    }, {
        key: 'nextInterval',
        value: function nextInterval() {
            var min_interval = _airportConstants.AIRPORT_CONSTANTS.MIN_ENTRAIL_DISTANCE_NM * (INTERVAL_DELAY_IN_MS / this.speed);
            var tgt_interval = INTERVAL_DELAY_IN_MS / this.frequency;

            if (tgt_interval < min_interval) {
                tgt_interval = min_interval;

                log('Requested arrival rate of ' + this.frequency + ' acph overridden to ' + ('maintain minimum of ' + _airportConstants.AIRPORT_CONSTANTS.MIN_ENTRAIL_DISTANCE_NM + ' miles entrail on arrival stream ') + ('following route ' + this.activeRouteModel.routeCode), _logLevel.LOG.INFO);
            }

            var max_interval = tgt_interval + (tgt_interval - min_interval);

            return (0, _random3.default)(min_interval, max_interval);
        }
    }]);

    return ArrivalBase;
}();

exports.default = ArrivalBase;

},{"../../airline/randomAirlineSelectionHelper":533,"../../base/PositionModel":560,"../../constants/aircraftConstants":570,"../../constants/airportConstants":571,"../../constants/globalConstants":573,"../../constants/logLevel":574,"../../math/core":584,"../../math/flightMath":586,"../../utilities/unitConverters":595,"../Fix/FixCollection":546,"../Route/RouteModel":548,"lodash/get":469,"lodash/map":496,"lodash/random":500}],538:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _random2 = require('lodash/random');

var _random3 = _interopRequireDefault(_random2);

var _ArrivalBase2 = require('./ArrivalBase');

var _ArrivalBase3 = _interopRequireDefault(_ArrivalBase2);

var _unitConverters = require('../../utilities/unitConverters');

var _globalConstants = require('../../constants/globalConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable camelcase, no-underscore-dangle, no-mixed-operators, func-names, object-shorthand */


/**
 * Generate arrivals in cyclic pattern
 * Arrival rate varies as pictured below. Rate at which the arrival rate
 * increases or decreases remains constant throughout the cycle.

 * |---o---------------o---------------o---------------o-----------| < - - - - - - max arrival rate
 * | o   o           o   o           o   o           o   o         |   +variation
 * o-------o-------o-------o-------o-------o-------o-------o-------o < - - - - - - avg arrival rate
 * |         o   o |         o   o           o   o           o   o |   -variation
 * |-----------o---|-----------o---------------o---------------o---| < - - - - - - min arrival rate
 * |<---period---->|           |<---period---->|
 *
 * @class ArrivalCyclic
 * @extends ArrivalBase
 */
var ArrivalCyclic = function (_ArrivalBase) {
    _inherits(ArrivalCyclic, _ArrivalBase);

    /**
     * @for ArrivalCyclic
     * @constructor
     * @param airport {AirportInstanceModel}
     * @param options {object}
     */
    function ArrivalCyclic(airport, options) {
        _classCallCheck(this, ArrivalCyclic);

        /**
         * amount to deviate from the prescribed frequency
         *
         * @property variation
         * @type {number}
         * @default 0
         */
        var _this = _possibleConstructorReturn(this, (ArrivalCyclic.__proto__ || Object.getPrototypeOf(ArrivalCyclic)).call(this, airport, options));

        _this.variation = 0;

        _this.parse(options);
        return _this;
    }

    /**
     * Arrival Stream Settings
     *
     * @param {integer} period - (optional) length of a cycle, in minutes
     * @param {integer} offset - (optional) minutes to shift starting position in cycle
     */


    _createClass(ArrivalCyclic, [{
        key: 'parse',
        value: function parse(options) {
            _get(ArrivalCyclic.prototype.__proto__ || Object.getPrototypeOf(ArrivalCyclic.prototype), 'parse', this).call(this, options);

            if (options.offset) {
                this.offset = (0, _unitConverters.convertMinutesToSeconds)(options.offset);
            }

            if (options.period) {
                this.period = (0, _unitConverters.convertMinutesToSeconds)(options.period);
            }

            if (options.variation) {
                this.variation = options.variation;
            }
        }
    }, {
        key: 'start',
        value: function start() {
            this.cycleStart = window.gameController.game.time - this.offset;
            var delay = (0, _random3.default)(0, _globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.frequency);
            this.timeout = window.gameController.game_timeout(this.spawnAircraft, delay, this, [true, true]);
        }
    }, {
        key: 'nextInterval',
        value: function nextInterval() {
            // TODO: what do all these magic numbers mean? enumerate the magic numbers.
            var t = window.gameController.game.time - this.cycleStart;
            var done = t / (this.period / 4); // progress in current quarter-period

            if (done >= 4) {
                this.cycleStart += this.period;

                return _globalConstants.TIME.ONE_HOUR_IN_SECONDS / (this.frequency + (done - 4) * this.variation);
            } else if (done <= 1) {
                return _globalConstants.TIME.ONE_HOUR_IN_SECONDS / (this.frequency + done * this.variation);
            } else if (done <= 2) {
                return _globalConstants.TIME.ONE_HOUR_IN_SECONDS / (this.frequency + 2 * (this.period - 2 * t) / this.period * this.variation);
            } else if (done <= 3) {
                return _globalConstants.TIME.ONE_HOUR_IN_SECONDS / (this.frequency - (done - 2) * this.variation);
            } else if (done < 4) {
                return _globalConstants.TIME.ONE_HOUR_IN_SECONDS / (this.frequency - 4 * (this.period - t) / this.period * this.variation);
            }
        }
    }]);

    return ArrivalCyclic;
}(_ArrivalBase3.default);

exports.default = ArrivalCyclic;

},{"../../constants/globalConstants":573,"../../utilities/unitConverters":595,"./ArrivalBase":537,"lodash/random":500}],539:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _random2 = require('lodash/random');

var _random3 = _interopRequireDefault(_random2);

var _ArrivalBase2 = require('./ArrivalBase');

var _ArrivalBase3 = _interopRequireDefault(_ArrivalBase2);

var _core = require('../../math/core');

var _unitConverters = require('../../utilities/unitConverters');

var _globalConstants = require('../../constants/globalConstants');

var _logLevel = require('../../constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable camelcase, no-underscore-dangle, no-mixed-operators, func-names, object-shorthand */


/**
 * Generate arrivals in a repeating surge
 *
 * Arrival rate goes from very low and steeply increases to a sustained arrival surge of densely packed aircraft.
 *
 * Example airport: `EDDT - Berlin Tegel Airport`
 *
 * o o o o o o o o o o - - - - - - - - - - - o o o o o o o o o o-----+ < - - - max arrival rate (*this.factor)
 * o                 o                       o                 o     |
 * o                 o                       o                 o     |   x(this.factor)
 * o                 o                       o                 o     |
 * o - - - - - - - - o o o o o o o o o o o o o - - - - - - - - o o o-+ < - - - min arrival rate (n)
 * |<--- up time --->|<----- down time ----->|<--- up time --->|
 *
 * @class ArrivalSurge
 * @extends ArrivalBase
 */
var ArrivalSurge = function (_ArrivalBase) {
    _inherits(ArrivalSurge, _ArrivalBase);

    /**
     * @for ArrivalBase
     * @constructor
     * @param airport {AirportInstanceModel}
     * @param options {object}
     */
    function ArrivalSurge(airport, options) {
        _classCallCheck(this, ArrivalSurge);

        /**
         * miles entrail during the surge [fast,slow]
         *
         * @property entrail
         * @type {number}
         * @default
         */
        var _this = _possibleConstructorReturn(this, (ArrivalSurge.__proto__ || Object.getPrototypeOf(ArrivalSurge)).call(this, airport, options));

        _this.entrail = [5.5, 10];

        // Calculated
        /**
         * time length of surge, in minutes
         *
         * @property uptime
         * @type {number}
         * @default 0
         */
        _this.uptime = 0;

        /**
         * arrival rate when "in the surge"
         *
         * @property acph_up
         * @type {number}
         * @default 0
         */
        _this.acph_up = 0;

        /**
         * arrival rate when not "in the surge"
         *
         * @property acph_dn
         * @type {number}
         * @default 0
         */
        _this.acph_dn = 0;

        _this.parse(options);
        _this.shapeTheSurge();
        return _this;
    }

    /**
     * Arrival Stream Settings
     *
     * @for ArrivalSurge
     * @method parse
     * @param {integer} period - Optionally specify the length of a cycle in minutes
     * @param {integer} offset - Optionally specify the center of the wave in minutes
     * @param {array} entrail - 2-element array with [fast,slow] nm between each
     *                          successive arrival. Note that the entrail distance on
     *                          the larger gap ("slow") will be adjusted slightly in
     *                          order to maintain the requested frequency. This is
     *                          simply due to the fact that we can't divide perfectly
     *                          across each period, so we squish the gap a tiny bit to
     *                          help us hit the mark on the aircraft-per-hour rate.
     */


    _createClass(ArrivalSurge, [{
        key: 'parse',
        value: function parse(options) {
            _get(ArrivalSurge.prototype.__proto__ || Object.getPrototypeOf(ArrivalSurge.prototype), 'parse', this).call(this, options);

            if (options.offset) {
                this.offset = (0, _unitConverters.convertMinutesToSeconds)(options.offset);
            }

            if (options.period) {
                this.period = (0, _unitConverters.convertMinutesToSeconds)(options.period);
            }

            if (options.entrail) {
                this.entrail = options.entrail;
            }
        }

        /**
         * Determines the time spent at elevated and slow spawn rates
         *
         * @for ArrivalSurge
         * @method shapeTheSurge
         */

    }, {
        key: 'shapeTheSurge',
        value: function shapeTheSurge() {
            this.acph_up = this.speed / this.entrail[0];
            this.acph_dn = this.speed / this.entrail[1]; // to help the uptime calculation

            this.uptime = (this.period * this.frequency - this.period * this.acph_dn) / (this.acph_up - this.acph_dn);
            this.uptime -= this.uptime % (_globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.acph_up);
            // FIXME: This would better belong in a helper method and should be simplified
            // adjust to maintain correct acph rate
            this.acph_dn = Math.floor(this.frequency * this.period / _globalConstants.TIME.ONE_HOUR_IN_SECONDS - Math.round(this.acph_up * this.uptime / _globalConstants.TIME.ONE_HOUR_IN_SECONDS)) * _globalConstants.TIME.ONE_HOUR_IN_SECONDS / (this.period - this.uptime);

            // TODO: abstract this if/else block
            // Verify we can comply with the requested arrival rate based on entrail spacing
            if (this.frequency > this.acph_up) {
                log(this.airport.icao + ': TOO MANY ARRIVALS IN SURGE! Requested: ' + (this.frequency + ' acph | Acceptable Range for requested entrail distance: ') + (Math.ceil(this.acph_dn) + ' acph - ' + Math.floor(this.acph_up) + ' acph'), _logLevel.LOG.WARNING);

                this.frequency = this.acph_up;
                this.acph_dn = this.acph_up;
            } else if (this.frequency < this.acph_dn) {
                log(this.airport.icao + ': TOO FEW ARRIVALS IN SURGE! Requested: ' + (this.frequency + ' acph | Acceptable Range for requested entrail distance: ') + (Math.ceil(this.acph_dn) + ' acph - ' + Math.floor(this.acph_up) + ' acph'), _logLevel.LOG.WARNING);

                this.frequency = this.acph_dn;
                this.acph_up = this.acph_dn;
            }
        }

        /**
         * @for ArrivalSurge
         * @method nextInterval
         * @return interval_up {number}
         */

    }, {
        key: 'nextInterval',
        value: function nextInterval() {
            var t = window.gameController.game.time - this.cycleStart;
            var done = t / this.period; // progress in period
            var interval_up = _globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.acph_up;
            var interval_dn = _globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.acph_dn;
            // reduced spawn rate
            var timeleft = this.period - t;

            if (done >= 1) {
                this.cycleStart += this.period;

                return interval_up;
            }

            // elevated spawn rate
            if (t <= this.uptime) {
                return interval_up;
            }

            if (timeleft > interval_dn + interval_up) {
                // plenty of time until new period
                return interval_dn;
            } else if (timeleft > interval_dn) {
                // next plane will delay the first arrival of the next period
                return interval_dn - (t + interval_dn + interval_up - this.period);
            }

            // next plane is first of elevated spawn rate
            this.cycleStart += this.period;

            return interval_up;
        }

        /**
         * @for ArrivalSurge
         * @method start
         */

    }, {
        key: 'start',
        value: function start() {
            var delay = (0, _random3.default)(0, _globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.frequency);
            this.cycleStart = window.gameController.game.time - this.offset + delay;
            this.timeout = window.gameController.game_timeout(this.spawnAircraft, delay, this, [true, true]);
        }
    }]);

    return ArrivalSurge;
}(_ArrivalBase3.default);

exports.default = ArrivalSurge;

},{"../../constants/globalConstants":573,"../../constants/logLevel":574,"../../math/core":584,"../../utilities/unitConverters":595,"./ArrivalBase":537,"lodash/random":500}],540:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _random2 = require('lodash/random');

var _random3 = _interopRequireDefault(_random2);

var _ArrivalBase2 = require('./ArrivalBase');

var _ArrivalBase3 = _interopRequireDefault(_ArrivalBase2);

var _core = require('../../math/core');

var _circle = require('../../math/circle');

var _unitConverters = require('../../utilities/unitConverters');

var _globalConstants = require('../../constants/globalConstants');

var _logLevel = require('../../constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable camelcase, no-underscore-dangle, no-mixed-operators, func-names, object-shorthand */


/** Generate arrivals in a repeating wave
  * Arrival rate varies as pictured below. Arrival rate will increase
  * and decrease faster when changing between the lower/higher rates.
  *
  * ------------o-o-o---------------------------------------+-----------o-o < - - - - - max arrival rate
  *        o             o                                  |      o      |       ^
  *    o                     o                              |  o          |  +variation
  *  o                         o                            |o            |       v
  * o-------------------------- o---------------------------o-------------+ < - - - - - avg arrival rate
  * |                            o                         o|             |       ^
  * |                              o                     o  |             |  -variation
  * |                                  o             o      |             |       v
  * +---------------------------------------o-o-o-----------+-------------+ < - - - - - min arrival rate
  * |                                                       |
  * |<  -  -  -  -  -  -  -  - period -  -  -  -  -  -  -  >|
  *
  * @class ArrivalWave
  * @extends ArrivalBase
 */
var ArrivalWave = function (_ArrivalBase) {
    _inherits(ArrivalWave, _ArrivalBase);

    /**
     * @for ArrivalWave
     * @constructor
     * @param airport {AirportInstanceModel}
     * @param options {object}
     */
    function ArrivalWave(airport, options) {
        _classCallCheck(this, ArrivalWave);

        /**
         * amount to deviate from the prescribed frequency
         *
         * @propery variation
         * @type {number}
         * @default 0
         */
        var _this = _possibleConstructorReturn(this, (ArrivalWave.__proto__ || Object.getPrototypeOf(ArrivalWave)).call(this, airport, options));

        _this.variation = 0;

        _this.parse(options);
        _this.clampSpawnRate(5.5); // minimum of 5.5nm entrail
        return _this;
    }

    /**
     * Arrival Stream Settings
     *
     * @for ArrivalWave
     * @method parse
     * @param {integer} period - (optional) length of a cycle, in minutes
     * @param {integer} offset - (optional) minutes to shift starting position in cycle
     */


    _createClass(ArrivalWave, [{
        key: 'parse',
        value: function parse(options) {
            _get(ArrivalWave.prototype.__proto__ || Object.getPrototypeOf(ArrivalWave.prototype), 'parse', this).call(this, options);

            if (options.offset) {
                this.offset = (0, _unitConverters.convertMinutesToSeconds)(options.offset);
            }

            if (options.period) {
                this.period = (0, _unitConverters.convertMinutesToSeconds)(options.period);
            }

            if (options.variation) {
                this.variation = options.variation;
            }
        }

        /**
         * Ensures the spawn rate will be at least the required entrail distance
         *
         * @for ArrivalWave
         * @method clampSpawnRate
         * @param {number} entrail_dist - minimum distance between successive arrivals, in nm
         */

    }, {
        key: 'clampSpawnRate',
        value: function clampSpawnRate(entrail_dist) {
            var entrail_interval = entrail_dist * (_globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.speed);
            var min_interval = _globalConstants.TIME.ONE_HOUR_IN_SECONDS / (this.frequency + this.variation);

            // TODO: return early here to avoid this wrapping if
            if (min_interval < entrail_interval) {
                var diff = entrail_interval - min_interval;

                // can reduce variation to achieve acceptable spawn rate
                if (diff <= _globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.variation) {
                    log('Requested arrival rate variation of +/-' + this.variation + ' acph reduced to ' + 'maintain minimum of ' + entrail_dist + ' miles entrail on arrival stream following ' + 'route ' + _jquery2.default.map(this.fixes, function (v) {
                        return v.fix;
                    }).join('-'), _logLevel.LOG.WARNING);

                    this.variation = this.variation - _globalConstants.TIME.ONE_HOUR_IN_SECONDS / diff; // reduce the variation
                } else {
                    // need to reduce frequency to achieve acceptable spawn rate
                    log('Requested arrival rate of ' + this.frequency + ' acph overridden to ' + 'maintain minimum of ' + entrail_dist + ' miles entrail on arrival stream ' + 'following route ' + _jquery2.default.map(this.fixes, function (v) {
                        return v.fix;
                    }).join('-'), _logLevel.LOG.WARNING);

                    // make spawn at constant interval
                    this.variation = 0;
                    // reduce the frequency
                    this.frequency = _globalConstants.TIME.ONE_HOUR_IN_SECONDS / entrail_interval;
                }
            }
        }

        /**
         * @for ArrivalWave
         * @method nextInterval
         * return {number}
         */

    }, {
        key: 'nextInterval',
        value: function nextInterval() {
            var t = window.gameController.game.time - this.cycleStart;
            var done = t / this.period; // progress in period

            if (done >= 1) {
                this.cycleStart += this.period;
            }

            var rate = this.frequency + this.variation * (0, _core.sin)(done * (0, _circle.tau)());

            return _globalConstants.TIME.ONE_HOUR_IN_SECONDS / rate;
        }

        /**
         * @for ArrivalWave
         * @method start
         */

    }, {
        key: 'start',
        value: function start() {
            var delay = (0, _random3.default)(0, _globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.frequency);
            // TODO: this might not be available on `window.prop` update reference
            this.cycleStart = window.gameController.game.time - this.offset + delay;
            this.timeout = window.gameController.game_timeout(this.spawnAircraft, delay, this, [true, true]);
        }
    }]);

    return ArrivalWave;
}(_ArrivalBase3.default);

exports.default = ArrivalWave;

},{"../../constants/globalConstants":573,"../../constants/logLevel":574,"../../math/circle":583,"../../math/core":584,"../../utilities/unitConverters":595,"./ArrivalBase":537,"jquery":296,"lodash/random":500}],541:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.arrivalFactory = undefined;

var _ArrivalBase = require('./ArrivalBase');

var _ArrivalBase2 = _interopRequireDefault(_ArrivalBase);

var _ArrivalCyclic = require('./ArrivalCyclic');

var _ArrivalCyclic2 = _interopRequireDefault(_ArrivalCyclic);

var _ArrivalWave = require('./ArrivalWave');

var _ArrivalWave2 = _interopRequireDefault(_ArrivalWave);

var _ArrivalSurge = require('./ArrivalSurge');

var _ArrivalSurge2 = _interopRequireDefault(_ArrivalSurge);

var _logLevel = require('../../constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Calls constructor of the appropriate arrival type
 *
 * @function ArrivalFactory
 * @param airport {AirportModel}
 * @param options {obejct}
 * @return {constructor}
 */
var arrivalFactory = exports.arrivalFactory = function arrivalFactory(airport, options) {
    if (options.type === '') {
        log(airport.icao + ' arrival stream not given type!', _logLevel.LOG.WARNING);
        return null;
    }

    switch (options.type) {
        case 'random':
            return new _ArrivalBase2.default(airport, options);
        case 'cyclic':
            return new _ArrivalCyclic2.default(airport, options);
        case 'wave':
            return new _ArrivalWave2.default(airport, options);
        case 'surge':
            return new _ArrivalSurge2.default(airport, options);
        default:
            log(airport.icao + ' using unsupported arrival type "' + options.type + '"', _logLevel.LOG.WARNING);
            return null;
    }
};

},{"../../constants/logLevel":574,"./ArrivalBase":537,"./ArrivalCyclic":538,"./ArrivalSurge":539,"./ArrivalWave":540}],542:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _random2 = require('lodash/random');

var _random3 = _interopRequireDefault(_random2);

var _RouteModel = require('../Route/RouteModel');

var _RouteModel2 = _interopRequireDefault(_RouteModel);

var _randomAirlineSelectionHelper = require('../../airline/randomAirlineSelectionHelper');

var _generalUtilities = require('../../utilities/generalUtilities');

var _aircraftConstants = require('../../constants/aircraftConstants');

var _globalConstants = require('../../constants/globalConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Generate departures at random, averaging the specified spawn rate
 *
 * @class DepartureBase
 */
var DepartureBase = function () {
    /**
     * @for DepartureBase
     * @constructor
     * @param airport {AirportInstanceModel}
     * @param options {object}
     */
    function DepartureBase(airport, options) {
        _classCallCheck(this, DepartureBase);

        /**
         * List of airlines with weight for each
         *
         * @property airlines
         * @type {array}
         * @default []
         */
        this.airlines = [];

        /**
         * @property airport
         * @type {AirportInstanceModel}
         */
        this.airport = airport;

        // TODO: are we initializing an array with a value here?
        /**
         * List of SIDs or departure fix names
         *
         * @property destinations
         * @type {array}
         * @default [0]
         */
        this.destinations = [0];

        /**
         * Spawn rate, in aircraft per hour (acph)
         *
         * @property frequency
         * @type {number}
         * @default 0
         */
        this.frequency = 0;

        /**
         * @property timeout
         * @type {function}
         * @default null
         */
        this.timeout = null;

        /**
         * @property activeRouteModel
         * @type {RouteModel}
         * @default null
         */
        this.activeRouteModel = null;

        this.parse(options);
    }

    /**
     * Departure Stream Settings
     *
     * @for DepartureBase
     * @method parse
     */


    _createClass(DepartureBase, [{
        key: 'parse',
        value: function parse(options) {
            this.airlines = (0, _get3.default)(options, 'airlines', this.airlines);
            this.destinations = (0, _get3.default)(options, 'destinations', this.destinations);
            this.frequency = (0, _get3.default)(options, 'frequency', this.frequency);

            for (var i = 0; i < this.airlines.lenth; i++) {
                var airline = this.airlines[i];
                // reassigns `airline.name` to `airlineName` for readability

                var _airlineNameAndFleetH = (0, _randomAirlineSelectionHelper.airlineNameAndFleetHelper)(airline),
                    airlineName = _airlineNameAndFleetH.name;

                window.airlineController.airline_get(airlineName);
            }
        }

        /**
         * Stop this departure stream
         *
         * @for DepartureBase
         * @method stop
         */

    }, {
        key: 'stop',
        value: function stop() {
            if (this.timeout) {
                window.gameController.game_clear_timeout(this.timeout);
            }
        }

        /**
         * Start this departure stream
         *
         * @for DepartureBase
         * @method start
         */

    }, {
        key: 'start',
        value: function start() {
            var randomSpawnCount = Math.floor((0, _random3.default)(2, 5.99));

            for (var i = 1; i <= randomSpawnCount; i++) {
                // spawn 2-5 departures to start with
                this.spawnAircraft(false);
            }

            this.initiateSpawningLoop();
        }

        /**
         * @for DepartureBase
         * @method initiateSpawningLoop
         */

    }, {
        key: 'initiateSpawningLoop',
        value: function initiateSpawningLoop() {
            var minFrequency = this.frequency * 0.5;
            var maxFrequency = this.frequency * 1.5;
            var randomNumberForTimeout = (0, _random3.default)(minFrequency, maxFrequency);

            // start spawning loop
            this.timeout = window.gameController.game_timeout(this.spawnAircraft, randomNumberForTimeout, this, true);
        }

        /**
         * Spawn a new aircraft
         *
         * @for DepartureBase
         * @method spawnAircraft
         */

    }, {
        key: 'spawnAircraft',
        value: function spawnAircraft(timeout) {
            var message = window.gameController.game_time() - this.start >= 2;
            var airline = (0, _randomAirlineSelectionHelper.randomAirlineSelectionHelper)(this.airlines);
            var aircraftToAdd = {
                message: message,
                airline: airline.name,
                fleet: airline.fleet,
                category: _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE,
                destination: (0, _generalUtilities.choose)(this.destinations)
            };

            window.aircraftController.aircraft_new(aircraftToAdd);

            if (timeout) {
                this.timeout = window.gameController.game_timeout(this.spawnAircraft, this.nextInterval(), this, true);
            }
        }

        /**
         * Determine delay until next spawn
         *
         * @for DepartureBase
         * @method nextInterval
         * @return {number}
         */

    }, {
        key: 'nextInterval',
        value: function nextInterval() {
            // fastest possible between back-to-back departures, in seconds
            var min_interval = 5;
            var tgt_interval = _globalConstants.TIME.ONE_HOUR_IN_SECONDS / this.frequency;
            var max_interval = tgt_interval + (tgt_interval - min_interval);

            return (0, _random3.default)(min_interval, max_interval);
        }
    }]);

    return DepartureBase;
}();

exports.default = DepartureBase;

},{"../../airline/randomAirlineSelectionHelper":533,"../../constants/aircraftConstants":570,"../../constants/globalConstants":573,"../../utilities/generalUtilities":592,"../Route/RouteModel":548,"lodash/get":469,"lodash/random":500}],543:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _DepartureBase2 = require('./DepartureBase');

var _DepartureBase3 = _interopRequireDefault(_DepartureBase2);

var _core = require('../../math/core');

var _circle = require('../../math/circle');

var _unitConverters = require('../../utilities/unitConverters');

var _globalConstants = require('../../constants/globalConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-underscore-dangle, no-mixed-operators, func-names, object-shorthand */


/**
 * Generate departures in cyclic pattern
 *
 * @class DepartureCyclic
 * @extends DepartureBase
 */
var DepartureCyclic = function (_DepartureBase) {
  _inherits(DepartureCyclic, _DepartureBase);

  /**
   * @for DepartureBase
   * @constructor
   * @param airport {AirportInstanceModel}
   * @param options {object}
   */
  function DepartureCyclic(airport, options) {
    _classCallCheck(this, DepartureCyclic);

    /**
     * length of a cycle
     *
     * @property period
     * @type {number}
     * @default TIME.ONE_HOUR_IN_SECONDS
     */
    var _this = _possibleConstructorReturn(this, (DepartureCyclic.__proto__ || Object.getPrototypeOf(DepartureCyclic)).call(this, airport, options));

    _this.period = _globalConstants.TIME.ONE_HOUR_IN_SECONDS;

    /**
     * Start at the peak
     *
     * Optionally specify when the cycle peaks
     *
     * @property offset
     * @type {number}
     * @default -900
     */
    _this.offset = -900;

    /**
     * @property _amplitude
     * @type {number}
     */
    _this._amplitude = _globalConstants.TIME.ONE_HOUR_IN_SECONDS / _this.frequency / 2;

    /**
     * @property _average
     * @type {number}
     */
    _this._average = _globalConstants.TIME.ONE_HOUR_IN_SECONDS / _this.frequency;
    return _this;
  }

  /**
   * @for DepartureCyclic
   * @method parse
   */


  _createClass(DepartureCyclic, [{
    key: 'parse',
    value: function parse(options) {
      _get(DepartureCyclic.prototype.__proto__ || Object.getPrototypeOf(DepartureCyclic.prototype), 'parse', this).call(this, options);

      if (options.period) {
        this.period = (0, _unitConverters.convertMinutesToSeconds)(options.period);
      }

      if (options.offset) {
        // TODO: enumerate the magic numbers
        this.offset = -this.period / 4 + (0, _unitConverters.convertMinutesToSeconds)(options.offset);
      }
    }

    /**
     * @for DepartureCyclic
     * @method nextInterval
     * @return {number}
     */

  }, {
    key: 'nextInterval',
    value: function nextInterval() {
      var gameTimeWithOffset = window.gameController.game_time() + this.offset;
      var sinOffsetOverPeriod = (0, _core.sin)((0, _circle.tau)() * (gameTimeWithOffset / this.period));
      var amplitudeTimesSinOffsetOverPeriod = this._amplitude * sinOffsetOverPeriod;

      return (amplitudeTimesSinOffsetOverPeriod + this._average) / window.gameController.game.frequency;
    }
  }]);

  return DepartureCyclic;
}(_DepartureBase3.default);

exports.default = DepartureCyclic;

},{"../../constants/globalConstants":573,"../../math/circle":583,"../../math/core":584,"../../utilities/unitConverters":595,"./DepartureBase":542}],544:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DepartureCyclic2 = require('./DepartureCyclic');

var _DepartureCyclic3 = _interopRequireDefault(_DepartureCyclic2);

var _globalConstants = require('../../constants/globalConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Generate departures in a repeating wave
 *
 * @class DepartureWave
 * @extends DepartureCyclic
 */
var DepartureWave = function (_DepartureCyclic) {
    _inherits(DepartureWave, _DepartureCyclic);

    /**
     * @for DepartureCyclic
     * @constructor
     * @param airport {AirportInstanceModel}
     * @param options {object}
     */
    function DepartureWave(airport, options) {
        _classCallCheck(this, DepartureWave);

        // TODO: better commenting of the magic numbers in this file. enumerate the magic numbers.
        // Time between aircraft in the wave
        var _this = _possibleConstructorReturn(this, (DepartureWave.__proto__ || Object.getPrototypeOf(DepartureWave)).call(this, airport, options));

        _this._separation = 10;

        // Aircraft per wave
        _this._count = Math.floor(_this._average / _globalConstants.TIME.ONE_HOUR_IN_SECONDS * _this.period);

        if (_this.period / _this._separation < _this._count) {
            console.log('Reducing average departure frequency from ' + _this._average + '/hour to maintain minimum interval');

            _this._count = Math.floor(_globalConstants.TIME.ONE_HOUR_IN_SECONDS / _this._separation);
        }

        // length of a wave in seconds
        _this._waveLength = _this._separation * _this._count - 1;

        // Offset to have center of wave at 0 time
        _this._offset = (_this._waveLength - _this._separation) / 2 + _this.offset;
        return _this;
    }

    /**
     * @for DepartureCyclic
     * @method nextInterval
     * @return {number}
     */


    _createClass(DepartureWave, [{
        key: 'nextInterval',
        value: function nextInterval() {
            var position = (window.gameController.game_time() + this._offset) % this.period;

            if (position >= this._waveLength) {
                return this.period - position;
            }

            return this._separation / window.gameController.game.frequency;
        }
    }]);

    return DepartureWave;
}(_DepartureCyclic3.default);

exports.default = DepartureWave;

},{"../../constants/globalConstants":573,"./DepartureCyclic":543}],545:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.departureFactory = undefined;

var _DepartureBase = require('./DepartureBase');

var _DepartureBase2 = _interopRequireDefault(_DepartureBase);

var _DepartureCyclic = require('./DepartureCyclic');

var _DepartureCyclic2 = _interopRequireDefault(_DepartureCyclic);

var _DepartureWave = require('./DepartureWave');

var _DepartureWave2 = _interopRequireDefault(_DepartureWave);

var _logLevel = require('../../constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Calls constructor of the appropriate arrival type
 *
 * @function DepartureFactory
 * @param airport {AirportModel}
 * @param options {object}
 * @return {constructor}
 */
var departureFactory = exports.departureFactory = function departureFactory(airport, options) {
    if (options.type === '') {
        return log(airport.icao + ' departure stream not given type!', _logLevel.LOG.WARNING);
    }

    switch (options.type) {
        case 'random':
            return new _DepartureBase2.default(airport, options);
        case 'cyclic':
            return new _DepartureCyclic2.default(airport, options);
        case 'wave':
            return new _DepartureWave2.default(airport, options);
        default:
            log(airport.icao + ' using unsupported departure type "' + options.type + '"', _logLevel.LOG.WARNING);
            return null;
    }
};

},{"../../constants/logLevel":574,"./DepartureBase":542,"./DepartureCyclic":543,"./DepartureWave":544}],546:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _ModelSourceFactory = require('../../base/ModelSource/ModelSourceFactory');

var _ModelSourceFactory2 = _interopRequireDefault(_ModelSourceFactory);

var _BaseCollection2 = require('../../base/BaseCollection');

var _BaseCollection3 = _interopRequireDefault(_BaseCollection2);

var _FixModel = require('./FixModel');

var _FixModel2 = _interopRequireDefault(_FixModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A collection of all the `FixModel`s defined in an airport json file.
 *
 * This is built as a static class, so there is only ever once instance.
 * We use a static class here because the methods contained herein are needed by several
 * different classes. This provides a single source of truth for all the `FixModel`s
 * belonging to an Airport.
 *
 * @class FixCollection
 * @extends BaseCollection
 */
var FixCollection = function (_BaseCollection) {
    _inherits(FixCollection, _BaseCollection);

    function FixCollection() {
        _classCallCheck(this, FixCollection);

        return _possibleConstructorReturn(this, (FixCollection.__proto__ || Object.getPrototypeOf(FixCollection)).apply(this, arguments));
    }

    _createClass(FixCollection, [{
        key: 'addItems',

        /**
         * Lifecycle method. Should be run only once on instantiation.
         *
         * @for FixCollection
         * @method addItems
         * @param fixList {object}
         * @param airportPosition {PositionModel}
         */
        value: function addItems(fixList, airportPosition) {
            if (this.length !== 0) {
                // you made it here because an airport has changed.
                // in `AirportModel.parse()` this method is called with the fix data for the new airport. We don't want
                // or need to keep the fixes from a previous airport so if `_items` has a length, we need to reset that
                // property before we begin to add fixes for the new airport.
                this.removeItems();
            }

            this._buildFixModelsFromList(fixList, airportPosition);
        }

        /**
         * Destroy the current instance
         *
         * @for FixCollection
         * @method removeItems
         */

    }, {
        key: 'removeItems',
        value: function removeItems() {
            this._resetFixModels();

            this._items = [];
        }

        /**
         * Add a `FixModel` to the collection
         *
         * @for FixCollection
         * @method addFixToCollection
         * @param fixToAdd {FixModel}
         */

    }, {
        key: 'addFixToCollection',
        value: function addFixToCollection(fixToAdd) {
            if (!(fixToAdd instanceof _FixModel2.default)) {
                throw new TypeError('Expected fixToAdd to be an instance of FixModel');
            }

            this._items.push(fixToAdd);
        }

        /**
         * Find a `FixModel` by `name` if it exists within the collection.
         *
         * @for FixCollection
         * @method findFixByName
         * @param fixName {string}
         * @return {FixModel|null}
         */

    }, {
        key: 'findFixByName',
        value: function findFixByName(fixName) {
            var fixModel = (0, _find3.default)(this._items, { name: fixName.toUpperCase() });

            // if a fix is not found, _find() returns `undefined` so we specifically return null here if a fix is not found
            return fixModel || null;
        }

        /**
         * @for FixCollection
         * @method getFixPositionCoordinates
         * @param fixName {string}
         * @return {array<number>}
         */

    }, {
        key: 'getFixPositionCoordinates',
        value: function getFixPositionCoordinates(fixName) {
            var fixModel = this.findFixByName(fixName);

            if (!fixModel) {
                // error
                return null;
            }

            return fixModel.position;
        }

        /**
         * Find a list of all `FixModel`s within the collection that have a name that does not start with an underscore.
         *
         * @for FixCollection
         * @method findRealFixes
         * @return {array<FixModel>}
         */

    }, {
        key: 'findRealFixes',
        value: function findRealFixes() {
            var realFixList = (0, _map3.default)(this._items, function (item) {
                if (item.name.indexOf('_') !== 0) {
                    return item;
                }
            });

            return (0, _compact3.default)(realFixList);
        }

        /**
         * Loop through each fix provided in the fix list, create a new `FixModel` instance, then send it off
         * to be added to the collection.
         *
         * @for FixCollection
         * @method _buildFixModelsFromList
         * @param fixList {object}
         * @private
         */

    }, {
        key: '_buildFixModelsFromList',
        value: function _buildFixModelsFromList(fixList, airportPosition) {
            var _this2 = this;

            (0, _forEach3.default)(fixList, function (fixCoordinates, fixName) {
                var fixModel = _ModelSourceFactory2.default.getModelSourceForType('FixModel', fixName, fixCoordinates, airportPosition);

                _this2.addFixToCollection(fixModel);
            });
        }

        /**
         * @for FixCollection
         * @method _resetFixModels
         * @private
         */

    }, {
        key: '_resetFixModels',
        value: function _resetFixModels() {
            (0, _forEach3.default)(this._items, function (fixModel) {
                fixModel.reset();
                _ModelSourceFactory2.default.returnModelToPool(fixModel);
            });
        }
    }]);

    return FixCollection;
}(_BaseCollection3.default);

exports.default = new FixCollection();

},{"../../base/BaseCollection":555,"../../base/ModelSource/ModelSourceFactory":557,"./FixModel":547,"lodash/compact":462,"lodash/find":466,"lodash/forEach":468,"lodash/map":496}],547:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _cloneDeep2 = require('lodash/cloneDeep');

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _BaseModel2 = require('../../base/BaseModel');

var _BaseModel3 = _interopRequireDefault(_BaseModel2);

var _PositionModel = require('../../base/PositionModel');

var _PositionModel2 = _interopRequireDefault(_PositionModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Defines a navigational `FixModel`
 *
 * A `FixModel` can be used as part of a `StandardRoute` or as a naviagtional aid.
 * Not all `FixModel`s are a part of a `StandardRoute`.
 *
 * @class FixModel
 */
var FixModel = function (_BaseModel) {
  _inherits(FixModel, _BaseModel);

  /**
   * @for FixModel
   * @constructor
   * @param fixName {string}
   * @param fixCoordinate {array}
   * @param airportPosition {PositionModel}
   */
  function FixModel(fixName, fixCoordinate, airportPosition) {
    _classCallCheck(this, FixModel);

    /**
     * Name of the Fix
     *
     * @property name
     * @type {string}
     * @default ''
     */
    var _this = _possibleConstructorReturn(this, (FixModel.__proto__ || Object.getPrototypeOf(FixModel)).call(this));

    _this.name = '';

    /**
     * Coordinates of the fix
     *
     * @property _fixPosition
     * @type {PositionModel}
     * @default null
     */
    _this._fixPosition = null;

    _this.init(fixName, fixCoordinate, airportPosition);
    return _this;
  }

  /**
   * Provides access to the position data of the instance
   *
   * @property position
   * @return {array}
   */


  _createClass(FixModel, [{
    key: 'init',


    /**
     * Lifecycle method. Should be run only once on instantiation.
     *
     * @for FixModel
     * @method init
     * @param fixName {string}
     * @param fixCoordinate {array}
     * @param airportPosition {PositionModel}
     * @chainable
     */
    value: function init(fixName, fixCoordinate, airportPosition) {
      // TODO: should this be a throwing instead of returning early?
      if (!fixName || !fixCoordinate || !airportPosition) {
        return;
      }

      this.name = fixName.toUpperCase();
      this._fixPosition = new _PositionModel2.default(fixCoordinate, airportPosition, airportPosition.magneticNorthInRadians);

      return this;
    }

    /**
     * reset the current instance
     *
     * @for FixModel
     * @method reset
     * @chainable
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.name = '';
      this._fixPosition = null;

      return this;
    }

    /**
     * Returns a clone of an instance's `_fixPosition` property.
     *
     * It is important to note that this is a _clone_ and not a copy. Once any changes made to this instance will
     * not be reflected in the clone. This creates an entirely new instance of the `_fixPosition` property,
     * and after creation is completely independant of this instance.
     *
     * This is used with `StandardRouteWaypointModel` objects to obtain the position of a fix. This method
     * provides easy access to the `PositionModel` that already exists here.
     *
     * @for FixModel
     * @return {PositionModel}  a clone of the current `_fixPosition` property
     */

  }, {
    key: 'clonePosition',
    value: function clonePosition() {
      return (0, _cloneDeep3.default)(this._fixPosition);
    }
  }, {
    key: 'position',
    get: function get() {
      return this._fixPosition.position;
    }
  }]);

  return FixModel;
}(_BaseModel3.default);

exports.default = FixModel;

},{"../../base/BaseModel":556,"../../base/PositionModel":560,"lodash/cloneDeep":461}],548:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseModel2 = require('../../base/BaseModel');

var _BaseModel3 = _interopRequireDefault(_BaseModel2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Symbol that divides each route segment
 *
 * @property SEGMENT_SEPARATION_SYMBOL
 * @type {string}
 * @final
 */
var SEGMENT_SEPARATION_SYMBOL = '.';

/**
 * A route is assumed to have, at most, three parts.
 *
 * @property MAXIMUM_ROUTE_SEGMENT_LENGTH
 * @type {number}
 * @final
 */
var MAXIMUM_ROUTE_SEGMENT_LENGTH = 3;

// TODO: this class needs a better name
/**
 * @class RouteModel
 */

var RouteModel = function (_BaseModel) {
  _inherits(RouteModel, _BaseModel);

  /**
   * example `routeCode`
   *
   * ```
   * 'BETHL.GRNPA1.KLAS'
   * ```
   *
   * // TODO: should be able to support input of:
   * - KSFO.OFFSH9.SXC.V458.IPL.J2.JCT..LLO..ACT..KACT
   * which can be returned as:
   * - ['KSFO.OFFSH9.SXC', 'SXC.V458.IPL', 'IPL.J2.JCT', 'LLO', 'ACT', 'KACT']
   *
   * @for RouteModel
   * @constructor
   * @param routeCode {string}
   */
  function RouteModel(routeCode) {
    var _ret;

    _classCallCheck(this, RouteModel);

    var _this = _possibleConstructorReturn(this, (RouteModel.__proto__ || Object.getPrototypeOf(RouteModel)).call(this));

    if (typeof routeCode === 'undefined' || typeof routeCode !== 'string') {
      console.error('Invalid data type passed to RouteModel. Expected a string but received ' + routeCode);

      return _possibleConstructorReturn(_this);
    }

    if (!_this._isValidRouteCode(routeCode)) {
      // eslint-disable-next-line max-len
      throw new TypeError('Invalid routeCode passed to RouteModel. Expected a routeCode of the shape ORIGIN.BASE.DESTINATION but instead received ' + routeCode);
    }

    /**
     * @property entry
     * @type {string}
     * @default ''
     */
    _this.entry = '';

    /**
     * @property procedure
     * @type {string}
     * @default ''
     */
    _this.procedure = '';

    /**
     * @property exit
     * @type {string}
     * @default ''
     */
    _this.exit = '';

    return _ret = _this._init(routeCode), _possibleConstructorReturn(_this, _ret);
  }

  /**
   * A single string that represents the entire route
   *
   * @property routeCode
   * @return {string}
   */


  _createClass(RouteModel, [{
    key: '_init',


    /**
     * Lifecycle method. Should be run only once on instantiation
     *
     * @for RouteModel
     * @method _init
     * @param routeCode {string}
     * @private
     */
    value: function _init(routeCode) {
      var _extractSegmentNamesF = this._extractSegmentNamesFromRouteCode(routeCode),
          entry = _extractSegmentNamesF.entry,
          base = _extractSegmentNamesF.base,
          exit = _extractSegmentNamesF.exit;

      this.entry = entry.toUpperCase();
      this.procedure = base.toUpperCase();
      this.exit = exit.toUpperCase();

      return this;
    }

    /**
     * reset this instance
     *
     * @for RouteModel
     * @method reset
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.entry = '';
      this.procedure = '';
      this.exit = '';
    }

    /**
     * @for RouteModel
     * @method _extractSegmentNamesFromRouteCode
     * @param routeCode {string}
     * @return {object}
     * @private
     */

  }, {
    key: '_extractSegmentNamesFromRouteCode',
    value: function _extractSegmentNamesFromRouteCode(routeCode) {
      var routeSegments = routeCode.split(SEGMENT_SEPARATION_SYMBOL);

      return {
        entry: routeSegments[0],
        base: routeSegments[1],
        exit: routeSegments[2]
      };
    }

    /**
     * Verify that a routeCode has exactly 3 segments
     *
     * @for RouteModel
     * @method _isValidRouteCode
     * @param routeCode {string}
     * @return {boolean}
     * @private
     */

  }, {
    key: '_isValidRouteCode',
    value: function _isValidRouteCode(routeCode) {
      return routeCode.split(SEGMENT_SEPARATION_SYMBOL).length === MAXIMUM_ROUTE_SEGMENT_LENGTH;
    }
  }, {
    key: 'routeCode',
    get: function get() {
      return this.entry + '.' + this.procedure + '.' + this.exit;
    }
  }]);

  return RouteModel;
}(_BaseModel3.default);

exports.default = RouteModel;

},{"../../base/BaseModel":556}],549:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _BaseModel2 = require('../base/BaseModel');

var _BaseModel3 = _interopRequireDefault(_BaseModel2);

var _PositionModel = require('../base/PositionModel');

var _PositionModel2 = _interopRequireDefault(_PositionModel);

var _core = require('../math/core');

var _circle = require('../math/circle');

var _unitConverters = require('../utilities/unitConverters');

var _vector = require('../math/vector');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class RunwayModel
 */
var RunwayModel = function (_BaseModel) {
    _inherits(RunwayModel, _BaseModel);

    /**
     * @for RunwayModel
     * @constructor
     * @param options {object}
     * @param end
     * @param airport {AirportModel}
     */
    function RunwayModel() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var end = arguments[1];
        var airport = arguments[2];

        _classCallCheck(this, RunwayModel);

        var _this = _possibleConstructorReturn(this, (RunwayModel.__proto__ || Object.getPrototypeOf(RunwayModel)).call(this));

        options.airport = airport;
        _this.airport = null;
        _this.angle = null;
        _this.elevation = 0;
        _this.delay = 2;
        _this.gps = [];
        _this.ils = {
            // TODO: what do these numbers mean? enumerate the magic numbers
            enabled: true,
            loc_maxDist: (0, _unitConverters.km)(25),
            gs_maxHeight: 9999,
            gs_gradient: (0, _unitConverters.degreesToRadians)(3)
        };
        _this.labelPos = [];
        _this.length = null;
        _this.midfield = [];
        _this.name = '';
        _this.position = [];
        _this.queue = [];
        _this.sepFromAdjacent = (0, _unitConverters.km)(3);

        _this.parse(options, end);
        return _this;
    }

    /**
     * @for RunwayModel
     * @method parse
     * @param data
     * @param end
     */


    _createClass(RunwayModel, [{
        key: 'parse',
        value: function parse(data, end) {
            this.airport = data.airport;

            if (data.delay) {
                this.delay = data.delay[end];
            }

            if (data.end) {
                var thisSide = new _PositionModel2.default(data.end[end], data.reference_position, data.magnetic_north);
                // FIXME: ressignment of an argument with an inline ternary? this line needs some work.
                var farSide = new _PositionModel2.default(data.end[end === 0 ? 1 : 0], data.reference_position, data.magnetic_north);

                // TODO: `gps` and `elevation` are available from the `PositionModel` and should be pulled from there
                // instead of setting direct properties. If direct properties are needed, use getters isntead.
                // GPS latitude and longitude position
                this.gps = [thisSide.latitude, thisSide.longitude];

                if (thisSide.elevation != null) {
                    this.elevation = thisSide.elevation;
                }

                if (this.elevation === 0 && this.airport.elevation !== 0) {
                    this.elevation = this.airport.elevation;
                }

                // relative position, based on center of map
                this.position = thisSide.position;
                this.length = (0, _vector.vlen)((0, _vector.vsub)(farSide.position, thisSide.position));
                // TODO: what is the 0.5 for? enumerate the magic number
                this.midfield = (0, _vector.vscale)((0, _vector.vadd)(thisSide.position, farSide.position), 0.5);
                this.angle = (0, _circle.radians_normalize)((0, _vector.vradial)((0, _vector.vsub)(farSide.position, thisSide.position)));
            }

            if (data.ils) {
                this.ils.enabled = data.ils[end];
            }

            if (data.ils_distance) {
                this.ils.loc_maxDist = (0, _unitConverters.km)(data.ils_distance[end]);
            }

            if (data.ils_gs_maxHeight) {
                this.ils.gs_maxHeight = data.ils_gs_maxHeight[end];
            }

            if (data.glideslope) {
                this.ils.gs_gradient = (0, _unitConverters.degreesToRadians)(data.glideslope[end]);
            }

            if (data.name_offset) {
                this.labelPos = data.name_offset[end];
            }

            if (data.name) {
                this.name = data.name[end];
            }

            if (data.sepFromAdjacent) {
                this.sepFromAdjacent = (0, _unitConverters.km)(data.sepFromAdjacent[end]);
            }
        }

        /**
         *
         *
         * @for RunwayModel
         * @method
         */

    }, {
        key: 'addQueue',
        value: function addQueue(aircraft) {
            this.queue.push(aircraft);
        }

        /**
         *
         *
         * @for RunwayModel
         * @method
         */

    }, {
        key: 'removeQueue',
        value: function removeQueue(aircraft, force) {
            if (this.queue[0] === aircraft || force) {
                this.queue.shift(aircraft);

                if (this.queue.length >= 1) {
                    this.queue[0].moveForward();
                }

                return true;
            }

            return false;
        }

        /**
         *
         *
         * @for RunwayModel
         * @method
         */

    }, {
        key: 'inQueue',
        value: function inQueue(aircraft) {
            return this.queue.indexOf(aircraft);
        }

        /**
         *
         *
         * @for RunwayModel
         * @method
         */

    }, {
        key: 'taxiDelay',
        value: function taxiDelay() {
            // TODO: what does 3 mean? enumerate the magic numbers.
            return (this.delay + Math.random()) * 3;
        }

        /**
         *
         *
         * @for RunwayModel
         * @method
         */

    }, {
        key: 'getGlideslopeAltitude',
        value: function getGlideslopeAltitude(distance, /* optional */gs_gradient) {
            if (!gs_gradient) {
                gs_gradient = this.ils.gs_gradient;
            }

            distance = Math.max(0, distance);
            var rise = (0, _core.tan)((0, _core.abs)(gs_gradient));

            // TODO: this logic could be abstracted to a helper.
            // TODO: what does 3280 mean? enumerate the magic number
            return this.elevation + rise * distance * 3280;
        }
    }]);

    return RunwayModel;
}(_BaseModel3.default);

exports.default = RunwayModel;

},{"../base/BaseModel":556,"../base/PositionModel":560,"../math/circle":583,"../math/core":584,"../math/vector":587,"../utilities/unitConverters":595}],550:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _BaseCollection2 = require('../../base/BaseCollection');

var _BaseCollection3 = _interopRequireDefault(_BaseCollection2);

var _RouteSegmentModel = require('./RouteSegmentModel');

var _RouteSegmentModel2 = _interopRequireDefault(_RouteSegmentModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A collection of `RouteSegment`s.
 *
 * Provide a way to deal with the various parts of a `StandardProcedureRoute` as defined in each
 * airport json file.
 *
 * Each SID is broken up into three route segments:
 * - `rwy` (optional)
 * - `body`
 * - `exitPoints` (optional)
 *
 * Each STAR is broken up into three route segments:
 * - `entryPoints` (optional)
 * - `body`
 * - `rwy` (optional)
 *
 * This collection is meant to contain the waypoints for a single route segment and can be
 * used to resaon about the route as a single unit.
 *
 * @class RouteSegmentCollection
 */
var RouteSegmentCollection = function (_BaseCollection) {
    _inherits(RouteSegmentCollection, _BaseCollection);

    /**
     * @constructor
     * @param routeSegments {object}
     */
    /* istanbul ignore next */
    function RouteSegmentCollection(routeSegments) {
        var _ret;

        _classCallCheck(this, RouteSegmentCollection);

        var _this = _possibleConstructorReturn(this, (RouteSegmentCollection.__proto__ || Object.getPrototypeOf(RouteSegmentCollection)).call(this));

        if (typeof routeSegments === 'undefined' || !(0, _isObject3.default)(routeSegments) || (0, _isArray3.default)(routeSegments)) {
            throw new TypeError('Expected routeSegments to be an object. Instead received ' + (typeof routeSegments === 'undefined' ? 'undefined' : _typeof(routeSegments)));
        }

        /**
         * Name of the RouteSegment
         *
         * @property name
         * @type {string}
         * @default ''
         */
        _this.name = '';

        return _ret = _this._init(routeSegments), _possibleConstructorReturn(_this, _ret);
    }

    /**
     * Provide access to the contents of `_items`
     *
     * @property items
     * @return {array}
     */


    _createClass(RouteSegmentCollection, [{
        key: '_init',


        /**
         * Lifecycle method. Should be run only once on instantiation.
         *
         * @for RouteSegmentCollection
         * @method _init
         * @param routeSegments {object}
         * @chainable
         * @private
         */
        value: function _init(routeSegments) {
            var _this2 = this;

            (0, _forEach3.default)(routeSegments, function (routeWaypoints, key) {
                var routeSegmentModel = new _RouteSegmentModel2.default(key, routeWaypoints);

                _this2._addSegmentToCollection(routeSegmentModel);
            });

            return this;
        }

        /**
         * Destroy the current instance
         *
         * @for RouteSegmentCollection
         * @method destroy
         * @chainable
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this._id = '';
            this.name = '';
            this._items = [];

            return this;
        }

        /**
         * Find a `RouteSegmentModel` within the collection by its name
         *
         * @for RouteSegmentCollection
         * @method findSegmentByName
         * @param segmentName {string}
         * @return {SegmentModel}
         */

    }, {
        key: 'findSegmentByName',
        value: function findSegmentByName(segmentName) {
            return (0, _find3.default)(this._items, { name: segmentName.toUpperCase() });
        }

        /**
         * Find a list of waypoints for a given `segmentName`
         *
         * @for RouteSegmentCollection
         * @method findWaypointsForSegmentName
         * @param segmentName {string}
         * @return {array}
         */

    }, {
        key: 'findWaypointsForSegmentName',
        value: function findWaypointsForSegmentName(segmentName) {
            var segment = this.findSegmentByName(segmentName);

            return segment.findWaypointsForSegment();
        }

        /**
         * Return a list of fixNames for all of the `RouteSegmentModel`s in the collection
         *
         * @for RouteSegmentCollection
         * @method gatherFixNamesForCollection
         * @return {array}
         */

    }, {
        key: 'gatherFixNamesForCollection',
        value: function gatherFixNamesForCollection() {
            return (0, _map3.default)(this._items, function (item) {
                return item.name;
            });
        }

        /**
         * Add a new segment to the collection
         *
         * @for RouteSegmentCollection
         * @method _addSegmentToCollection
         * @param segment {SegmentModel}
         * @chainable
         * @private
         */

    }, {
        key: '_addSegmentToCollection',
        value: function _addSegmentToCollection(segment) {
            if (!(segment instanceof _RouteSegmentModel2.default)) {
                // eslint-disable-next-line max-len
                throw new TypeError('Expected segment to be an instance of RouteSegmentModel, instead received ' + segment + '.');
            }

            this._items.push(segment);

            return this;
        }
    }, {
        key: 'items',
        get: function get() {
            return this._items;
        }
    }]);

    return RouteSegmentCollection;
}(_BaseCollection3.default);

exports.default = RouteSegmentCollection;

},{"../../base/BaseCollection":555,"./RouteSegmentModel":551,"lodash/find":466,"lodash/forEach":468,"lodash/isArray":476,"lodash/isObject":487,"lodash/map":496}],551:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _BaseModel2 = require('../../base/BaseModel');

var _BaseModel3 = _interopRequireDefault(_BaseModel2);

var _StandardRouteWaypointModel = require('./StandardRouteWaypointModel');

var _StandardRouteWaypointModel2 = _interopRequireDefault(_StandardRouteWaypointModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides an interface for dealing with a list of `StandardRouteWaypointModel`s that make up a given route segment.
 *
 * @class RouteSegmentModel
 */
var RouteSegmentModel = function (_BaseModel) {
    _inherits(RouteSegmentModel, _BaseModel);

    /**
     * segmentWaypoints should come in a similar shape to:
     * - ["_NAPSE068", "NAPSE", ["RIOOS", "A130+"], "COMPS"]
     *
     * @constructor
     * @param name {string}  Icao of particular waypoint
     * @param segmentWaypoints {array}  a mixed array of strings or arrays of strings
     */
    /* istanbul ignore next */
    function RouteSegmentModel(name) {
        var _ret;

        var segmentWaypoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

        _classCallCheck(this, RouteSegmentModel);

        /**
         * Name of the RouteSegment
         *
         * @property name
         * @type {string}
         * @default ''
         * @private
         */
        var _this = _possibleConstructorReturn(this, (RouteSegmentModel.__proto__ || Object.getPrototypeOf(RouteSegmentModel)).call(this));

        _this.name = '';

        /**
         * `StandardRouteWaypointModel`s that make up the RouteSegment
         *
         * @property _items
         * @type {array}
         * @default []
         * @private
         */
        _this._items = [];

        return _ret = _this._init(name, segmentWaypoints), _possibleConstructorReturn(_this, _ret);
    }

    /**
     * Return the items in the collection
     *
     * @property items
     * @return {array}
     */


    _createClass(RouteSegmentModel, [{
        key: '_init',


        /**
         * Lifecycle method. Should be run only once on instantiation.
         *
         * @for RouteSegmentModel
         * @method _init
         * @param name {string}
         * @param segmentWaypoints {array}
         * @private
         */
        value: function _init(name, segmentWaypoints) {
            this.name = name;

            if ((0, _isArray3.default)(segmentWaypoints)) {
                this._createWaypointModelsFromList(segmentWaypoints);
            }

            return this;
        }

        /**
         * rest the current instance
         *
         * @for RouteSegmentModel
         * @method reset
         */

    }, {
        key: 'reset',
        value: function reset() {
            this.name = '';
            this._items = [];

            return this;
        }

        /**
         * Return a list of fixes for the RouteSegment.
         *
         * This will return a normalized list of fixes, ex:
         * - [FIXNAME, null]
         * - [FIXNAME, RESTRICTIONS]
         *
         * @for RouteSegmentModel
         * @method findWaypointsForSegment
         * @return fixList {array}
         */

    }, {
        key: 'findWaypointsForSegment',
        value: function findWaypointsForSegment() {
            var fixList = (0, _map3.default)(this._items, function (waypoint) {
                return waypoint.fix;
            });

            return fixList;
        }

        /**
         * @for RouteSegmentModel
         * @method _createWaypointModelsFromList
         * @param segmentWaypoints {array}
         * @return waypointModelList {array}
         */

    }, {
        key: '_createWaypointModelsFromList',
        value: function _createWaypointModelsFromList(segmentWaypoints) {
            var _this2 = this;

            (0, _forEach3.default)(segmentWaypoints, function (fixAndRestrictions) {
                var waypointModel = new _StandardRouteWaypointModel2.default(fixAndRestrictions);

                // TODO: calculate distance here

                _this2._addWaypointToCollection(waypointModel);
            });
        }

        /**
         * Add a new model to the collection and update length.
         *
         * @for RouteSegmentModel
         * @method _addWaypointToCollection
         * @param waypoint {StandardRouteWaypointModel}
         * @private
         */

    }, {
        key: '_addWaypointToCollection',
        value: function _addWaypointToCollection(waypoint) {
            if (!(waypoint instanceof _StandardRouteWaypointModel2.default)) {
                throw new TypeError('Expected waypoint to be an instance of StandardRouteWaypointModel, instead received ' + waypoint + '.');
            }

            this._items.push(waypoint);
        }
    }, {
        key: 'items',
        get: function get() {
            return this._items;
        }

        /**
         * Convenience property to get at the current length of `_items`.
         *
         * @property length
         * @type {number}
         */

    }, {
        key: 'length',
        get: function get() {
            return this._items.length;
        }
    }]);

    return RouteSegmentModel;
}(_BaseModel3.default);

exports.default = RouteSegmentModel;

},{"../../base/BaseModel":556,"./StandardRouteWaypointModel":554,"lodash/forEach":468,"lodash/isArray":476,"lodash/map":496}],552:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _random2 = require('lodash/random');

var _random3 = _interopRequireDefault(_random2);

var _BaseCollection2 = require('../../base/BaseCollection');

var _BaseCollection3 = _interopRequireDefault(_BaseCollection2);

var _StandardRouteModel = require('./StandardRouteModel');

var _StandardRouteModel2 = _interopRequireDefault(_StandardRouteModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Accept `sids` or `stars` data from an airport json file and create a collection of model objects.
 *
 * Provides and interface to reason about a `StandardRoute`, defined as either a SID or STAR.
 * Creates a `StandardRouteModel` for each route defined in the StandardRoute.
 *
 * @class StandardRouteCollection
 */
var StandardRouteCollection = function (_BaseCollection) {
    _inherits(StandardRouteCollection, _BaseCollection);

    /**
     * @constructor
     * @param standardRouteEnum {object}
     */
    /* istanbul ignore next */
    function StandardRouteCollection(standardRouteEnum) {
        var _ret;

        _classCallCheck(this, StandardRouteCollection);

        var _this = _possibleConstructorReturn(this, (StandardRouteCollection.__proto__ || Object.getPrototypeOf(StandardRouteCollection)).call(this));

        if (typeof standardRouteEnum === 'undefined') {
            return _possibleConstructorReturn(_this);
        }

        return _ret = _this._init(standardRouteEnum), _possibleConstructorReturn(_this, _ret);
    }

    // TODO: refactor into a reusable class that can be fed an `item` and will be consumed by the `CanvasController`
    /**
     * Return an identifier and a list of fixes in the order in which they should be drawn.
     *
     * Pulled directly from an airport json `draw` definition per route.
     *
     * @property draw
     * @return {array}
     */


    _createClass(StandardRouteCollection, [{
        key: '_init',


        /**
         * Lifecycle method. Should be run only once on instantiation.
         *
         * @for StandardRouteCollection
         * @method _init
         * @param standardRouteEnum {object}
         * @private
         */
        value: function _init(standardRouteEnum) {
            this._addRouteListToCollection(standardRouteEnum);

            return this;
        }

        /**
         * Destroy the current instance
         *
         * @for StandardRouteCollection
         * @method destroy
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this._items = [];

            return this;
        }

        // TODO: update implementations to accept the FixModel instead of an array
        /**
         * Find a list of fixes for a route, given an `icao`, `exitFixName` and `runwayName` parameter.
         *
         * @for StandardRouteCollection
         * @method getSID
         * @param icao {string}
         * @param exitFixName {string}
         * @param runwayName {string}
         * @return {array}
         */

    }, {
        key: 'findFixesForSidByRunwayAndExit',
        value: function findFixesForSidByRunwayAndExit(icao, exitFixName, runwayName) {
            if (!icao) {
                return;
            }

            var sid = this.findRouteByIcao(icao);

            return sid.findFixesAndRestrictionsForRunwayAndExit(runwayName, exitFixName);
        }

        // TODO: update implementations to accept the FixModel instead of an array
        /**
         * Find a list of fixes for a route, given an `icao`, `entryFixName` and `runwayName` parameter.
         *
         * Used to gather all the fixes for a give STAR route.
         *
         * @for StandardRouteCollection
         * @method getSID
         * @param icao {string}
         * @param entryFixName {string}
         * @param runwayName {string} (optional)
         * @return {array}
         */

    }, {
        key: 'findFixesForStarByEntryAndRunway',
        value: function findFixesForStarByEntryAndRunway(icao, entryFixName, runwayName) {
            if (!icao) {
                return;
            }

            var star = this.findRouteByIcao(icao);

            return star.findFixesAndRestrictionsForEntryAndRunway(entryFixName, runwayName);
        }

        /**
         * Find a list of `StandardWaypointModel`s for a specific route
         *
         * @for StandardRouteCollection
         * @method findFixModelsForRouteByEntryAndExit
         * @param icao {string}
         * @param entry {string}
         * @param exit {string}
         * @param isPreSpawn {boolean} flag used to determine if distances between waypoints should be calculated
         * @return {StandardRouteModel}
         */

    }, {
        key: 'findFixModelsForRouteByEntryAndExit',
        value: function findFixModelsForRouteByEntryAndExit(icao, entry, exit, isPreSpawn) {
            if (!icao) {
                return;
            }

            var route = this.findRouteByIcao(icao);

            return route.findStandardWaypointModelsForEntryAndExit(entry, exit, isPreSpawn);
        }

        /**
         * Find a random name of an `exitPoint` segment that exists within the collection.
         *
         * @for StandardRouteCollection
         * @method findRandomExitPointForSIDIcao
         * @param icao {string}
         * @return {string}
         */

    }, {
        key: 'findRandomExitPointForSIDIcao',
        value: function findRandomExitPointForSIDIcao(icao) {
            var sid = this.findRouteByIcao(icao);

            // if sid doesnt have any exit points it ends at fix for which the SID is named
            if (!sid.hasExitPoints()) {
                return sid.icao;
            }

            // if has exitPoints, return a randomly selected one from a list of exitFixNames
            var exitPointIcaos = sid.gatherExitPointNames();
            var maxIndex = exitPointIcaos.length - 1;
            var randomIndex = (0, _random3.default)(0, maxIndex);

            return exitPointIcaos[randomIndex];
        }

        /**
         * Find a `StandardRouteModel` within the collection given an `icao`
         *
         * @for StandardRouteCollection
         * @method findRouteByIcao
         * @param icao {string}
         * @return {StandardRouteModel|undefined}
         */

    }, {
        key: 'findRouteByIcao',
        value: function findRouteByIcao(icao) {
            return (0, _find3.default)(this._items, { icao: icao.toUpperCase() });
        }

        /**
         * @for StandardRouteCollection
         * @method hasRoute
         * @param routeName {string}
         * @return {boolean}
         */

    }, {
        key: 'hasRoute',
        value: function hasRoute(routeName) {
            return !(0, _isNil3.default)(this.findRouteByIcao(routeName));
        }

        /**
         * Add a list of sids to the collection
         *
         * @for StandardRouteCollection
         * @method _addRouteListToCollection
         * @param routeList {object}
         * @private
         */

    }, {
        key: '_addRouteListToCollection',
        value: function _addRouteListToCollection(routeList) {
            var _this2 = this;

            (0, _forEach3.default)(routeList, function (route) {
                var routeModel = new _StandardRouteModel2.default(route);

                _this2._addSidToCollection(routeModel);
            });

            return this;
        }

        /**
         * Add a `StandardRouteModel` to the collection and update length.
         *
         * @for StandardRouteCollection
         * @method _addSidToCollection
         * @param routeModel {StandardRouteModel}
         * @private
         */

    }, {
        key: '_addSidToCollection',
        value: function _addSidToCollection(routeModel) {
            if (!(routeModel instanceof _StandardRouteModel2.default)) {
                // eslint-disable-next-line max-len
                throw new TypeError('Expected routeModel to be an instance of StandardRouteModel, instead received ' + routeModel);
            }

            this._items.push(routeModel);

            return this;
        }
    }, {
        key: 'draw',
        get: function get() {
            return (0, _map3.default)(this._items, function (item) {
                var sidForCanvas = {};
                sidForCanvas.identifier = item.icao;

                if (!(0, _isEmpty3.default)(item.draw)) {
                    sidForCanvas.draw = item.draw;
                }

                return sidForCanvas;
            });
        }
    }]);

    return StandardRouteCollection;
}(_BaseCollection3.default);

exports.default = StandardRouteCollection;

},{"../../base/BaseCollection":555,"./StandardRouteModel":553,"lodash/find":466,"lodash/forEach":468,"lodash/isEmpty":480,"lodash/isNil":485,"lodash/map":496,"lodash/random":500}],553:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _isObject2 = require('lodash/isObject');

var _isObject3 = _interopRequireDefault(_isObject2);

var _BaseModel2 = require('../../base/BaseModel');

var _BaseModel3 = _interopRequireDefault(_BaseModel2);

var _RouteSegmentCollection = require('./RouteSegmentCollection');

var _RouteSegmentCollection2 = _interopRequireDefault(_RouteSegmentCollection);

var _RouteSegmentModel = require('./RouteSegmentModel');

var _RouteSegmentModel2 = _interopRequireDefault(_RouteSegmentModel);

var _distance = require('../../math/distance');

var _unitConverters = require('../../utilities/unitConverters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Accepts a single route belonging to a SID or STAR and provides methods to reason about its contents.
 *
 * @class StandardRouteModel
 */
var StandardRouteModel = function (_BaseModel) {
    _inherits(StandardRouteModel, _BaseModel);

    /**
     * Expects an object in the form of (taken from `klas.sids.SHEAD9`):
     *
     *  {
     *    'icao': 'SHEAD9',
     *    'name': 'Shead Nine',
     *    'rwy': {
     *      '01L': [['BESSY', 'S230'], ['MDDOG', 'A90'], ['TARRK', 'A110']],
     *      '01R': [['BESSY', 'S230'], ['MDDOG', 'A90'], ['TARRK', 'A110']],
     *      '07L': ['WASTE', ['BAKRR', 'A70'], ['MINEY', 'A80+'], 'HITME'],
     *      '07R': ['JESJI', ['BAKRR', 'A70'], ['MINEY', 'A80+'], 'HITME'],
     *      '19L': ['FIXIX', ['ROPPR', 'A70'], ['MDDOG', 'A90'], ['TARRK', 'A110']],
     *      '19R': ['JAKER', ['ROPPR', 'A70'], ['MDDOG', 'A90'], ['TARRK', 'A110']],
     *      '25L': ['PIRMD', ['ROPPR', 'A70'], ['MDDOG', 'A90'], ['TARRK', 'A110']],
     *      '25R': ['RBELL', ['ROPPR', 'A70'], ['MDDOG', 'A90'], ['TARRK', 'A110']]
     *    },
     *    'body': [['SHEAD', 'A140+']],
     *    'exitPoints': {
     *      'KENNO': [['DBIGE', 'A210+'], ['BIKKR', 'A210+'], 'KENNO'],
     *      'OAL': [['DBIGE', 'A210+'], ['BIKKR', 'A210+'], 'KENNO', 'OAL']
     *    },
     *    'draw': [
     *      ['BESSY', 'MDDOG'],
     *      ['ROPPR', 'MDDOG', 'TARRK', 'SHEAD'],
     *      ['HITME', 'SHEAD', 'DBIGE', 'BIKKR', 'KENNO*'],
     *      ['KENNO', 'OAL*']
     *    ]
     *  }
     *
     * - `rwy` becomes the `_runwayCollection`. may not be included in a route definition
     * - `body` becomes the `_bodySegmentModel`. may not be included in a route definition
     * - `exitPoints` becomes the  `_exitCollection`. will only be present on SID routes
     * - `entryPoints` (not shown above) becomes the `_entryCollection`. will only be present on STAR routes
     *
     * @constructor
     * @param standardRoute {object}
     */
    /* istanbul ignore next */
    function StandardRouteModel(standardRoute) {
        var _ret;

        _classCallCheck(this, StandardRouteModel);

        var _this = _possibleConstructorReturn(this, (StandardRouteModel.__proto__ || Object.getPrototypeOf(StandardRouteModel)).call(this));

        _this._generateFixList = function (entrySegment, bodySegment, exitSegment) {
            // in the event that one of these functions doesnt find a result set it will return an empty array.
            // we leverage then `lodash.compact()` below to remove any empty values from the array before
            // returning the `fixList`.
            // These functions are called synchronously and order of operation is very important here.
            var fixList = [].concat(_toConsumableArray(entrySegment), _toConsumableArray(bodySegment), _toConsumableArray(exitSegment));

            return (0, _compact3.default)(fixList);
        };

        _this._findFixListForSidByRunwayAndExit = function (runwayName, exitFixName) {
            return _this._generateFixList(_this._findFixListInByCollectionAndSegmentName('rwy', '_entryCollection', runwayName), _this._findBodyFixList(), _this._findFixListInByCollectionAndSegmentName('exitPoints', '_exitCollection', exitFixName));
        };

        _this._findFixListForStarByEntryAndRunway = function (entryFixName, runwayName) {
            return _this._generateFixList(_this._findFixListInByCollectionAndSegmentName('entryPoints', '_entryCollection', entryFixName), _this._findBodyFixList(), _this._findFixListInByCollectionAndSegmentName('rwy', '_exitCollection', runwayName));
        };

        if (!(0, _isObject3.default)(standardRoute) || (0, _isArray3.default)(standardRoute)) {
            throw new TypeError('Expected standardRoute to be an object, instead received ' + (typeof standardRoute === 'undefined' ? 'undefined' : _typeof(standardRoute)));
        }

        /**
         * Name of the fix
         *
         * @property name
         * @type {string}
         * @default ''
         */
        _this.name = '';

        /**
         * SID icoa identifier
         *
         * @property icao
         * @type {string}
         * @default ''
         */
        _this.icao = '';

        /**
         * List of fixes in the order that they should be drawn
         *
         * Pulled straight from the json file.
         * Currently unused and is only a place to put the data.
         *
         * @property draw
         * @type {array}
         * @default
         */
        _this.draw = [];

        /**
         * List of `rwy` segments and fixes
         *
         * Pulled straight from the json file.
         * Currently unused and is only a place to put the data.
         *
         * @property rwy
         * @type {object}
         * @default {}
         */
        _this.rwy = {};

        /**
         * @property body
         * @type {array}
         * @default []
         */
        _this.body = [];

        /**
         * List of `exitPoints` segments and fixes
         *
         * Pulled straight from the json file.
         * Currently unused and is only a place to put the data.
         *
         * @property exitPoints
         * @type {object}
         * @default {}
         */
        _this.exitPoints = {};

        /**
         * `RouteSegmentModel` for the fixes belonging to the `body` segment
         *
         * @property _bodySegmentModel
         * @type {RouteSegmentModel}
         * @default null
         * @private
         */
        _this._bodySegmentModel = null;

        /**
         * Collection of `exitPoints` route segments
         *
         * This property should only be defined for SIDs and null for STAR routes
         *
         * @property _exitCollection
         * @type {RouteSegmentCollection}
         * @default null
         * @private
         */
        _this._exitCollection = null;

        /**
         * Collection of the `entryPoints` route segments.
         *
         * This property should only be defined for STARs and null for SID routes
         * @type {RouteSegmentCollection}
         * @default null
         * @private
         */
        _this._entryCollection = null;

        return _ret = _this._init(standardRoute), _possibleConstructorReturn(_this, _ret);
    }

    /**
     * Lifecycle method. Should be run only once on instantiation.
     *
     * @for StandardRouteModel
     * @method _init
     * @param standardRoute {object}
     * @private
     */


    _createClass(StandardRouteModel, [{
        key: '_init',
        value: function _init(standardRoute) {
            this.icao = standardRoute.icao;
            this.name = standardRoute.name;
            this.draw = standardRoute.draw;
            this.rwy = standardRoute.rwy;
            this.body = standardRoute.body;
            this.exitPoints = (0, _get3.default)(standardRoute, 'exitPoints', {});
            this.entryPoints = (0, _get3.default)(standardRoute, 'entryPoints', {});
            this._bodySegmentModel = this._buildSegmentModel(standardRoute.body);

            this._buildEntryAndExitCollections(standardRoute);
        }

        /**
         * reset the current instance
         *
         * @for StandardRouteModel
         * @method reset
         */

    }, {
        key: 'reset',
        value: function reset() {
            this.icao = '';
            this.name = '';
            this.rwy = [];
            this.body = [];
            this.exitPoints = [];
            this.draw = [];
            this._bodySegmentModel = null;
            this._exitCollection = null;
            this._entryCollection = null;

            return this;
        }

        /**
         * Gather the fixes from all the route segments.
         *
         * Returns an 2d array in the shape of
         * - [[FIXNAME, FIX_RESTRICTIONS], [FIXNAME, FIX_RESTRICTIONS]]
         *
         * @for StandardRouteModel
         * @method findFixesAndRestrictionsForRunwayAndExit
         * @param runwayName {string}
         * @param exitFixName {string}
         * @return {array}
         */

    }, {
        key: 'findFixesAndRestrictionsForRunwayAndExit',
        value: function findFixesAndRestrictionsForRunwayAndExit(runwayName, exitFixName) {
            return this._findFixListForSidByRunwayAndExit(runwayName, exitFixName);
        }

        /**
         * Gather the fixes from all the route segments.
         *
         * @for StandardRouteModel
         * @method findFixesAndRestrictionsForEntryAndRunway
         * @param entryFixName {string}
         * @param runwayName {string}
         * @return {array}
         */

    }, {
        key: 'findFixesAndRestrictionsForEntryAndRunway',
        value: function findFixesAndRestrictionsForEntryAndRunway(entryFixName, runwayName) {
            return this._findFixListForStarByEntryAndRunway(entryFixName, runwayName);
        }

        /**
         * Collect all the `StandardWaypointModel` objects for a given route.
         *
         * @for StandardRouteModel
         * @method findStandardWaypointModelsForEntryAndExit
         * @param entry {string}
         * @param exit {string}
         * @param isPreSpawn {boolean} flag used to determine if distances between waypoints should be calculated
         * @return waypointList {array<StandardWaypointModel>}
         */

    }, {
        key: 'findStandardWaypointModelsForEntryAndExit',
        value: function findStandardWaypointModelsForEntryAndExit(entry, exit, isPreSpawn) {
            var waypointList = this._findStandardWaypointModelsForRoute(entry, exit);

            if (isPreSpawn) {
                this._updateWaypointsWithPreviousWaypointData(waypointList);
            }

            return waypointList;
        }

        /**
         * Given two `StandardWaypointModel` objects, calculate the distance in `nm` between them
         *
         * @for StandardRouteModel
         * @method calculateDistanceBetweenWaypoints
         * @param waypoint {StandardWaypointModel}
         * @param previousWaypoint {StandardWaypointModel}
         * @return distance {number}
         */

    }, {
        key: 'calculateDistanceBetweenWaypoints',
        value: function calculateDistanceBetweenWaypoints(waypoint, previousWaypoint) {
            var distance = (0, _distance.distance2d)(previousWaypoint, waypoint);

            return (0, _unitConverters.nm)(distance);
        }

        /**
         * Return the fixnames for the `_exitCollection`
         *
         * @for StandardRouteModel
         * @method gatherExitPointNames
         * @return {array}
         */

    }, {
        key: 'gatherExitPointNames',
        value: function gatherExitPointNames() {
            if (!this.hasExitPoints()) {
                return [];
            }

            return this._exitCollection.gatherFixNamesForCollection();
        }

        /**
         * Does the `_exitCollection` have any exitPoints?
         *
         * @for StandardRouteModel
         * @method hasExitPoints
         * @return {boolean}
         */

    }, {
        key: 'hasExitPoints',
        value: function hasExitPoints() {
            return this._exitCollection !== null && this._exitCollection.length > 0;
        }

        /**
         * Checks if a given `fixName` is present in the `_entryCollection` or `_exitCollection`.
         *
         * This method does not check for items within the `_bodySegmentModel`. In the future
         * this method may need to be extended to work with `_bodySegmentModel` items as well.
         *
         * @for StandardRouteModel
         * @method hasFixName
         * @param {string}
         * @return {boolean}
         */

    }, {
        key: 'hasFixName',
        value: function hasFixName(fixName) {
            return this._entryCollection && !(0, _isNil3.default)(this._entryCollection.findSegmentByName(fixName)) || this._exitCollection && !(0, _isNil3.default)(this._exitCollection.findSegmentByName(fixName));
        }

        /**
         * Build a new RouteSegmentModel for a segmentFixList
         *
         * `body` segment is expected to be an array, so instead of creating a collection like with `rwy` and
         * `exitPoints`, here we just create a model.  This provides the same methods the collections use, only
         * without the collection layer.
         *
         * @for StandardRouteModel
         * @method _buildSegmentModel
         * @param segmentFixList {array}
         * @return segmentModel {SegmentModel}
         * @private
         */

    }, {
        key: '_buildSegmentModel',
        value: function _buildSegmentModel(segmentFixList) {
            var segmentModel = new _RouteSegmentModel2.default('body', segmentFixList);

            return segmentModel;
        }

        /**
         * Build a collection of `RouteSegmentModel`s from a segment.
         *
         * @for StandardRouteModel
         * @method _buildSegmentCollection
         * @param segment {object}
         * @return segmentCollection {SegmentCollection}
         * @private
         */

    }, {
        key: '_buildSegmentCollection',
        value: function _buildSegmentCollection(segment) {
            if (typeof segment === 'undefined' || (0, _isEmpty3.default)(segment)) {
                return null;
            }

            var segmentCollection = new _RouteSegmentCollection2.default(segment);

            return segmentCollection;
        }

        /**
         * Determine if the `standardRoute` is a sid or a star and build the entry/exit collections
         * with the correct data.
         *
         * STARS will have `entryPoints` defined so `rwy` becomes the `_exitCollection`
         * SIDS will have `exitPoints` defined so `rwy` becomes the `_entryCollection`
         *
         * @for StandardRouteModel
         * @method _buildEntryAndExitCollections
         * @param standardRoute
         * @private
         */

    }, {
        key: '_buildEntryAndExitCollections',
        value: function _buildEntryAndExitCollections(standardRoute) {
            if ((0, _has3.default)(standardRoute, 'entryPoints')) {
                this._entryCollection = this._buildSegmentCollection(standardRoute.entryPoints);
                this._exitCollection = this._buildSegmentCollection(standardRoute.rwy);
            } else if ((0, _has3.default)(standardRoute, 'exitPoints')) {
                this._entryCollection = this._buildSegmentCollection(standardRoute.rwy);
                this._exitCollection = this._buildSegmentCollection(standardRoute.exitPoints);
            } else if ((0, _has3.default)(standardRoute, 'rwy')) {
                console.error('The \'' + this.icao + '\' procedure does not contain exitPoints or entryPoints. ' + 'If this is a SID, at least one exitPoint must be defined. If this is a STAR, at least ' + 'one entryPoint must be defined.');

                this._entryCollection = this._buildSegmentCollection(standardRoute.rwy);
            }
        }

        /**
         * Given three functions, spread their result in an array then return the compacted result.
         *
         * This method expects to receive arrays as results from the three methods passed in.
         * This wrapper method is provided to maintain a consistent interface while allowing for a varying set
         * of methods to be called in the place of each parameter.
         *
         * @for StandardRouteModel
         * @method _generateFixList
         * @param entrySegment {function}
         * @param bodySegment {function}
         * @param exitSegment {function}
         * @return {array}
         * @private
         */


        /**
         * Given a `runwayName` and `exitFixName`, find a list of fixes for the `rwy`, `body` and `exitPoints` segments.
         *
         * @for StandardRouteModel
         * @method _findFixListForSidByRunwayAndExit
         * @param runwayName {string}
         * @param exitFixName {string}
         * @return fixList {array}
         * @private
         */


        /**
         * Given an `entryFixName` and/or a `runwayName`, find a list of fixes for the `entryPoints`,
         * `body` and `rwy` segments.
         *
         * @for StandardRouteModel
         * @method _findFixListForStarByEntryAndRunway
         * @param entryFixName {string}
         * @param runwayName {string} (optional)
         * @return {array}
         */

    }, {
        key: '_findFixListInByCollectionAndSegmentName',


        /**
         * Given an `originalCollectionName`, `collectionName` and a `segmentName`, return a normalized list of
         * fixes with restrictions.
         *
         * @for StandardRouteModel
         * @method _findFixListInByCollectionAndSegmentName
         * @param originalCollectionName {string}  the name of the original collection from airport json,
         *                                         one of: [entryPoints, rwy, exitPoints]
         * @param collectionName {string}  collectionName as defined here, one of: [_entryCollection, _exitCollection]
         * @segmentName {string}  name of the segment to search for
         * @return array {array<array>}
         */
        value: function _findFixListInByCollectionAndSegmentName(originalCollectionName, collectionName, segmentName) {
            var originalCollection = (0, _get3.default)(this, originalCollectionName, null);
            var collection = (0, _get3.default)(this, collectionName, null);

            // specifically checking for an empty string here because this param gets a default of '' when
            // it is received in to the public method
            if (!originalCollection || !collection || segmentName === '') {
                return [];
            }

            return collection.findWaypointsForSegmentName(segmentName);
        }

        /**
         * Gather a list of `StandardWaypointModel` objects for a particular route.
         *
         * @for StandardRouteModel
         * @method _findStandardWaypointModelsForRoute
         * @param entry {string}
         * @param exti {string}
         * @return {array<StandardWaypointModel>}
         */

    }, {
        key: '_findStandardWaypointModelsForRoute',
        value: function _findStandardWaypointModelsForRoute(entry, exit) {
            var entrySegmentItems = [];
            var exitSegmentItems = [];

            if (this._entryCollection) {
                var entrySegment = this._entryCollection.findSegmentByName(entry);

                if (typeof entrySegment === 'undefined') {
                    throw new TypeError('Expected \'entry\' to exist in the RouteSegmentCollection, but \'' + this.icao + '\' ' + ('does not have an entry of \'' + entry + '\''));
                }

                entrySegmentItems = entrySegment.items;
            }

            if (this._exitCollection) {
                var exitSegment = this._exitCollection.findSegmentByName(exit);

                if (typeof exitSegment === 'undefined') {
                    throw new TypeError('Expected \'exit\' to exist in the RouteSegmentCollection, but \'' + this.icao + '\' ' + ('does not have an exit of \'' + exit + '\''));
                }

                exitSegmentItems = exitSegment.items;
            }

            return this._generateFixList(entrySegmentItems, this._bodySegmentModel.items, exitSegmentItems);
        }

        /**
         * Find list of waypoints for the `body` segment
         *
         * @for StandardRouteModel
         * @method _findBodyFixList
         * @return {array}
         * @private
         */

    }, {
        key: '_findBodyFixList',
        value: function _findBodyFixList() {
            if (typeof this.body === 'undefined' || this.body.length === 0) {
                return [];
            }

            return this._bodySegmentModel.findWaypointsForSegment();
        }

        /**
         * Update each `StandardRouteWaypointModel` in the list the with disance from the previous waypoint, and
         * that waypoint's name.
         *
         * @for StandardRouteModel
         * @method _updateWaypointsWithPreviousWaypointData
         * @parma waypointModelList {array<StandardRouteWaypointModel>}
         * @private
         */

    }, {
        key: '_updateWaypointsWithPreviousWaypointData',
        value: function _updateWaypointsWithPreviousWaypointData(waypointModelList) {
            var _this2 = this;

            (0, _forEach3.default)(waypointModelList, function (waypoint, i) {
                var previousWaypoint = waypointModelList[i - 1];
                if (i === 0) {
                    previousWaypoint = waypoint;
                }

                var distance = _this2.calculateDistanceBetweenWaypoints(waypoint.position, previousWaypoint.position);
                waypoint.distanceFromPreviousWaypoint = distance;
                waypoint.previousStandardWaypointName = previousWaypoint.name;
            });
        }
    }]);

    return StandardRouteModel;
}(_BaseModel3.default);

exports.default = StandardRouteModel;

},{"../../base/BaseModel":556,"../../math/distance":585,"../../utilities/unitConverters":595,"./RouteSegmentCollection":550,"./RouteSegmentModel":551,"lodash/compact":462,"lodash/forEach":468,"lodash/get":469,"lodash/has":470,"lodash/isArray":476,"lodash/isEmpty":480,"lodash/isNil":485,"lodash/isObject":487}],554:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _BaseModel2 = require('../../base/BaseModel');

var _BaseModel3 = _interopRequireDefault(_BaseModel2);

var _FixCollection = require('../Fix/FixCollection');

var _FixCollection2 = _interopRequireDefault(_FixCollection);

var _Waypoint = require('../../aircraft/FlightManagementSystem/Waypoint');

var _Waypoint2 = _interopRequireDefault(_Waypoint);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @property NAME_INDEX
 * @type {number}
 * @final
 */
var NAME_INDEX = 0;

/**
 * @property RESTRICTION_INDEX
 * @type {number}
 * @final
 */
var RESTRICTION_INDEX = 1;

/**
 * @property RESTRICTION_SEPARATOR
 * @type {string}
 * @final
 */
var RESTRICTION_SEPARATOR = '|';

/**
 * @property ALTITUDE_RESTRICTION_PREFIX
 * @type {string}
 * @final
 */
var ALTITUDE_RESTRICTION_PREFIX = 'A';

/**
 * @property SPEED_RESTRICTION_PREFIX
 * @type {string}
 * @final
 */
var SPEED_RESTRICTION_PREFIX = 'S';

/**
 * A route waypoint describes a `fixName` and any altitude or speed restrictions for that fix.
 *
 * @class StandardRouteWaypointModel
 * @extends BaseModel
 */

var StandardRouteWaypointModel = function (_BaseModel) {
  _inherits(StandardRouteWaypointModel, _BaseModel);

  /**
   * Expects `routeWaypoint` to be in one of these forms:
   * - ["FRAWG", "A80+|S210+"]
   * - ["FRAWG", "A80-|S210"]
   * - ["FRAWG", "A80"]
   * - ["FRAWG", "S210"]
   * - "FRAWG"
   *
   * @constructor
   * @param routeWaypoint {array|string}
   */
  function StandardRouteWaypointModel(routeWaypoint) {
    var _ret2;

    _classCallCheck(this, StandardRouteWaypointModel);

    var _this = _possibleConstructorReturn(this, (StandardRouteWaypointModel.__proto__ || Object.getPrototypeOf(StandardRouteWaypointModel)).call(this, routeWaypoint));

    if (typeof routeWaypoint === 'undefined') {
      var _ret;

      return _ret = _this, _possibleConstructorReturn(_this, _ret);
    }

    /**
     * Name of the fix
     *
     * @property name
     * @type {string}
     * @default ''
     * @private
     */
    _this.name = '';

    /**
     * Any restrictions for a given fix
     *
     * ex:
     * - "A80+|S210"
     * - "A80-"
     * - "S230"
     *
     * using null here to match current api, if restrictions dont exist for a given waypoint
     * the consumers are expecting this to be null.
     *
     * @property _restrictions
     * @type {string|null}
     * @default null
     * @private
     */
    _this._restrictions = null;

    /**
     * NOT IN USE
     *
     * Required altitude for a fix
     *
     * @property _altitude (optional)
     * @type {number}
     * @default null
     * @private
     */
    _this._altitude = null;

    // TODO: This will need to be implemented in the future as an emuneration. Something to the effect of: {BELOW|AT|ABOVE}
    /**
     * NOT IN USE
     *
     * Altitude constraints, if any, for a fix.
     *
     * @property _altitudeConstraint (options)
     * @type {string}
     * @default ''
     * @private
     */
    _this._altitudeConstraint = '';

    /**
     * NOT IN USE
     *
     * Speed constraint, if any, for a fix.
     *
     * @property _speed (optional)
     * @type {string}
     * @default null
     * @private
     */
    _this._speed = null;

    /**
     * Positon information for the current waypoint
     *
     * Specific bits of this property are exposed via public getters.
     * This property should never be modified by an exteral method.
     *
     * @property _waypointPosition
     * @type {PositionModel}
     * @default null
     * @private
     */
    _this._waypointPosition = null;

    /**
     * Distance in nm from the previous waypoint.
     *
     * This property is set exterally by the `StandardRouteModel` and used only when called via
     * `ArrivalBase.preSpawn()`.
     *
     * This value is mutable and is not intended to be re-used after its initial use.
     *
     * @property distanceFromPreviousWaypoint
     * @type {number}
     * @default -1
     */
    _this.distanceFromPreviousWaypoint = -1;

    /**
     * Name of the previous `StandardWaypointModel` object in a route
     *
     * This property is set exterally by the `StandardRouteModel` and used only when called via
     * `ArrivalBase.preSpawn()`.
     *
     * This value is mutable and is not intended to be re-used after its initial use.
     *
     * @property previousStandardWaypointName
     * @type {string}
     * @default ''
     */
    _this.previousStandardWaypointName = '';

    return _ret2 = _this._init(routeWaypoint).clonePoisitonFromFix(), _possibleConstructorReturn(_this, _ret2);
  }

  /**
   * Return this waypoint's `position` propery
   *
   * @property position
   * @return {array}
   */


  _createClass(StandardRouteWaypointModel, [{
    key: '_init',


    /**
     * Lifecycle method. Should be run only once on instantiation.
     *
     * @for StandardRouteWaypointModel
     * @method _init
     * @param routeWaypoint {array|string}
     * @chainable
     * @private
     */
    value: function _init(routeWaypoint) {
      // if we receive a string, this fix doesnt have any restrictions so we only need to set `name`
      if (typeof routeWaypoint === 'string') {
        this.name = routeWaypoint;

        return this;
      }

      this.name = routeWaypoint[NAME_INDEX];
      // temporary property. should end up as a getter that wraps private methods
      this._restrictions = routeWaypoint[RESTRICTION_INDEX];

      this._parseWaypointRestrictions(routeWaypoint[RESTRICTION_INDEX]);

      return this;
    }

    /**
     * reset the current model instance
     *
     * @for StandardRouteWaypointModel
     * @method reset
     */

  }, {
    key: 'reset',
    value: function reset() {
      this.name = '';
      this._restrictions = null;
      this._altitude = null;
      this._altitudeConstraint = '';
      this._speed = null;

      return this;
    }

    /**
     * Find the matching fix from the `FixCollection` and clone its `PositionModel` this `_waypointPosition`
     *
     * @for StandardRouteWaypointModel
     * @method _clonePoisitonFromFix
     * @param fixCollection {FixCollection}
     * @private
     */

  }, {
    key: 'clonePoisitonFromFix',
    value: function clonePoisitonFromFix() {
      var fixModel = _FixCollection2.default.findFixByName(this.name);

      if (!fixModel) {
        console.warn('The following fix was not found in the list of fixes for this Airport: ' + this.name);

        return this;
      }

      this._waypointPosition = fixModel.clonePosition();

      return this;
    }

    /**
     * @for StandardRouteWaypointModel
     * @method generateFmsWaypoint
     * @param airport {AirportInstanceModel}
     * @return {Waypoint}
     */

  }, {
    key: 'generateFmsWaypoint',
    value: function generateFmsWaypoint(airport) {
      var fmsWaypoint = {
        fix: this.name,
        fixRestrictions: {
          alt: this._altitude,
          spd: this._speed
        }
      };

      return new _Waypoint2.default(fmsWaypoint, airport);
    }

    /**
     * Parse any waypoint restrictions
     *
     * Parse a single string into:
     * - `this._altitude`            = expressed in feet
     * - `this._altitudeConstraint`  = {BELOW|AT|ABOVE}
     * - `this._speed`      = expressed in kts
     *
     * Exapmles:
     * - "A80+|S210"
     * - "A80-|S210"
     * - "A80"
     * - "S210"
     *
     * @for StandardRouteWaypointModel
     * @method _parseWaypointRestrictions
     * @param waypointRestrictions {string}
     * @private
     */

  }, {
    key: '_parseWaypointRestrictions',
    value: function _parseWaypointRestrictions(waypointRestrictions) {
      if ((0, _isNil3.default)(waypointRestrictions)) {
        return;
      }

      var restrictionPieces = this._extractRestrictionPieces(waypointRestrictions);

      for (var i = 0; i < restrictionPieces.length; i++) {
        var restriction = restrictionPieces[i];

        // looking at the first letter of a restrictionPiece here.
        if (restriction[0] === ALTITUDE_RESTRICTION_PREFIX) {
          this._setAltitudeRestriction(restriction);
        } else if (restriction[0] === SPEED_RESTRICTION_PREFIX) {
          this._setSpeedRestriction(restriction);
        }
      }
    }

    /**
     * @for StandardRouteWaypointModel
     * @method _setAltitudeRestriction
     * @param altitudeRestriction {string}
     * @private
     */

  }, {
    key: '_setAltitudeRestriction',
    value: function _setAltitudeRestriction(altitudeRestriction) {
      this._altitude = altitudeRestriction.substr(1);
    }

    /**
     * @for StandardRouteWaypointModel
     * @method _setSpeedRestriction
     * @param speedRestriction {string}
     * @private
     */

  }, {
    key: '_setSpeedRestriction',
    value: function _setSpeedRestriction(speedRestriction) {
      this._speed = speedRestriction.substr(1);
    }

    /**
     * @for StandardRouteWaypointModel
     * @method _extractRestrictionPieces
     * @param waypointRestrictions {array<string>}
     * @@return {string}
     * @private
     */

  }, {
    key: '_extractRestrictionPieces',
    value: function _extractRestrictionPieces(waypointRestrictions) {
      return waypointRestrictions.split(RESTRICTION_SEPARATOR);
    }
  }, {
    key: 'position',
    get: function get() {
      return this._waypointPosition.position;
    }

    /**
     * Return this waypoint's `gps` position property
     *
     * @property gps
     * @return {array}
     */

  }, {
    key: 'gps',
    get: function get() {
      return this._waypointPosition.gps;
    }

    /**
     * Return this waypoint's `gpsXY` position property
     *
     * @property gps
     * @return {array}
     */

  }, {
    key: 'gpsXY',
    get: function get() {
      return this._waypointPosition.gpsXY;
    }

    /**
     * This will return a normalized fix in the shape of `[FIXNAME, FIX_RESTRICTIONS]`.
     *
     * Fixes without restrictions are brought in to the application as a single string, however, all
     * fixes are consumed as an array. `_restrictions` are initialized as null, thus if there are
     * no restrictions for a fix this getter will return `[FIXNAME, null]`
     *
     * @for StandardRouteWaypointModel
     * @property fix
     * @return {array}
     */

  }, {
    key: 'fix',
    get: function get() {
      return [this.name, this._restrictions];
    }
  }]);

  return StandardRouteWaypointModel;
}(_BaseModel3.default);

exports.default = StandardRouteWaypointModel;

},{"../../aircraft/FlightManagementSystem/Waypoint":530,"../../base/BaseModel":556,"../Fix/FixCollection":546,"lodash/isNil":485}],555:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base class from which a collection type class can inherit from.
 *
 * This class is meant to be extended and should never be used directly.
 *
 * @class BaseCollection
 */
var BaseCollection = function () {
  /**
   * @constructor
   * @for BaseCollection
   */
  function BaseCollection() {
    _classCallCheck(this, BaseCollection);

    /**
     * Unigue string id that can be used to differentiate this model instance from another.
     *
     * @property _id
     * @type {string}
     * @private
     */
    this._id = (0, _uniqueId3.default)();

    /**
     * @property _items
     * @type {array}
     * @default []
     * @private
     */
    this._items = [];
  }

  /**
   * Current length of the collection
   *
   * @property length
   * @return {number}
   */


  _createClass(BaseCollection, [{
    key: '_init',


    /**
     * Initialize the model properties. Should be run on instantiation and, though not desired,
     * could be run multiple times after instantiation.
     *
     * This method may be called by the constructor or from a public fascade.
     *
     * @for BaseCollection
     * @method _init
     * @private
     */
    value: function _init() {
      throw new TypeError('BaseCollection#_init has not been implemented by the extending class');
    }

    /**
     * Destory the current instance.
     *
     * When implemented by the inheriting class, this method should un-set all class properties
     * and remove any handlers.
     *
     * @for BaseCollection
     * @method destroy
     */

  }, {
    key: 'destroy',
    value: function destroy() {
      throw new TypeError('BaseCollection#destroy has not been implemented by the extending class');
    }
  }, {
    key: 'length',
    get: function get() {
      return this._items.length;
    }
  }]);

  return BaseCollection;
}();

exports.default = BaseCollection;

},{"lodash/uniqueId":510}],556:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Base class for all Model objects to inherit from.
 *
 * This class is meant to be extended and should never be used directly.
 *
 * @class BaseModel
 */
var BaseModel = function () {
  function BaseModel() {
    _classCallCheck(this, BaseModel);

    /**
     * Unigue string id that can be used to differentiate this model instance from another.
     *
     * @property _id
     * @type {string}
     * @private
     */
    this._id = (0, _uniqueId3.default)();
  }

  /**
   * Initialize the model properties. Should be run on instantiation and, though not desired,
   * could be run multiple times after instantiation.
   *
   * This method may be called by the constructor or from a public fascade.
   *
   * @for BaseModel
   * @method _init
   * @private
   */


  _createClass(BaseModel, [{
    key: '_init',
    value: function _init() {
      throw new TypeError('BaseModel#_init method must be implemented by the class extending BaseModel');
    }

    /**
     * Destory the current instance.
     *
     * When implemented by the inheriting class, this method should un-set all class properties
     * and remove any handlers.
     *
     * @for BaseModel
     * @method reset
     */

  }, {
    key: 'reset',
    value: function reset() {
      throw new TypeError('BaseModel#reset method must be implemented by the class extending BaseModel');
    }
  }]);

  return BaseModel;
}();

exports.default = BaseModel;

},{"lodash/uniqueId":510}],557:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _ModelSourcePool = require('./ModelSourcePool');

var _ModelSourcePool2 = _interopRequireDefault(_ModelSourcePool);

var _modelSourceClassMap = require('./modelSourceClassMap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides a pulic gateway to the `modelSourcePool`.
 *
 * This class has only one concern, brokering changes to the `modelSourcePool`.
 *
 * @class ModelSourceFactory
 */
var ModelSourceFactory = function () {
    function ModelSourceFactory() {
        _classCallCheck(this, ModelSourceFactory);
    }

    _createClass(ModelSourceFactory, [{
        key: 'getModelSourceForType',

        /**
         * Given a model type, retrieve a model from the `modelSourcePool`.
         *
         * @for ModelSourceFactory
         * @method getModelSourceForType
         * @param type {string}                 constructor name. must be incldued in `CLASS_MAP` dictonary
         * @param args {*[]}                    parameters used for initializing a `modelSource` instance
         * @return modelSource {constructor}    one of CLASS_MAP
         */
        value: function getModelSourceForType(type) {
            if (!(0, _has3.default)(_modelSourceClassMap.CLASS_MAP, type)) {
                throw new TypeError('Unsupported type passed to ModelSourceFactory: ' + type);
            }

            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            var modelSource = _ModelSourcePool2.default.releaseReusable.apply(_ModelSourcePool2.default, [type].concat(args));

            return modelSource;
        }

        /**
         * Return a model back to the `modelSourcePool`.
         *
         * @for ModelSourceFactory
         * @method returnModelToPool
         * @param model {constructor}  one of CLASS_MAP
         */

    }, {
        key: 'returnModelToPool',
        value: function returnModelToPool(model) {
            if (!(0, _has3.default)(_modelSourceClassMap.CLASS_MAP, model.constructor.name)) {
                throw new TypeError('Unsupported type passed to ModelSourceFactory: ' + model.constructor.name);
            }

            _ModelSourcePool2.default.returnReusable(model);
        }
    }]);

    return ModelSourceFactory;
}();

exports.default = new ModelSourceFactory();

},{"./ModelSourcePool":558,"./modelSourceClassMap":559,"lodash/has":470}],558:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _find2 = require('lodash/find');

var _find3 = _interopRequireDefault(_find2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _without2 = require('lodash/without');

var _without3 = _interopRequireDefault(_without2);

var _BaseCollection2 = require('../BaseCollection');

var _BaseCollection3 = _interopRequireDefault(_BaseCollection2);

var _modelSourceClassMap = require('./modelSourceClassMap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @property MAX_POOL_SIZE_PER_MODEL
 * @type {number}
 * @final
 */
var MAX_POOL_SIZE_PER_MODEL = 300;

/**
 * @property MAX_POOL_SIZE
 * @type {number}
 * @final
 */
var MAX_POOL_SIZE = MAX_POOL_SIZE_PER_MODEL * _modelSourceClassMap.CLASS_MAP_LENGTH;

/**
 * A collection of model objects that are not in use.
 *
 * This provides:
 * - a way to instantiate a `MAX_POOL_SIZE_PER_MODEL` number of model objects
 * - a way to release a model for use within the app and remove it from the pool
 * - a way to return a model after use and add it back into the pool
 *
 * This allows for decreased garbage collection because the model instances being used are already created. The
 * app isn't always creating and destroying classes, instead it is creating, using and re-using the same models.
 *
 * see: (Object Pool)[https://sourcemaking.com/design_patterns/object_pool] on
 * (sourcemaking.com)[https://sourcemaking.com] for more information.
 *
 * @class ModelSourcePool
 * @extends BaseCollection
 */

var ModelSourcePool = function (_BaseCollection) {
    _inherits(ModelSourcePool, _BaseCollection);

    /**
     * @constructor
     * @for ModelSourcePool
     */
    function ModelSourcePool() {
        var _ret;

        _classCallCheck(this, ModelSourcePool);

        // NOT IN USE
        /**
         * Maximum number of instances per model/reusable allowing in the pool
         *
         * This property is also used for pre-warming the pool on instantiation
         *
         * @property _maxPoolSizePerModel
         * @type {number}
         * @default MAX_POOL_SIZE
         * @private
         */
        var _this = _possibleConstructorReturn(this, (ModelSourcePool.__proto__ || Object.getPrototypeOf(ModelSourcePool)).call(this));

        _this._maxPoolSizePerModel = MAX_POOL_SIZE;

        return _ret = _this._hydratePool(), _possibleConstructorReturn(_this, _ret);
    }

    /**
     * Add a reusable to the pool
     *
     * @for ModelSourcePool
     * @method returnReusable
     * @param modelToAdd {constructor} one of CLASS_MAP
     */


    _createClass(ModelSourcePool, [{
        key: 'returnReusable',
        value: function returnReusable(modelToAdd) {
            if (!(0, _has3.default)(_modelSourceClassMap.CLASS_MAP, modelToAdd.constructor.name)) {
                throw new TypeError('Unsupported constructor passed to ModelSourcePool: ' + modelToAdd.constructor.name);
            }

            this._items.push(modelToAdd);
        }

        /**
         * Remove a reusable from the collection and return it for use by the caller
         *
         * @for ModelSourcePool
         * @method releaseReusable
         * @param constructorName {string}  constructor name
         * @param args {*[]}                parameters used for initializing a `modelSource` instance
         * @return model {constructor}      one of CLASS_MAP
         */

    }, {
        key: 'releaseReusable',
        value: function releaseReusable(constructorName) {
            var _model;

            var model = this._findModelByConstructorName(constructorName);

            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
            }

            if (!model) {
                model = new (Function.prototype.bind.apply(_modelSourceClassMap.CLASS_MAP[constructorName], [null].concat(args)))();
            }

            (_model = model).init.apply(_model, args);

            return model;
        }

        /**
         * On instantiation pre-warm the pool with reusables so they don't need to be created at run time.
         *
         * @for ModelSourcePool
         * @method _hydratePool
         * @private
         */

    }, {
        key: '_hydratePool',
        value: function _hydratePool() {
            var _this2 = this;

            (0, _forEach3.default)(_modelSourceClassMap.CLASS_MAP, function (ModelSource) {
                for (var i = 0; i < MAX_POOL_SIZE_PER_MODEL; i++) {
                    var model = new ModelSource();

                    _this2._items.push(model);
                }
            });
        }

        /**
         * @for ModelSourcePool
         * @method _findModelByConstructorName
         * @param constructorName {string}  the name of a constructor
         * @return model {constructor}      one of CLASS_MAP
         * @private
         */

    }, {
        key: '_findModelByConstructorName',
        value: function _findModelByConstructorName(constructorName) {
            var model = (0, _find3.default)(this._items, function (model) {
                return model.constructor.name === constructorName;
            });

            if ((0, _isNil3.default)(model)) {
                return null;
            }

            this._removeItem(model);

            return model;
        }

        /**
         * Remove a specific instance from the pool
         *
         * When a reusable has been requested, it mush be removed from the pool
         *
         * @for ModelSourcePool
         * @method _removeItem
         * @param model {constructor} one of CLASS_MAP
         * @private
         */

    }, {
        key: '_removeItem',
        value: function _removeItem(model) {
            this._items = (0, _without3.default)(this._items, model);
        }
    }]);

    return ModelSourcePool;
}(_BaseCollection3.default);

exports.default = new ModelSourcePool();

},{"../BaseCollection":555,"./modelSourceClassMap":559,"lodash/find":466,"lodash/forEach":468,"lodash/has":470,"lodash/isNil":485,"lodash/without":513}],559:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLASS_MAP_LENGTH = exports.CLASS_MAP = undefined;

var _keys2 = require('lodash/keys');

var _keys3 = _interopRequireDefault(_keys2);

var _FixModel = require('../../airport/Fix/FixModel');

var _FixModel2 = _interopRequireDefault(_FixModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import Waypoint from '../../aircraft/Waypoint';
// import PositionModel from '../PositionModel';

/**
 * A map of Constructor names to constructor functions
 *
 * @property CLASS_MAP
 * @type {object}
 * @final
 */
var CLASS_MAP = exports.CLASS_MAP = {
  /**
   * @memberof CLASS_MAP
   * @property FixModel
   * @type {FixModel}
   * @final
   */
  FixModel: _FixModel2.default

  // TODO: Future additions to the pool each of these models need some work in orer to integrate
  // into the pool structure
  //
  // /**
  //  * @memberof CLASS_MAP
  //  * @property Waypoint
  //  * @type {Waypoint}
  //  * @final
  //  */
  // Waypoint: Waypoint
  // /**
  //  * @memberof CLASS_MAP
  //  * @property PositionModel
  //  * @type {PositionModel}
  //  * @final
  //  */
  // PositionModel: PositionModel
};

/**
 * Provide a length number that can be accessed externally
 *
 * Since CLASS_MAP is an object, determining the length (number of keys) is a two-step process.
 * We do that here so any class that needs to know the length can simply import this property.
 *
 * @property CLASS_MAP_LENGTH
 * @type {number}
 */
var CLASS_MAP_LENGTH = exports.CLASS_MAP_LENGTH = (0, _keys3.default)(CLASS_MAP).length;

},{"../../airport/Fix/FixModel":547,"lodash/keys":492}],560:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _positionModelHelpers = require('./positionModelHelpers');

var _circle = require('../math/circle');

var _unitConverters = require('../utilities/unitConverters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @property LATITUDE_INDEX
 * @type {number}
 * @final
 */
var LATITUDE_INDEX = 0;

/**
 * @property LONGITUDE_INDEX
 * @type {number}
 * @final
 */
var LONGITUDE_INDEX = 1;

/**
 * @property ELEVATION_INDEX
 * @type {number}
 * @final
 */
var ELEVATION_INDEX = 2;

/**
 * A physical location on the Earth's surface
 *
 * properties:
 *   latitude - Latitude in decimal degrees
 *   longitude - Longitude in decimal degrees
 *   elevation - Elevation in feet
 *   reference_position - Position to use when calculating offsets
 *   x - Offset from reference position in km
 *   y - Offset from reference position in km
 *   position - Array containing the x,y pair
 *
 * @class Position
 */

var PositionModel = function () {
    /**
     * coordinates may contain an optional elevation as a third element.
     * It must be suffixed by either 'ft' or 'm' to indicate the units.
     *
     * Latitude and Longitude numbers may be one of the following forms:
     *   Decimal degrees - 'N47.112388112'
     *   Decimal minutes - 'N38d38.109808'
     *   Decimal seconds - 'N58d27m12.138'
     *
     * @for PositionModel
     * @constructor
     * @param coordinates {array}               Array containing offset pair or latitude/longitude pair
     * @param reference {PositionModel|null}    Position to use for calculating offsets when lat/long given
     * @param magnetic_north {number}           magnetic north direction
     * @param mode {string}                     Set to 'GPS' to indicate you are inputting lat/long that should
     *                                          be converted to positions
     */
    function PositionModel() {
        var coordinates = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var reference = arguments[1];
        var magnetic_north = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

        _classCallCheck(this, PositionModel);

        /**
         * @property _id
         * @type {string}
         */
        this._id = (0, _uniqueId3.default)('position-model-');

        /**
         * @property latitude
         * @type {number}
         * @default 0
         */
        this.latitude = 0;

        /**
         * @property longitude
         * @type {number}
         * @default 0
         */
        this.longitude = 0;

        /**
         * @property elevation
         * @type {number}
         * @default 0
         */
        this.elevation = 0;

        /**
         * @property reference_position
         * @type {PositionModel|null}
         */
        this.reference_position = reference;

        /**
         * @property magnetic_north
         * @type {number}
         */
        this.magnetic_north = magnetic_north;

        /**
         * @property x
         * @type {number}
         * @default 0
         */
        this.x = 0;

        /**
         * @property y
         * @type {number}
         * @default 0
         */
        this.y = 0;

        return this.init(coordinates);
    }

    /**
     * Current x, y position
     *
     * @property position
     * @return {array}
     */


    _createClass(PositionModel, [{
        key: 'init',


        /**
         * @for PositionModel
         * @method init
         */
        value: function init(coordinates) {
            this.latitude = (0, _unitConverters.parseCoordinate)(coordinates[LATITUDE_INDEX]);
            this.longitude = (0, _unitConverters.parseCoordinate)(coordinates[LONGITUDE_INDEX]);

            // TODO: this is using coersion and shoudld be updated to be more explicit
            if (coordinates[ELEVATION_INDEX] != null) {
                this.elevation = (0, _unitConverters.parseElevation)(coordinates[ELEVATION_INDEX]);
            }

            this._calculateScreenPosition();
        }

        /**
         * @for PositionModel
         * @method distanceTo
         * @param point
         * @return {number}
         */

    }, {
        key: 'distanceTo',
        value: function distanceTo(point) {
            return (0, _circle.distanceToPoint)(this.latitude, this.longitude, point.latitude, point.longitude);
        }

        /**
         * Checks whether or not this `PositionModel` has a reference `PositionModel`
         * Without the reference position, the rotation due to magnetic variation will not be applied
         * @for PositionModel
         * @method _hasReferencePosition
         * @return {Boolean} whether this position is based on a reference position
         */

    }, {
        key: '_hasReferencePosition',
        value: function _hasReferencePosition() {
            return this.reference_position !== null;
        }

        /**
         * Determine the `x` and `y` values of the `PositionModel`, used for drawing on the canvas
         * @for PositionModel
         * @method _calculateScreenPosition
         * @private
         */

    }, {
        key: '_calculateScreenPosition',
        value: function _calculateScreenPosition() {
            if (!this._hasReferencePosition()) {
                return;
            }

            var _PositionModel$calcul = PositionModel.calculatePosition(this.gps, this.reference_position, this.magnetic_north),
                _PositionModel$calcul2 = _slicedToArray(_PositionModel$calcul, 2),
                x = _PositionModel$calcul2[0],
                y = _PositionModel$calcul2[1];

            this.x = x;
            this.y = y;
        }
    }, {
        key: 'position',
        get: function get() {
            return [this.x, this.y];
        }

        /**
         * GPS coordinates in [latitude, longitude] order
         * For reverse order, see `PositionModel.gpsXY`
         * @property gps
         * @return {array}
         */

    }, {
        key: 'gps',
        get: function get() {
            return [this.latitude, this.longitude];
        }

        /**
         * GPS coordinates in [x,y] order
         * For reverse order, see `PositionModel.gps`
         * @property gpsXY
         * @return {array}
         */

    }, {
        key: 'gpsXY',
        get: function get() {
            return [this.longitude, this.latitude];
        }

        /**
         * Magnetic north of the current instance expressed in radians
         *
         * @property magneticNorthInRadians
         * @return {number}
         */

    }, {
        key: 'magneticNorthInRadians',
        get: function get() {
            return (0, _unitConverters.degreesToRadians)(this.magnetic_north);
        }
    }]);

    return PositionModel;
}();

/**
 * Calculate x/y position from latitude and longitude and a referencePostion
 *
 * Provides a static method to calculate position without instantiating a `PositionModel` class.
 *
 * @function getPosition
 * @param coordinates {array<string>}
 * @param referencePostion {PositionModel|null}
 * @param magneticNorth {number}
 * @return {array}
 * @static
 */


exports.default = PositionModel;
PositionModel.calculatePosition = function (coordinates, referencePostion, magneticNorth) {
    if (!coordinates || !referencePostion || !(0, _isNumber3.default)(magneticNorth)) {
        throw new TypeError('Invalid parameter. PositionModel.getPosition() requires coordinates, referencePostion ' + 'and magneticNorth as parameters');
    }

    var latitude = (0, _unitConverters.parseCoordinate)(coordinates[LATITUDE_INDEX]);
    var longitude = (0, _unitConverters.parseCoordinate)(coordinates[LONGITUDE_INDEX]);

    var canvasPositionX = (0, _positionModelHelpers.calculateDistanceToPointForX)(referencePostion, referencePostion.latitude, longitude);

    var canvasPositionY = (0, _positionModelHelpers.calculateDistanceToPointForY)(referencePostion, latitude, referencePostion.longitude);

    var _adjustForMagneticNor = (0, _positionModelHelpers.adjustForMagneticNorth)(canvasPositionX, canvasPositionY, magneticNorth),
        x = _adjustForMagneticNor.x,
        y = _adjustForMagneticNor.y;

    return [x, y];
};

},{"../math/circle":583,"../utilities/unitConverters":595,"./positionModelHelpers":561,"lodash/isNumber":486,"lodash/uniqueId":510}],561:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.adjustForMagneticNorth = exports.calculateDistanceToPointForY = exports.calculateDistanceToPointForX = exports.hasCardinalDirectionInCoordinate = undefined;

var _circle = require('../math/circle');

var _globalConstants = require('../constants/globalConstants');

/**
 * @function hasCardinalDirectionInCoordinate
 * @param coordinate {string}
 * @return {boolean}
 */
var hasCardinalDirectionInCoordinate = exports.hasCardinalDirectionInCoordinate = function hasCardinalDirectionInCoordinate(coordinate) {
    return _globalConstants.REGEX.COMPASS_DIRECTION.test(coordinate);
};

/**
 * @function calculateDistanceToPointForX
 * @param referencePostion {PositionModel}
 * @param latitude {number}
 * @param longitude {number}
 * @return x {number}
 */
var calculateDistanceToPointForX = exports.calculateDistanceToPointForX = function calculateDistanceToPointForX(referencePostion, latitude, longitude) {
    var x = (0, _circle.distanceToPoint)(referencePostion.latitude, referencePostion.longitude, latitude, longitude);

    if (referencePostion.longitude > longitude) {
        x *= -1;
    }

    return x;
};

/**
 *
 *
 * @function calculateDistanceToPointForY
 * @param referencePostion {PositionModel}
 * @param latitude {number}
 * @param longitude {number}
 * @return y {number}
 */
var calculateDistanceToPointForY = exports.calculateDistanceToPointForY = function calculateDistanceToPointForY(referencePostion, latitude, longitude) {
    var y = (0, _circle.distanceToPoint)(referencePostion.latitude, referencePostion.longitude, latitude, longitude);

    if (referencePostion.latitude > latitude) {
        y *= -1;
    }

    return y;
};

/**
 * Adjust to use magnetic north instead of true north
 *
 * @function adjustForMagneticNorth
 * @param originalX {string}
 * @param originalY {string}
 * @param magneticNorth {number}
 * @return {object}
 */
var adjustForMagneticNorth = exports.adjustForMagneticNorth = function adjustForMagneticNorth(originalX, originalY, magneticNorth) {
    var t = Math.atan2(originalY, originalX) + magneticNorth;
    var r = Math.sqrt(originalX * originalX + originalY * originalY);

    var x = r * Math.cos(t);
    var y = r * Math.sin(t);

    return {
        x: x,
        y: y
    };
};

},{"../constants/globalConstants":573,"../math/circle":583}],562:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _cloneDeep2 = require('lodash/cloneDeep');

var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _unitConverters = require('../utilities/unitConverters');

var _timeHelpers = require('../utilities/timeHelpers');

var _core = require('../math/core');

var _circle = require('../math/circle');

var _distance = require('../math/distance');

var _vector = require('../math/vector');

var _selectors = require('../constants/selectors');

var _logLevel = require('../constants/logLevel');

var _aircraftConstants = require('../constants/aircraftConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Temporary const declaration here to attach to the window AND use as internal property
var canvas = {};

/**
 * @property BASE_CANVAS_FONT
 * @type {string}
 * @final
 */
var BASE_CANVAS_FONT = '10px monoOne, monospace';

/**
 * @property DEFAULT_CANVAS_SIZE
 * @type {Object}
 * @final
 */
var DEFAULT_CANVAS_SIZE = {
    HEIGHT: 480,
    WIDTH: 640
};

/**
 * @property COLORS
 * @type {Object}
 * @final
 */
var COLORS = {
    WHITE_00: 'rgba(255, 255, 255, 0)',
    WHITE_02: 'rgba(255, 255, 255, 0.2)',
    WHITE_03: 'rgba(255, 255, 255, 0.2)',
    WHITE_04: 'rgba(255, 255, 255, 0.4)',
    WHITE_05: 'rgba(255, 255, 255, 0.5)',
    WHITE_07: 'rgba(255, 255, 255, 0.7)',
    WHITE_08: 'rgba(255, 255, 255, 0.8)',
    WHITE: 'rgba(255, 255, 255, 1.0)',
    LIGHT_SILVER_03: 'rgba(224, 224, 224, 0.3)',
    LIGHT_SILVER: 'rgba(224, 224, 224, 1.0)',
    RED_06: 'rgba(224, 128, 128, 0.6)',
    RED_08: 'rgba(224, 128, 128, 0.8)',
    RED: 'rgba(224, 128, 128, 1.0)',
    CORAL_RED: 'rgba(255, 64, 64, 1.0)',
    BRIGHT_RED: 'rgba(255, 0, 0, 0.7)',
    GRAIN_BROWN: 'rgba(224, 210, 180, 1.0)',
    DEPARTURE_COLOR: 'rgba(128, 255, 255, 0.6)',
    VIDEO_MAP_STROKE: 'rgba(193, 218, 205, 1)',
    DEPARTURE_STROKE: 'rgba(128, 255, 255, 0.9)',
    AIRSPACE_RADIUS_FILL: 'rgba(200, 255, 200, 0.02)',
    AIRSPACE_RADIUS_STROKE: 'rgba(200, 255, 200, 0.25)',
    AIRSPACE_RANGE_RING_COLOR: 'rgba(200, 255, 200, 0.1)',
    CROSSHAIR_STROKE: 'rgba(136, 153, 153, 1)',
    RESTRICTED_AIRSPACE_STROKE: 'rgba(150, 200, 255, 0.3)',
    RESTRICTED_AIRSPACE_FILL: 'rgba(150, 200, 255, 0.4)'
};

/**
 * @class CanvasController
 */

var ConvasController = function () {
    /**
     * @constructor
     */
    function ConvasController($element) {
        _classCallCheck(this, ConvasController);

        this.$window = (0, _jquery2.default)(window);
        this.$element = $element;
        this.canvas = canvas;
        this.canvas.contexts = {};
        this.canvas.panY = 0;
        this.canvas.panX = 0;
        // resize canvas to fit window?
        this.canvas.resize = true;
        // all canvases are the same size
        this.canvas.size = {
            height: DEFAULT_CANVAS_SIZE.HEIGHT,
            width: DEFAULT_CANVAS_SIZE.WIDTH
        };
        this.canvas.last = (0, _timeHelpers.time)();
        this.canvas.dirty = true;
        this.canvas.draw_labels = true;
        this.canvas.draw_restricted = true;
        this.canvas.draw_sids = true;
        this.canvas.draw_terrain = true;

        return this._init().enable();
    }

    /**
     * @for CanvasController
     * @method _init
     */


    _createClass(ConvasController, [{
        key: '_init',
        value: function _init() {
            return this;
        }

        /**
         * @for CanvasController
         * @method enable
         */

    }, {
        key: 'enable',
        value: function enable() {
            return this;
        }

        /**
         * @for CanvasController
         * @method disable
         */

    }, {
        key: 'disable',
        value: function disable() {
            return this.destroy();
        }

        /**
         * @for CanvasController
         * @method destroy
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.$window = null;
            this.$element = null;
            this.canvas = {};
            this.canvas.contexts = {};
            this.canvas.panY = 0;
            this.canvas.panX = 0;
            // resize canvas to fit window?
            this.canvas.resize = true;
            // all canvases are the same size
            this.canvas.size = {
                height: DEFAULT_CANVAS_SIZE.HEIGHT,
                width: DEFAULT_CANVAS_SIZE.WIDTH
            };
            this.canvas.last = (0, _timeHelpers.time)();
            this.canvas.dirty = true;
            this.canvas.draw_labels = true;
            this.canvas.draw_restricted = true;
            this.canvas.draw_sids = true;
            this.canvas.draw_terrain = true;

            return this;
        }

        /**
         * @for CanvasController
         * @method canvas_init_pre
         */

    }, {
        key: 'canvas_init_pre',
        value: function canvas_init_pre() {
            prop.canvas = canvas;
        }

        /**
         * @for CanvasController
         * @method canvas_init
         */

    }, {
        key: 'canvas_init',
        value: function canvas_init() {
            this.canvas_add('navaids');
        }

        /**
         * @for CanvasController
         * @method canvas_adjust_hidpi
         */

    }, {
        key: 'canvas_adjust_hidpi',
        value: function canvas_adjust_hidpi() {
            var dpr = window.devicePixelRatio || 1;

            log('devicePixelRatio: ' + dpr);

            // TODO: change to early return
            if (dpr <= 1) {
                return;
            }

            // TODO: cache this selector, $hidefCanvas
            // TODO: replace selector with constant
            var hidefCanvas = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.NAVAIDS_CANVAS).get(0);
            var w = this.canvas.size.width;
            var h = this.canvas.size.height;

            (0, _jquery2.default)(hidefCanvas).attr('width', w * dpr);
            (0, _jquery2.default)(hidefCanvas).attr('height', h * dpr);
            (0, _jquery2.default)(hidefCanvas).css('width', w);
            (0, _jquery2.default)(hidefCanvas).css('height', h);

            var ctx = hidefCanvas.getContext('2d');

            ctx.scale(dpr, dpr);
            this.canvas.contexts.navaids = ctx;
        }

        /**
         * @for CanvasController
         * @method
         */

    }, {
        key: 'canvas_complete',
        value: function canvas_complete() {
            var _this = this;

            setTimeout(function () {
                _this.canvas.dirty = true;
            }, 500);

            this.canvas.last = (0, _timeHelpers.time)();
        }

        /**
         * @for CanvasController
         * @method
         */

    }, {
        key: 'canvas_resize',
        value: function canvas_resize() {
            var _this2 = this;

            if (this.canvas.resize) {
                this.canvas.size.width = this.$window.width();
                this.canvas.size.height = this.$window.height();
            }

            this.canvas.size.width -= 250;
            this.canvas.size.height -= 36;

            (0, _forEach3.default)(this.canvas.contexts, function (context) {
                context.canvas.height = _this2.canvas.size.height;
                context.canvas.width = _this2.canvas.size.width;
            });

            this.canvas.dirty = true;
            this.canvas_adjust_hidpi();
        }

        /**
         * @for CanvasController
         * @method canvas_update_post
         */

    }, {
        key: 'canvas_update_post',
        value: function canvas_update_post() {
            var elapsed = window.gameController.game_time() - window.airportController.airport_get().start;
            var alpha = (0, _core.extrapolate_range_clamp)(0.1, elapsed, 0.4, 0, 1);
            var framestep = Math.round((0, _core.extrapolate_range_clamp)(1, window.gameController.game.speedup, 10, 30, 1));

            if (this.canvas.dirty || !window.gameController.game_paused() && prop.time.frames % framestep === 0 || elapsed < 1) {
                var cc = this.canvas_get('navaids');
                var fading = elapsed < 1;

                cc.font = '11px monoOne, monospace';

                // TODO: what is the rationale here? with two ors and a true, this block will always be exectuted.
                if (this.canvas.dirty || fading || true) {
                    cc.save();

                    this.canvas_clear(cc);

                    cc.translate((0, _core.calculateMiddle)(this.canvas.size.width), (0, _core.calculateMiddle)(this.canvas.size.height));

                    cc.save();
                    cc.globalAlpha = alpha;

                    this.canvas_draw_videoMap(cc);
                    this.canvas_draw_terrain(cc);
                    this.canvas_draw_restricted(cc);
                    this.canvas_draw_runways(cc);
                    cc.restore();

                    cc.save();
                    cc.globalAlpha = alpha;
                    this.canvas_draw_fixes(cc);
                    this.canvas_draw_sids(cc);
                    cc.restore();

                    cc.restore();
                }

                // Controlled traffic region - (CTR)
                cc.save();
                // translate to airport center
                cc.translate((0, _core.round)(this.canvas.size.width / 2 + this.canvas.panX), (0, _core.round)(this.canvas.size.height / 2 + this.canvas.panY));
                // TODO: this is incorrect usage of a ternary. ternaries should be used for a ssignment not function calls.
                // draw airspace border
                window.airportController.airport_get().airspace ? this.canvas_draw_airspace_border(cc) : this.canvas_draw_ctr(cc);

                this.canvas_draw_range_rings(cc);
                cc.restore();

                // Special markings for ENGM point merge
                if (window.airportController.airport_get().icao === 'ENGM') {
                    cc.save();
                    cc.translate((0, _core.calculateMiddle)(this.canvas.size.width), (0, _core.calculateMiddle)(this.canvas.size.height));
                    this.canvas_draw_engm_range_rings(cc);
                    cc.restore();
                }

                // Compass
                cc.font = 'bold 10px monoOne, monospace';

                if (this.canvas.dirty || fading || true) {
                    cc.save();
                    cc.translate((0, _core.calculateMiddle)(this.canvas.size.width), (0, _core.calculateMiddle)(this.canvas.size.height));

                    this.canvas_draw_compass(cc);
                    cc.restore();
                }

                cc.font = BASE_CANVAS_FONT;

                if (this.canvas.dirty || this.canvas_should_draw() || true) {
                    cc.save();
                    cc.globalAlpha = alpha;
                    cc.translate((0, _core.calculateMiddle)(this.canvas.size.width), (0, _core.calculateMiddle)(this.canvas.size.height));
                    this.canvas_draw_all_aircraft(cc);
                    cc.restore();
                }

                cc.save();
                cc.globalAlpha = alpha;
                cc.translate((0, _core.calculateMiddle)(this.canvas.size.width), (0, _core.calculateMiddle)(this.canvas.size.height));
                this.canvas_draw_all_info(cc);
                cc.restore();

                cc.save();
                cc.globalAlpha = alpha;
                cc.translate((0, _core.calculateMiddle)(this.canvas.size.width), (0, _core.calculateMiddle)(this.canvas.size.height));

                this.canvas_draw_runway_labels(cc);
                cc.restore();

                cc.save();
                cc.globalAlpha = alpha;
                this.canvas_draw_scale(cc);
                cc.restore();

                cc.save();
                cc.globalAlpha = alpha;
                this.canvas_draw_directions(cc);
                cc.restore();

                this.canvas.dirty = false;
            }
        }

        /**
         * @for CanvasController
         * @method canvas_add
         * @param name {string}
         */

    }, {
        key: 'canvas_add',
        value: function canvas_add(name) {
            (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.CANVASES).append('<canvas id=\'' + name + '-canvas\'></canvas>');
            this.canvas.contexts[name] = (0, _jquery2.default)('#' + name + '-canvas').get(0).getContext('2d');
        }

        /**
         * @for CanvasController
         * @method canvas_get
         * @param name {string}
         */

    }, {
        key: 'canvas_get',
        value: function canvas_get(name) {
            return this.canvas.contexts[name];
        }

        /**
         * @for CanvasController
         * @method canvas_clear
         * @param cc {object}
         */

    }, {
        key: 'canvas_clear',
        value: function canvas_clear(cc) {
            cc.clearRect(0, 0, this.canvas.size.width, this.canvas.size.height);
        }

        /**
         * @for CanvasController
         * @method canvas_should_draw
         */

    }, {
        key: 'canvas_should_draw',
        value: function canvas_should_draw() {
            var elapsed = (0, _timeHelpers.time)() - this.canvas.last;

            if (elapsed > 1 / window.gameController.game.speedup) {
                this.canvas.last = (0, _timeHelpers.time)();
                return true;
            }

            return false;
        }

        /**
         * @for CanvasController
         * @method canvas_draw_runway
         * @param cc
         * @param runway
         * @param mode
         */

    }, {
        key: 'canvas_draw_runway',
        value: function canvas_draw_runway(cc, runway, mode) {
            var length2 = (0, _core.round)(window.uiController.km_to_px(runway.length / 2));
            var angle = runway.angle;

            cc.translate((0, _core.round)(window.uiController.km_to_px(runway.position[0])) + this.canvas.panX, -(0, _core.round)(window.uiController.km_to_px(runway.position[1])) + this.canvas.panY);
            cc.rotate(angle);

            // runway body
            if (!mode) {
                cc.strokeStyle = '#899';
                cc.lineWidth = 2.8;

                cc.beginPath();
                cc.moveTo(0, 0);
                cc.lineTo(0, -2 * length2);
                cc.stroke();
            } else {
                // extended centerlines
                if (!runway.ils.enabled) {
                    return;
                }

                cc.strokeStyle = '#465';
                cc.lineWidth = 1;

                cc.beginPath();
                cc.moveTo(0, 0);
                cc.lineTo(0, window.uiController.km_to_px(runway.ils.loc_maxDist));
                cc.stroke();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_runway_label
         * @param cc
         * @param runway
         */

    }, {
        key: 'canvas_draw_runway_label',
        value: function canvas_draw_runway_label(cc, runway) {
            var length2 = (0, _core.round)(window.uiController.km_to_px(runway.length / 2)) + 0.5;
            var angle = runway.angle;
            var text_height = 14;

            cc.translate((0, _core.round)(window.uiController.km_to_px(runway.position[0])) + this.canvas.panX, -(0, _core.round)(window.uiController.km_to_px(runway.position[1])) + this.canvas.panY);
            cc.rotate(angle);

            cc.textAlign = 'center';
            cc.textBaseline = 'middle';

            cc.save();
            cc.translate(0, length2 + text_height);
            cc.rotate(-angle);
            cc.translate((0, _core.round)(window.uiController.km_to_px(runway.labelPos[0])), -(0, _core.round)(window.uiController.km_to_px(runway.labelPos[1])));
            cc.fillText(runway.name, 0, 0);
            cc.restore();
        }

        /**
         * @for CanvasController
         * @method canvas_draw_runways
         * @param cc
         */

    }, {
        key: 'canvas_draw_runways',
        value: function canvas_draw_runways(cc) {
            if (!this.canvas.draw_labels) {
                return;
            }

            cc.strokeStyle = COLORS.WHITE_04;
            cc.fillStyle = COLORS.WHITE_04;
            cc.lineWidth = 4;

            var airport = window.airportController.airport_get();

            // Extended Centerlines
            for (var i = 0; i < airport.runways.length; i++) {
                cc.save();
                this.canvas_draw_runway(cc, airport.runways[i][0], true);
                cc.restore();

                cc.save();
                this.canvas_draw_runway(cc, airport.runways[i][1], true);
                cc.restore();
            }

            // Runways
            for (var _i = 0; _i < airport.runways.length; _i++) {
                cc.save();
                this.canvas_draw_runway(cc, airport.runways[_i][0], false);
                cc.restore();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_runway_labels
         * @param cc
         */

    }, {
        key: 'canvas_draw_runway_labels',
        value: function canvas_draw_runway_labels(cc) {
            if (!this.canvas.draw_labels) {
                return;
            }

            cc.fillStyle = COLORS.WHITE_08;

            var airport = window.airportController.airport_get();
            for (var i = 0; i < airport.runways.length; i++) {
                cc.save();
                this.canvas_draw_runway_label(cc, airport.runways[i][0]);
                cc.restore();
                cc.save();
                this.canvas_draw_runway_label(cc, airport.runways[i][1]);
                cc.restore();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_scale
         * @param cc
         */

    }, {
        key: 'canvas_draw_scale',
        value: function canvas_draw_scale(cc) {
            cc.fillStyle = COLORS.WHITE_08;
            cc.strokeStyle = COLORS.WHITE_08;

            var offset = 10;
            var height = 5;
            var length = (0, _core.round)(1 / prop.ui.scale * 50);
            var px_length = (0, _core.round)(window.uiController.km_to_px(length));

            cc.translate(0.5, 0.5);

            cc.lineWidth = 1;
            cc.moveTo(this.canvas.size.width - offset, offset);
            cc.lineTo(this.canvas.size.width - offset, offset + height);
            cc.lineTo(this.canvas.size.width - offset - px_length, offset + height);
            cc.lineTo(this.canvas.size.width - offset - px_length, offset);
            cc.stroke();

            cc.translate(-0.5, -0.5);

            cc.textAlign = 'center';
            cc.fillText(length + ' km', this.canvas.size.width - offset - px_length * 0.5, offset + height + 17);
        }

        /**
         * @for CanvasController
         * @method canvas_draw_fix
         * @param cc
         * @param name
         * @param fix
         */

    }, {
        key: 'canvas_draw_fix',
        value: function canvas_draw_fix(cc, name, fix) {
            cc.beginPath();
            cc.moveTo(0, -5);
            cc.lineTo(4, 3);
            cc.lineTo(-4, 3);
            cc.closePath();
            cc.fill();
            cc.stroke();

            cc.textAlign = 'center';
            cc.textBaseline = 'top';
            cc.strokeText(name, 0, 6);
            cc.fillText(name, 0, 6);
        }

        /**
         * @for CanvasController
         * @method canvas_draw_fixes
         * @param cc
         */

    }, {
        key: 'canvas_draw_fixes',
        value: function canvas_draw_fixes(cc) {
            var _this3 = this;

            if (!this.canvas.draw_labels) {
                return;
            }

            cc.lineJoin = 'round';
            cc.font = BASE_CANVAS_FONT;

            var airport = window.airportController.airport_get();
            // TODO: perhaps this could be a model method?
            (0, _forEach3.default)(airport.real_fixes, function (fix, i) {
                cc.save();
                cc.translate((0, _core.round)(window.uiController.km_to_px(fix.position[0])) + _this3.canvas.panX, -(0, _core.round)(window.uiController.km_to_px(fix.position[1])) + _this3.canvas.panY);

                // draw outline (draw with eraser)
                cc.strokeStyle = 'rgba(0, 0, 0, 0.67)';
                cc.fillStyle = 'rgba(0, 0, 0, 0.67)';
                cc.globalCompositeOperation = 'destination-out';
                cc.lineWidth = 4;

                _this3.canvas_draw_fix(cc, fix.name, fix.position);

                cc.strokeStyle = COLORS.WHITE_00;
                cc.fillStyle = COLORS.WHITE_05;
                cc.globalCompositeOperation = 'source-over';
                cc.lineWidth = 1;

                _this3.canvas_draw_fix(cc, fix.name, fix.position);

                cc.restore();
            });
        }

        // TODO: break this method up into smaller chunks
        /**
         * @for CanvasController
         * @method canvas_draw_sids
         * @param cc
         */

    }, {
        key: 'canvas_draw_sids',
        value: function canvas_draw_sids(cc) {
            var _this4 = this;

            if (!this.canvas.draw_sids) {
                return;
            }

            // Store the count of sid text drawn for a specific transition
            var text_at_point = [];
            var airport = window.airportController.airport_get();

            cc.strokeStyle = COLORS.DEPARTURE_COLOR;
            cc.fillStyle = COLORS.DEPARTURE_COLOR;
            cc.setLineDash([1, 10]);
            cc.font = 'italic 14px monoOne, monospace';

            (0, _forEach3.default)(airport.sidCollection.draw, function (sid) {
                var write_sid_name = true;
                var fixX = null;
                var fixY = null;

                if (!(0, _has3.default)(sid, 'draw')) {
                    return;
                }

                (0, _forEach3.default)(sid.draw, function (fixList, i) {
                    var exit_name = null;

                    for (var j = 0; j < fixList.length; j++) {
                        // write exitPoint name
                        if (fixList[j].indexOf('*') !== -1) {
                            exit_name = fixList[j].replace('*', '');
                            write_sid_name = false;
                        }

                        var fix = airport.getFixPosition(fixList[j].replace('*', ''));

                        if (!fix) {
                            log('Unable to draw line to \'' + fixList[j] + '\' because its position is not defined!', _logLevel.LOG.WARNING);
                        }

                        fixX = window.uiController.km_to_px(fix[0]) + _this4.canvas.panX;
                        fixY = -window.uiController.km_to_px(fix[1]) + _this4.canvas.panY;

                        if (j === 0) {
                            cc.beginPath();
                            cc.moveTo(fixX, fixY);
                        } else {
                            cc.lineTo(fixX, fixY);
                        }
                    }

                    cc.stroke();

                    if (exit_name) {
                        // Initialize count for this transition
                        if (isNaN(text_at_point[exit_name])) {
                            text_at_point[exit_name] = 0;
                        }

                        // Move the y point for drawing depending on how many sids we have drawn text for
                        // at this point already
                        var y_point = fixY + 15 * text_at_point[exit_name];
                        cc.fillText(sid.identifier + '.' + exit_name, fixX + 10, y_point);

                        text_at_point[exit_name] += 1; // Increment the count for this transition
                    }
                });

                if (write_sid_name) {
                    cc.fillText(sid.identifier, fixX + 10, fixY);
                }
            });
        }

        /**
         * @for CanvasController
         * @method canvas_draw_separation_indicator
         * @param cc
         * @param aircraft
         */

    }, {
        key: 'canvas_draw_separation_indicator',
        value: function canvas_draw_separation_indicator(cc, aircraft) {
            // Draw a trailing indicator 2.5 NM (4.6km) behind landing aircraft to help with traffic spacing
            var rwy = window.airportController.airport_get().getRunway(aircraft.fms.currentWaypoint.runway);

            if (!rwy) {
                return;
            }

            var angle = rwy.angle + Math.PI;

            cc.strokeStyle = COLORS.RED_08;
            cc.lineWidth = 3;
            cc.translate(window.uiController.km_to_px(aircraft.position[0]) + this.canvas.panX, -window.uiController.km_to_px(aircraft.position[1]) + this.canvas.panY);
            cc.rotate(angle);
            cc.beginPath();
            cc.moveTo(-5, -window.uiController.km_to_px(5.556)); // 5.556km = 3.0nm
            cc.lineTo(+5, -window.uiController.km_to_px(5.556)); // 5.556km = 3.0nm
            cc.stroke();
        }

        /**
         * @for CanvasController
         * @method canvas_draw_aircraft_rings
         * @param cc
         * @param aircraft
         */

    }, {
        key: 'canvas_draw_aircraft_rings',
        value: function canvas_draw_aircraft_rings(cc, aircraft) {
            cc.save();

            if (aircraft.hasAlerts()[0]) {
                if (aircraft.hasAlerts()[1]) {
                    // red violation circle
                    cc.strokeStyle = COLORS.RED;
                } else {
                    // white warning circle
                    cc.strokeStyle = COLORS.WHITE_02;
                }
            } else {
                cc.strokeStyle = cc.fillStyle;
            }

            cc.beginPath();
            cc.arc(0, 0, window.uiController.km_to_px((0, _unitConverters.km)(3)), 0, (0, _circle.tau)()); // 3nm RADIUS
            cc.stroke();
            cc.restore();
        }

        /**
         * @for CanvasController
         * @method canvas_draw_aircraft_departure_window
         * @param cc
         * @param aircraft
         */

    }, {
        key: 'canvas_draw_aircraft_departure_window',
        value: function canvas_draw_aircraft_departure_window(cc, aircraft) {
            var angle = aircraft.destination - Math.PI / 2;

            cc.save();
            cc.strokeStyle = COLORS.DEPARTURE_STROKE;
            cc.beginPath();
            cc.arc(this.canvas.panX, this.canvas.panY, window.uiController.km_to_px(window.airportController.airport_get().ctr_radius), angle - 0.08726, angle + 0.08726);
            cc.stroke();
            cc.restore();
        }

        /**
         * @for CanvasController
         * @method canvas_draw_aircraft
         * @param cc
         * @param aircraft
         */

    }, {
        key: 'canvas_draw_aircraft',
        value: function canvas_draw_aircraft(cc, aircraft) {
            var almost_match = false;
            var match = false;

            if (prop.input.callsign.length > 1 && aircraft.matchCallsign(prop.input.callsign.substr(0, prop.input.callsign.length - 1))) {
                almost_match = true;
            }

            if (prop.input.callsign.length > 0 && aircraft.matchCallsign(prop.input.callsign)) {
                match = true;
            }

            if (match && aircraft.destination != null) {
                this.canvas_draw_aircraft_departure_window(cc, aircraft);
            }

            if (!aircraft.isVisible()) {
                return;
            }

            var size = 3;
            // Trailling
            var trailling_length = 12;
            var dpr = window.devicePixelRatio || 1;

            if (dpr > 1) {
                trailling_length *= (0, _core.round)(dpr);
            }

            cc.save();

            if (!aircraft.inside_ctr) {
                cc.fillStyle = COLORS.LIGHT_SILVER;
            } else {
                cc.fillStyle = COLORS.WHITE;
            }

            var length = aircraft.position_history.length;
            for (var i = 0; i < length; i++) {
                if (!aircraft.inside_ctr) {
                    cc.globalAlpha = 0.3 / (length - i);
                } else {
                    cc.globalAlpha = 1 / (length - i);
                    cc.fillRect(window.uiController.km_to_px(aircraft.position_history[i][0]) + this.canvas.panX - 1, -window.uiController.km_to_px(aircraft.position_history[i][1]) + this.canvas.panY - 1, 2, 2);
                }
            }

            cc.restore();

            if (aircraft.position_history.length > trailling_length) {
                aircraft.position_history = aircraft.position_history.slice(aircraft.position_history.length - trailling_length, aircraft.position_history.length);
            }

            if (aircraft.isPrecisionGuided()) {
                cc.save();
                this.canvas_draw_separation_indicator(cc, aircraft);
                cc.restore();
            }

            // TODO: if all these parens are actally needed, abstract this out to a function that can return a bool.
            // Aircraft
            // Draw the future path
            if (window.gameController.game.option.get('drawProjectedPaths') === 'always' || window.gameController.game.option.get('drawProjectedPaths') === 'selected' && (aircraft.warning || match) && !aircraft.isTaxiing()) {
                this.canvas_draw_future_track(cc, aircraft);
            }

            var alerts = aircraft.hasAlerts();

            if (!aircraft.inside_ctr) {
                cc.fillStyle = COLORS.LIGHT_SILVER_03;
            } else if (almost_match) {
                cc.fillStyle = COLORS.GRAIN_BROWN;
            } else if (match) {
                cc.fillStyle = COLORS.WHITE;
            } else if (aircraft.warning || alerts[1]) {
                cc.fillStyle = COLORS.RED;
            } else if (aircraft.hit) {
                cc.fillStyle = COLORS.CORAL_RED;
            } else {
                cc.fillStyle = COLORS.WHITE;
            }

            cc.strokeStyle = cc.fillStyle;

            if (match) {
                cc.save();

                if (!aircraft.inside_ctr) {
                    cc.fillStyle = COLORS.WHITE_03;
                } else {
                    cc.fillStyle = COLORS.WHITE;
                }

                var w = this.canvas.size.width / 2;
                var h = this.canvas.size.height / 2;

                cc.translate((0, _core.clamp)(-w, window.uiController.km_to_px(aircraft.position[0]) + this.canvas.panX, w), (0, _core.clamp)(-h, -window.uiController.km_to_px(aircraft.position[1]) + this.canvas.panY, h));

                cc.beginPath();
                cc.arc(0, 0, (0, _core.round)(size * 1.5), 0, (0, _circle.tau)());
                cc.fill();

                cc.restore();
            }

            cc.translate(window.uiController.km_to_px(aircraft.position[0]) + this.canvas.panX, -window.uiController.km_to_px(aircraft.position[1]) + this.canvas.panY);

            if (!aircraft.hit) {
                cc.save();

                var tail_length = aircraft.groundSpeed / 15;
                if (match) {
                    tail_length = 15;
                }

                var angle = aircraft.groundTrack;
                var end = (0, _vector.vscale)((0, _vector.vturn)(angle), tail_length);

                cc.beginPath();
                cc.moveTo(0, 0);
                cc.lineTo(end[0], -end[1]);
                cc.stroke();
                cc.restore();
            }

            if (aircraft.notice || alerts[0]) {
                this.canvas_draw_aircraft_rings(cc, aircraft);
            }

            cc.beginPath();
            cc.arc(0, 0, size, 0, (0, _circle.tau)());
            cc.fill();
        }

        /**
         * Draw dashed line from last coordinate of future track through
         * any later requested fixes.
         *
         * @for CanvasController
         * @method canvas_draw_future_track_fixes
         * @param cc
         * @param aircraft
         * @param future_track
         */

    }, {
        key: 'canvas_draw_future_track_fixes',
        value: function canvas_draw_future_track_fixes(cc, aircraft, future_track) {
            if (aircraft.fms.waypoints.length < 1) {
                return;
            }

            var start = future_track.length - 1;
            var x = window.uiController.km_to_px(future_track[start][0]) + this.canvas.panX;
            var y = -window.uiController.km_to_px(future_track[start][1]) + this.canvas.panY;

            cc.beginPath();
            cc.moveTo(x, y);
            cc.setLineDash([3, 10]);

            for (var i = 0; i < aircraft.fms.waypoints.length; i++) {
                if (!aircraft.fms.waypoints[i].location) {
                    break;
                }

                var fix = aircraft.fms.waypoints[i].location;
                var fx = window.uiController.km_to_px(fix[0]) + this.canvas.panX;
                var fy = -window.uiController.km_to_px(fix[1]) + this.canvas.panY;

                cc.lineTo(fx, fy);
            }

            cc.stroke();
        }

        /**
         * Run physics updates into the future, draw future track
         *
         * @for CanvasController
         * @method canvas_draw_future_track
         * @param cc
         * @param aircraft
         */

    }, {
        key: 'canvas_draw_future_track',
        value: function canvas_draw_future_track(cc, aircraft) {
            var ils_locked = void 0;
            var lockedStroke = void 0;
            var was_locked = false;
            var future_track = [];
            var save_delta = window.gameController.game.delta;
            var fms_twin = (0, _cloneDeep3.default)(aircraft.fms);
            var twin = (0, _cloneDeep3.default)(aircraft);

            twin.fms = fms_twin;
            twin.fms.aircraft = twin;
            twin.projected = true;
            window.gameController.game.delta = 5;

            for (var i = 0; i < 60; i++) {
                twin.update();

                ils_locked = twin.isPrecisionGuided() && twin.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL && twin.mode === _aircraftConstants.FLIGHT_MODES.LANDING;

                future_track.push([twin.position[0], twin.position[1], ils_locked]);

                if (ils_locked && twin.altitude < 500) {
                    break;
                }
            }

            window.gameController.game.delta = save_delta;
            cc.save();

            if (aircraft.category === _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE) {
                cc.strokeStyle = COLORS.DEPARTURE_COLOR;
            } else {
                cc.strokeStyle = COLORS.RED_06;
                lockedStroke = COLORS.RED;
            }

            cc.globalCompositeOperation = 'screen';
            cc.lineWidth = 2;
            cc.beginPath();

            for (var _i2 = 0; _i2 < future_track.length; _i2++) {
                var track = future_track[_i2];
                ils_locked = track[2];

                var x = window.uiController.km_to_px(track[0]) + this.canvas.panX;
                var y = -window.uiController.km_to_px(track[1]) + this.canvas.panY;

                if (ils_locked && !was_locked) {
                    cc.lineTo(x, y);
                    // end the current path, start a new path with lockedStroke
                    cc.stroke();
                    cc.strokeStyle = lockedStroke;
                    cc.lineWidth = 3;
                    cc.beginPath();
                    cc.moveTo(x, y);

                    was_locked = true;

                    continue;
                }

                if (_i2 === 0) {
                    cc.moveTo(x, y);
                } else {
                    cc.lineTo(x, y);
                }
            }

            cc.stroke();
            this.canvas_draw_future_track_fixes(cc, twin, future_track);
            cc.restore();
        }

        /**
         * @for CanvasController
         * @method canvas_draw_all_aircraft
         * @param cc
         */

    }, {
        key: 'canvas_draw_all_aircraft',
        value: function canvas_draw_all_aircraft(cc) {
            cc.fillStyle = COLORS.LIGHT_SILVER;
            cc.strokeStyle = COLORS.LIGHT_SILVER;
            cc.lineWidth = 2;

            // console.time('canvas_draw_all_aircraft')
            for (var i = 0; i < prop.aircraft.list.length; i++) {
                cc.save();
                this.canvas_draw_aircraft(cc, prop.aircraft.list[i]);
                cc.restore();
            }
            // console.timeEnd('canvas_draw_all_aircraft')
        }

        /**
         * Draw an aircraft's data block
         * (box that contains callsign, altitude, speed)
         *
         * @for CanvasController
         * @method anvas_draw_info
         * @param cc
         * @param aircraft
         */

    }, {
        key: 'canvas_draw_info',
        value: function canvas_draw_info(cc, aircraft) {
            if (!aircraft.isVisible()) {
                return;
            }

            // TODO: flip the logic here and return early to make code more readable.
            if (!aircraft.hit) {
                // Initial Setup
                cc.save();

                var cs = aircraft.getCallsign();
                var paddingLR = 5;
                // width of datablock (scales to fit callsign)
                var width = (0, _core.clamp)(1, 5.8 * cs.length) + paddingLR * 2;
                var width2 = width / 2;
                // height of datablock
                var height = 31;
                var height2 = height / 2;
                // width of colored bar
                var bar_width = width / 18;
                var bar_width2 = bar_width / 2;
                var ILS_enabled = aircraft.fms.currentWaypoint.runway && aircraft.category === _aircraftConstants.FLIGHT_CATEGORY.ARRIVAL;
                var lock_size = height / 3;
                var lock_offset = lock_size / 8;
                var pi = Math.PI;
                var point1 = lock_size - bar_width2;
                var alt_trend_char = '';
                var a = point1 - lock_offset;
                var b = bar_width2;
                var clipping_mask_angle = Math.atan(b / a);
                // describes how far around to arc the arms of the ils lock case
                var pi_slice = pi / 24;
                var match = false;
                var almost_match = false;

                // Callsign Matching
                if (prop.input.callsign.length > 1 && aircraft.matchCallsign(prop.input.callsign.substr(0, prop.input.callsign.length - 1))) {
                    almost_match = true;
                }

                if (prop.input.callsign.length > 0 && aircraft.matchCallsign(prop.input.callsign)) {
                    match = true;
                }

                // set color, intensity, and style elements
                var alpha = 0.2;
                if (match) {
                    alpha = 0.9;
                } else if (aircraft.inside_ctr) {
                    // else if (almost_match) var alpha = 0.75;
                    alpha = 0.5;
                }

                var red = 'rgba(224, 128, 128, ' + alpha + ')';
                var green = 'rgba( 76, 118, 97, ' + alpha + ')';
                var blue = 'rgba(128, 255, 255, ' + alpha + ')';
                var white = 'rgba(255, 255, 255, ' + alpha + ')';
                cc.textBaseline = 'middle';

                // Move to center of where the data block is to be drawn
                var ac_pos = [(0, _core.round)(window.uiController.km_to_px(aircraft.position[0])) + this.canvas.panX, -(0, _core.round)(window.uiController.km_to_px(aircraft.position[1])) + this.canvas.panY];

                // game will move FDB to the appropriate position
                if (aircraft.datablockDir === -1) {
                    if (-window.uiController.km_to_px(aircraft.position[1]) + this.canvas.size.height / 2 < height * 1.5) {
                        cc.translate(ac_pos[0], ac_pos[1] + height2 + 12);
                    } else {
                        cc.translate(ac_pos[0], ac_pos[1] - height2 - 12);
                    }
                } else {
                    // user wants to specify FDB position
                    var displacements = {
                        ctr: [0, 0],
                        360: [0, -height2 - 12],
                        45: [width2 + 8.5, -height2 - 8.5],
                        90: [width2 + bar_width2 + 12, 0],
                        135: [width2 + 8.5, height2 + 8.5],
                        180: [0, height2 + 12],
                        225: [-width2 - 8.5, height2 + 8.5],
                        270: [-width2 - bar_width2 - 12, 0],
                        315: [-width2 - 8.5, -height2 - 8.5]
                    };

                    cc.translate(ac_pos[0] + displacements[aircraft.datablockDir][0], ac_pos[1] + displacements[aircraft.datablockDir][1]);
                }

                // Draw datablock shapes
                if (!ILS_enabled) {
                    // Standard Box
                    cc.fillStyle = green;
                    // Draw box
                    cc.fillRect(-width2, -height2, width, height);
                    cc.fillStyle = aircraft.category === _aircraftConstants.FLIGHT_CATEGORY.DEPARTURE ? blue : red;
                    // Draw colored bar
                    cc.fillRect(-width2 - bar_width, -height2, bar_width, height);
                } else {
                    // Box with ILS Lock Indicator
                    cc.save();

                    // Draw green part of box (excludes space where ILS Clearance Indicator juts in)
                    cc.fillStyle = green;
                    cc.beginPath();
                    cc.moveTo(-width2, height2); // bottom-left corner
                    cc.lineTo(width2, height2); // bottom-right corner
                    cc.lineTo(width2, -height2); // top-right corner
                    cc.lineTo(-width2, -height2); // top-left corner
                    cc.lineTo(-width2, -point1); // begin side cutout
                    cc.arc(-width2 - bar_width2, -lock_offset, lock_size / 2 + bar_width2, clipping_mask_angle - pi / 2, 0);
                    cc.lineTo(-width2 + lock_size / 2, lock_offset);
                    cc.arc(-width2 - bar_width2, lock_offset, lock_size / 2 + bar_width2, 0, pi / 2 - clipping_mask_angle);
                    cc.closePath();
                    cc.fill();

                    // Draw ILS Clearance Indicator
                    cc.translate(-width2 - bar_width2, 0);
                    cc.lineWidth = bar_width;
                    cc.strokeStyle = red;
                    cc.beginPath(); // top arc start
                    cc.arc(0, -lock_offset, lock_size / 2, -pi_slice, pi + pi_slice, true);
                    cc.moveTo(0, -lock_size / 2);
                    cc.lineTo(0, -height2);
                    cc.stroke(); // top arc end
                    cc.beginPath(); // bottom arc start
                    cc.arc(0, lock_offset, lock_size / 2, pi_slice, pi - pi_slice);
                    cc.moveTo(0, lock_size - bar_width);
                    cc.lineTo(0, height2);
                    cc.stroke(); // bottom arc end

                    if (aircraft.mode === _aircraftConstants.FLIGHT_MODES.LANDING) {
                        // Localizer Capture Indicator
                        cc.fillStyle = white;
                        cc.beginPath();
                        cc.arc(0, 0, lock_size / 5, 0, pi * 2);
                        cc.fill(); // Draw Localizer Capture Dot
                    }

                    cc.translate(width2 + bar_width2, 0);
                    // unclear how this works...
                    cc.beginPath(); // if removed, white lines appear on top of bottom half of lock case
                    cc.stroke(); // if removed, white lines appear on top of bottom half of lock case

                    cc.restore();
                }

                // Text
                var gap = 3; // height of TOTAL vertical space between the rows (0 for touching)
                var lineheight = 4.5; // height of text row (used for spacing basis)
                var row1text = cs;
                var row2text = lpad((0, _core.round)(aircraft.altitude * 0.01), 3) + ' ' + lpad((0, _core.round)(aircraft.groundSpeed * 0.1), 2);

                // TODO: remove the if/else in favor of an initial assignment, and update with if condition
                if (aircraft.inside_ctr) {
                    cc.fillStyle = COLORS.WHITE_08;
                } else {
                    cc.fillStyle = COLORS.WHITE_02;
                }

                if (aircraft.trend === 0) {
                    // small dash (symbola font)
                    alt_trend_char = String.fromCodePoint(0x2011);
                } else if (aircraft.trend > 0) {
                    alt_trend_char = String.fromCodePoint(0x1F851); // up arrow (symbola font)
                } else if (aircraft.trend < 0) {
                    alt_trend_char = String.fromCodePoint(0x1F853); // down arrow (symbola font)
                }

                // Draw full datablock text
                cc.textAlign = 'left';
                cc.fillText(row1text, -width2 + paddingLR, -gap / 2 - lineheight);
                cc.fillText(row2text, -width2 + paddingLR, gap / 2 + lineheight);
                // Draw climb/level/descend symbol
                cc.font = '10px symbola'; // change font to the one with extended unicode characters
                cc.textAlign = 'center';
                cc.fillText(alt_trend_char, -width2 + paddingLR + 20.2, gap / 2 + lineheight - 0.25);
                cc.font = BASE_CANVAS_FONT; // change back to normal font

                cc.restore();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_all_info
         * @param cc
         */

    }, {
        key: 'canvas_draw_all_info',
        value: function canvas_draw_all_info(cc) {
            for (var i = 0; i < prop.aircraft.list.length; i++) {
                cc.save();
                this.canvas_draw_info(cc, prop.aircraft.list[i]);
                cc.restore();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_compass
         * @param cc
         */

    }, {
        key: 'canvas_draw_compass',
        value: function canvas_draw_compass(cc) {
            cc.translate((0, _core.calculateMiddle)(this.canvas.size.width), (0, _core.calculateMiddle)(this.canvas.size.height));

            var airport = window.airportController.airport_get();
            var size = 80;
            var size2 = size / 2;
            var padding = 16;
            var dot = 16;
            var windspeed_line = void 0;
            var highwind = void 0;

            // Shift compass location
            cc.translate(-size2 - padding, -size2 - padding);
            cc.lineWidth = 4;

            // Outer circle
            cc.fillStyle = 'rgba(0, 0, 0, 0.7)';
            cc.beginPath();
            cc.arc(0, 0, size2, 0, (0, _circle.tau)());
            cc.fill();

            // Inner circle
            cc.lineWidth = 1;
            cc.beginPath();
            cc.arc(0, 0, dot / 2, 0, (0, _circle.tau)());
            cc.strokeStyle = COLORS.WHITE_07;
            cc.stroke();

            // Wind Value
            cc.fillStyle = COLORS.WHITE_07;
            cc.textAlign = 'center';
            cc.textBaseline = 'center';
            cc.font = '9px monoOne, monospace';
            cc.fillText(airport.wind.speed, 0, 3.8);
            cc.font = 'bold 10px monoOne, monospace';

            // Wind line
            if (airport.wind.speed > 8) {
                windspeed_line = airport.wind.speed / 2;
                highwind = true;
            } else {
                windspeed_line = airport.wind.speed;
                highwind = false;
            }

            cc.save();
            cc.translate(-dot / 2 * (0, _core.sin)(airport.wind.angle), dot / 2 * (0, _core.cos)(airport.wind.angle));
            cc.beginPath();
            cc.moveTo(0, 0);
            cc.rotate(airport.wind.angle);
            cc.lineTo(0, (0, _core.extrapolate_range_clamp)(0, windspeed_line, 15, 0, size2 - dot));

            // TODO: simplify. replace with initial assignment and re-assignment in if condition
            // Color wind line red for high-wind
            if (highwind) {
                cc.strokeStyle = COLORS.BRIGHT_RED;
            } else {
                cc.strokeStyle = COLORS.WHITE_07;
            }

            cc.lineWidth = 2;
            cc.stroke();
            cc.restore();
            cc.fillStyle = COLORS.WHITE_07;
            cc.textAlign = 'center';
            cc.textBaseline = 'top';

            for (var i = 90; i <= 360; i += 90) {
                cc.rotate((0, _unitConverters.degreesToRadians)(90));

                var angle = void 0;
                if (i === 90) {
                    angle = '0' + i;
                } else {
                    angle = i;
                }

                cc.save();
                cc.fillText(angle, 0, -size2 + 4);
                cc.restore();
            }
        }

        /**
         * Draw circular airspace border
         *
         * @for CanvasController
         * @method anvas_draw_ctr
         * @param cc
         */

    }, {
        key: 'canvas_draw_ctr',
        value: function canvas_draw_ctr(cc) {
            // Draw a gentle fill color with border within the bounds of the airport's ctr_radius
            cc.strokeStyle = COLORS.AIRSPACE_RADIUS_STROKE;
            cc.fillStyle = COLORS.AIRSPACE_RADIUS_FILL;
            cc.beginPath();
            cc.arc(0, 0, window.airportController.airport_get().ctr_radius * prop.ui.scale, 0, (0, _circle.tau)());
            cc.fill();
            cc.stroke();
        }

        /**
         * Draw polygonal airspace border
         *
         * @for CanvasController
         * @method anvas_draw_airspace_border
         * @param cc
         */

    }, {
        key: 'canvas_draw_airspace_border',
        value: function canvas_draw_airspace_border(cc) {
            var airport = window.airportController.airport_get();
            if (!airport.airspace) {
                this.canvas_draw_ctr(cc);
            }

            // style
            cc.strokeStyle = COLORS.AIRSPACE_RADIUS_STROKE;
            cc.fillStyle = COLORS.AIRSPACE_RADIUS_FILL;

            // draw airspace
            for (var i = 0; i < airport.airspace.length; i++) {
                var poly = _jquery2.default.map(airport.perimeter.poly, function (v) {
                    // TODO: this seems strange. are we returning a single-index array everytime? what does v.position look like?
                    return [v.position];
                });

                this.canvas_draw_poly(cc, poly);
                cc.clip();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_fancy_rings
         * @param cc
         * @param fix_origin
         * @param fix1
         * @param fix2
         */

    }, {
        key: 'canvas_draw_fancy_rings',
        value: function canvas_draw_fancy_rings(cc, fix_origin, fix1, fix2) {
            var airport = window.airportController.airport_get();
            var origin = airport.getFixPosition(fix_origin);
            var f1 = airport.getFixPosition(fix1);
            var f2 = airport.getFixPosition(fix2);
            var minDist = Math.min((0, _distance.distance2d)(origin, f1), (0, _distance.distance2d)(origin, f2));
            var halfPI = Math.PI / 2;
            var extend_ring = (0, _unitConverters.degreesToRadians)(10);
            var start_angle = Math.atan2(f1[0] - origin[0], f1[1] - origin[1]) - halfPI - extend_ring;
            var end_angle = Math.atan2(f2[0] - origin[0], f2[1] - origin[1]) - halfPI + extend_ring;
            var x = (0, _core.round)(window.uiController.km_to_px(origin[0])) + this.canvas.panX;
            var y = -(0, _core.round)(window.uiController.km_to_px(origin[1])) + this.canvas.panY;
            // 5NM = 9.27km
            var radius = 9.27;

            for (var i = 0; i < 4; i++) {
                cc.beginPath();
                cc.arc(x, y, window.uiController.km_to_px(minDist - i * radius), start_angle, end_angle);

                cc.stroke();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_engm_range_rings
         * @param cc
         */
        // Draw range rings for ENGM airport to assist in point merge

    }, {
        key: 'canvas_draw_engm_range_rings',
        value: function canvas_draw_engm_range_rings(cc) {
            cc.strokeStyle = 'rgba(200, 255, 200, 0.3)';
            cc.setLineDash([3, 6]);

            this.canvas_draw_fancy_rings(cc, 'BAVAD', 'GM428', 'GM432');
            this.canvas_draw_fancy_rings(cc, 'TITLA', 'GM418', 'GM422');
            this.canvas_draw_fancy_rings(cc, 'INSUV', 'GM403', 'GM416');
            this.canvas_draw_fancy_rings(cc, 'VALPU', 'GM410', 'GM402');
        }

        /**
         * @for CanvasController
         * @method canvas_draw_range_rings
         * @param cc
         */

    }, {
        key: 'canvas_draw_range_rings',
        value: function canvas_draw_range_rings(cc) {
            var airport = window.airportController.airport_get();
            // convert input param from nm to km
            var rangeRingRadius = (0, _unitConverters.km)(airport.rr_radius_nm);

            // Fill up airport's ctr_radius with rings of the specified radius
            for (var i = 1; i * rangeRingRadius < airport.ctr_radius; i++) {
                cc.beginPath();
                cc.linewidth = 1;
                cc.arc(0, 0, rangeRingRadius * prop.ui.scale * i, 0, (0, _circle.tau)());
                cc.strokeStyle = COLORS.AIRSPACE_RANGE_RING_COLOR;
                cc.stroke();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_poly
         * @param cc
         * @param poly
         */

    }, {
        key: 'canvas_draw_poly',
        value: function canvas_draw_poly(cc, poly) {
            cc.beginPath();

            (0, _forEach3.default)(poly, function (singlePoly, v) {
                cc.lineTo(window.uiController.km_to_px(singlePoly[0]), -window.uiController.km_to_px(singlePoly[1]));
            });

            cc.closePath();
            cc.stroke();
            cc.fill();
        }

        /**
         * @for CanvasController
         * @method canvas_draw_terrain
         * @param cc
         */

    }, {
        key: 'canvas_draw_terrain',
        value: function canvas_draw_terrain(cc) {
            if (!this.canvas.draw_terrain) {
                return;
            }

            cc.strokeStyle = COLORS.WHITE_04;
            cc.fillStyle = COLORS.WHITE_02;
            cc.lineWidth = (0, _core.clamp)(0.5, prop.ui.scale / 10, 2);
            cc.lineJoin = 'round';

            var airport = window.airportController.airport_get();
            var max_elevation = 0;

            cc.save();
            cc.translate(this.canvas.panX, this.canvas.panY);

            _jquery2.default.each(airport.terrain || [], function (elevation, terrainLevel) {
                max_elevation = Math.max(max_elevation, elevation);
                var color = 'rgba(' + prop.ui.terrain.colors[elevation] + ', ';

                cc.strokeStyle = color + ' ' + prop.ui.terrain.border_opacity + ')';
                cc.fillStyle = color + ' ' + prop.ui.terrain.fill_opacity + ')';

                (0, _forEach3.default)(terrainLevel, function (terrainGroup) {
                    cc.beginPath();

                    (0, _forEach3.default)(terrainGroup, function (terrainItem) {
                        // TODO: should this be a for/in? is it an array?
                        (0, _forEach3.default)(terrainItem, function (value, index) {
                            // Loose equals is important here.
                            if (index === 0) {
                                cc.moveTo(window.uiController.km_to_px(terrainItem[index][0]), -window.uiController.km_to_px(terrainItem[index][1]));
                            }

                            cc.lineTo(window.uiController.km_to_px(terrainItem[index][0]), -window.uiController.km_to_px(terrainItem[index][1]));
                        });

                        cc.closePath();
                    });

                    cc.fill();
                    cc.stroke();
                });
            });

            cc.restore();

            if (max_elevation === 0) {
                return;
            }

            var offset = 10;
            var width = this.canvas.size.width;
            var height = this.canvas.size.height;
            var box_width = 30;
            var box_height = 5;

            cc.font = BASE_CANVAS_FONT;
            cc.lineWidth = 1;

            for (var i = 1000; i <= max_elevation; i += 1000) {
                cc.save();
                // translate coordinates for every block to not use these X & Y twice in rect and text
                // .5 in X and Y coordinates are used to make 1px rectangle fit exactly into 1 px
                // and not be blurred
                cc.translate(width / 2 - 140.5 - (max_elevation - i) / 1000 * (box_width + 1), -height / 2 + offset + 0.5);
                cc.beginPath();
                cc.rect(0, 0, box_width - 1, box_height);
                cc.closePath();

                // in the map, terrain of higher levels has fill of all the lower levels
                // so we need to fill it below exactly as in the map
                for (var j = 0; j <= i; j += 1000) {
                    cc.fillStyle = 'rgba(' + prop.ui.terrain.colors[j] + ', ' + prop.ui.terrain.fill_opacity + ')';
                    cc.fill();
                }

                cc.strokeStyle = 'rgba(' + prop.ui.terrain.colors[i] + ', ' + prop.ui.terrain.border_opacity + ')';
                cc.stroke();

                // write elevation signs only for the outer elevations
                if (i === max_elevation || i === 1000) {
                    cc.fillStyle = COLORS.WHITE;
                    cc.textAlign = 'center';
                    cc.textBaseline = 'top';
                    cc.fillText(i + '\'', box_width / 2 + 0.5, offset + 2);
                }

                cc.restore();
            }
        }

        /**
         * @for CanvasController
         * @method canvas_draw_restricted
         * @param cc
         */

    }, {
        key: 'canvas_draw_restricted',
        value: function canvas_draw_restricted(cc) {
            var _this5 = this;

            if (!this.canvas.draw_restricted) {
                return;
            }

            cc.strokeStyle = COLORS.RESTRICTED_AIRSPACE_STROKE;
            cc.lineWidth = Math.max(prop.ui.scale / 3, 2);
            cc.lineJoin = 'round';
            cc.font = BASE_CANVAS_FONT;

            var airport = window.airportController.airport_get();

            cc.save();
            cc.translate(this.canvas.panX, this.canvas.panY);

            (0, _forEach3.default)(airport.restricted_areas, function (area) {
                cc.fillStyle = 'transparent';
                _this5.canvas_draw_poly(cc, area.coordinates);

                cc.fillStyle = COLORS.RESTRICTED_AIRSPACE_FILL;
                cc.textAlign = 'center';
                cc.textBaseline = 'top';

                var height = area.height === Infinity ? 'UNL' : 'FL' + Math.ceil(area.height / 1000) * 10;
                var height_shift = 0;

                if (area.name) {
                    height_shift = -12;

                    cc.fillText(area.name, (0, _core.round)(window.uiController.km_to_px(area.center[0])), -(0, _core.round)(window.uiController.km_to_px(area.center[1])));
                }

                cc.fillText(height, (0, _core.round)(window.uiController.km_to_px(area.center[0])), height_shift - (0, _core.round)(window.uiController.km_to_px(area.center[1])));
            });

            cc.restore();
        }

        /**
         * @for CanvasController
         * @method canvas_draw_videoMap
         * @param cc
         */

    }, {
        key: 'canvas_draw_videoMap',
        value: function canvas_draw_videoMap(cc) {
            if (!(0, _has3.default)(window.airportController.airport_get(), 'maps')) {
                return;
            }

            cc.strokeStyle = COLORS.VIDEO_MAP_STROKE;
            cc.lineWidth = prop.ui.scale / 15;
            cc.lineJoin = 'round';
            cc.font = BASE_CANVAS_FONT;

            var airport = window.airportController.airport_get();
            var map = airport.maps.base;

            cc.save();
            cc.translate(this.canvas.panX, this.canvas.panY);

            (0, _forEach3.default)(map, function (mapItem, i) {
                cc.moveTo(window.uiController.km_to_px(mapItem[0]), -window.uiController.km_to_px(mapItem[1]));
                // cc.beginPath();
                cc.lineTo(window.uiController.km_to_px(mapItem[2]), -window.uiController.km_to_px(mapItem[3]));
            });

            cc.stroke();
            cc.restore();
        }

        /** Draws crosshairs that point to the currently translated location
         /**
         * @for CanvasController
         * @method canvas_draw_crosshairs
         * @param cc
         */

    }, {
        key: 'canvas_draw_crosshairs',
        value: function canvas_draw_crosshairs(cc) {
            cc.save();
            cc.strokeStyle = COLORS.CROSSHAIR_STROKE;
            cc.lineWidth = 3;
            cc.beginPath();
            cc.moveTo(-10, 0);
            cc.lineTo(10, 0);
            cc.stroke();
            cc.beginPath();
            cc.moveTo(0, -10);
            cc.lineTo(0, 10);
            cc.stroke();
            cc.restore();
        }

        /**
         * @for CanvasController
         * @method canvas_draw_directions
         * @param cc
         */

    }, {
        key: 'canvas_draw_directions',
        value: function canvas_draw_directions(cc) {
            if (window.gameController.game_paused()) {
                return;
            }

            var callsign = prop.input.callsign.toUpperCase();
            if (callsign.length === 0) {
                return;
            }

            // Get the selected aircraft.
            var aircraft = prop.aircraft.list.filter(function (p) {
                return p.isVisible() && p.getCallsign().toUpperCase() === callsign;
            })[0];

            if (!aircraft) {
                return;
            }

            var pos = this.to_canvas_pos(aircraft.position);
            var rectPos = [0, 0];
            var rectSize = [this.canvas.size.width, this.canvas.size.height];

            cc.save();
            cc.strokeStyle = COLORS.LIGHT_SILVER;
            cc.fillStyle = COLORS.WHITE;
            cc.textAlign = 'center';
            cc.textBaseline = 'middle';

            for (var alpha = 0; alpha < 360; alpha++) {
                var dir = [(0, _core.sin)((0, _unitConverters.degreesToRadians)(alpha)), -(0, _core.cos)((0, _unitConverters.degreesToRadians)(alpha))];

                var p = (0, _vector.positive_intersection_with_rect)(pos, dir, rectPos, rectSize);

                if (p) {
                    var markLen = alpha % 5 === 0 ? alpha % 10 === 0 ? 16 : 12 : 8;
                    var markWeight = alpha % 30 === 0 ? 2 : 1;

                    var dx = -markLen * dir[0];
                    var dy = -markLen * dir[1];

                    cc.lineWidth = markWeight;
                    cc.beginPath();
                    cc.moveTo(p[0], p[1]);

                    var markX = p[0] + dx;
                    var markY = p[1] + dy;

                    cc.lineTo(markX, markY);
                    cc.stroke();

                    if (alpha % 10 === 0) {
                        cc.font = alpha % 30 === 0 ? 'bold 10px monoOne, monospace' : BASE_CANVAS_FONT;

                        var text = '' + alpha;
                        var textWidth = cc.measureText(text).width;

                        cc.fillText(text, markX - dir[0] * (textWidth / 2 + 4), markY - dir[1] * 7);
                    }
                }
            }

            cc.restore();
        }

        /**
         * @for CanvasController
         * @method to_canvas_
         * @param pos {}
         */

    }, {
        key: 'to_canvas_pos',
        value: function to_canvas_pos(pos) {
            return [this.canvas.size.width / 2 + this.canvas.panX + (0, _unitConverters.km)(pos[0]), this.canvas.size.height / 2 + this.canvas.panY - (0, _unitConverters.km)(pos[1])];
        }
    }]);

    return ConvasController;
}();

exports.default = ConvasController;

},{"../constants/aircraftConstants":570,"../constants/logLevel":574,"../constants/selectors":575,"../math/circle":583,"../math/core":584,"../math/distance":585,"../math/vector":587,"../utilities/timeHelpers":594,"../utilities/unitConverters":595,"jquery":296,"lodash/cloneDeep":461,"lodash/forEach":468,"lodash/has":470}],563:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _commandDefinitions = require('./commandDefinitions');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A definition of a specific command and it's arguments.
 *
 * Conatins a command name, which maps 1:1 with a name defined in `commandMap.js` and `commandDefinitions.js`.
 * Commands may have an alias or many, we care only about the root command. The command map will map any
 * alias to a root command and this `CommandModel` is only concerned about those root commands. It has
 * no way of knowing what the original alias was, if one was used.
 *
 * Each `CommandModel` will be expected to have, at a minimum, a `name` and a matching `COMMAND_DEFINITION`.
 *
 * @class CommandModel
 */
var CommandModel = function () {
  /**
   * @constructor
   * @for CommandModel
   */
  function CommandModel() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    _classCallCheck(this, CommandModel);

    /**
     * command name, should match a command in the COMMANDS constant
     *
     * @property name
     * @type {string}
     */
    this.name = name;

    /**
     * A reference to the COMMAND_DEFINITION for this particular command.
     * this gives us access to both the `validate` and `parse` methods
     * that belong to this command.
     *
     * Storing this as a class property allows us to do the lookup once
     * and then make it available to the rest of the class so it can
     * be referenced when needed.
     *
     * @property _commandDefinition
     * @type {object}
     * @private
     */
    this._commandDefinition = _commandDefinitions.COMMAND_DEFINITION[name];

    /**
     * list of command arguments
     *
     * - assumed to be the text command names
     * - may be empty, depending on the command
     * - should only ever be strings on initial set immediately after instantiation
     * - will later be parsed via the `_commandDefinition.parse()` method to the
     *   correct data types and shape
     *
     * @property args
     * @type {array}
     * @default []
     */
    this.args = [];

    // TODO: may need to throw here if `_commandDefinition` is undefined
  }

  /**
   * Return an array of [name, ...args]
   *
   * We use this shape solely to match the existing api.
   *
   * @property nameAndArgs
   * @return {array}
   */


  _createClass(CommandModel, [{
    key: 'validateArgs',


    /**
     * Send the initial args off to the validator
     *
     * @for CommandModel
     * @method validateArgs
     * @return {string|undefined}
     */
    value: function validateArgs() {
      return this._commandDefinition.validate(this.args);
    }

    /**
     * Send the initial args, set from the `CommandParser` right after instantiation, off to
     * the parser for formatting.
     *
     * @for CommandModel
     * @method parseArgs
     */

  }, {
    key: 'parseArgs',
    value: function parseArgs() {
      // this completely overwrites current args. this is intended because all args are received as
      // strings but consumed as strings, numbers or booleans. and when the args are initially set
      // they may not all be available yet
      this.args = this._commandDefinition.parse(this.args);
    }
  }, {
    key: 'nameAndArgs',
    get: function get() {
      return [this.name].concat(_toConsumableArray(this.args));
    }
  }]);

  return CommandModel;
}();

exports.default = CommandModel;

},{"./commandDefinitions":567}],564:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _tail2 = require('lodash/tail');

var _tail3 = _interopRequireDefault(_tail2);

var _CommandModel = require('./CommandModel');

var _CommandModel2 = _interopRequireDefault(_CommandModel);

var _generalUtilities = require('../utilities/generalUtilities');

var _commandMap = require('./commandMap');

var _globalConstants = require('../constants/globalConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Symbol used to split the command string as it enters the class.
 *
 * @property COMMAND_ARGS_SEPARATOR
 * @type {string}
 * @final
 */
var COMMAND_ARGS_SEPARATOR = ' ';

/**
 * This class is responsible for taking the content of the `$commandInput` and parsing it
 * out into commands and arguments.
 *
 * Everything this class needs comes in as a single string provided by `InputController.input_run()`.
 * ex:
 * - `timewarp 50`
 * - `AA777 fh 0270 d 050 sp 200`
 * - `AA777 hold dumba left 2min`
 *
 * **Differentiation of commands and arguments is determinied by splitting the string on an empty space. This
 * is very important, so legacy commands did not have spaces between the command and argument. With this
 * implementation _every_ command shall have a space between itself and it's arguments.**
 *
 * Commands are broken out into two categories: `System` and `Transmit`.
 * - System commands are zero or single argument commands that are used for interacting with the app
 *   itslef. Things like `timewarp` or `tutorial` are examples of system commands.
 *
 * - Transmit commands are instructions meant for a specific aircraft within the controlled airspace.
 *   These commands can have zero to many arguments, depending on the command. Some examples of transmit
 *   commands are `to`, `taxi`, `hold`.
 *
 * Commands go through a lifecycle as they move from raw to parsed:
 * - user types command and presses enter
 * - command string is captured via input value, then passed as an argument to this class
 * - determine if command string is a `System Command` or `Transmit`
 * - creation of `CommandModel` objects for each command/argment group found
 * - validate command arguments (number of arguments and data type)
 * - parse command arguments
 *
 * All available commands are defined in the `commandMap`. Two terms of note are alias and root command.
 * We would call the `takeoff` command a root command and `to` and `cto` alises. The root command is the
 * one that shares the same key as the command definition which gives us the correct validator and parser.
 * The root command is also what the `AircraftInstanceModel` is expecting when it receives commands
 * from the `InputController`.
 *
 * @class CommandParser
 */

var CommandParser = function () {
    /**
     * @constructor
     * @for CommandParser
     * @param rawCommandWithArgs {string}  string present in the `$commandInput` when the user pressed `enter`
     */
    function CommandParser() {
        var rawCommandWithArgs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

        _classCallCheck(this, CommandParser);

        if (!(0, _isString3.default)(rawCommandWithArgs)) {
            // istanbul ignore next
            // eslint-disable-next-line max-len
            throw new TypeError('Invalid parameter. CommandParser expects a string but received ' + (typeof rawCommandWithArgs === 'undefined' ? 'undefined' : _typeof(rawCommandWithArgs)));
        }

        /**
         * Command name
         *
         * Could be either Transmit or a System command
         *
         * This is consumed by the `InputController` after parsing here and is used to
         * determine what to do with the parsed command(s)
         *
         * @type {string}
         * @default ''
         */
        this.command = '';

        /**
         * Aircraft callsign
         *
         * this is optional and not included with system commands
         *
         * @type {string}
         * @default ''
         */
        this.callsign = '';

        /**
         * List of `CommandModel` objects.
         *
         * Each command is contained within a `CommandModel`, even System commands. This provides
         * a consistent interface for obtaining commands and arguments (via getter) and also
         * aloows for easy implementation of the legacy API structure.
         *
         * @type {array<CommandModel>}
         */
        this.commandList = [];

        this._extractCommandsAndArgs(rawCommandWithArgs.toLowerCase());
    }

    /**
     * Return an array of [commandName, ...args]
     *
     * We use this shape solely to match the existing api.
     *
     * When command is a System command:
     * - commandList is assumed to have a length on 1
     * - commandList[0].args[0] is assumed to have a single string value
     *
     * @property args
     * @return {string|array<string>}
     */


    _createClass(CommandParser, [{
        key: '_extractCommandsAndArgs',


        /**
         * Accept the entire string provided to the constructor and attempt to break it up into:
         * - System command and its arguments
         * - Transmit commands and thier arguments
         *
         * @for CommandParser
         * @method _extractCommandsAndArgs
         * @param rawCommandWithArgs {string}
         * @private
         */
        value: function _extractCommandsAndArgs(rawCommandWithArgs) {
            var commandOrCallsignIndex = 0;
            var commandArgSegmentsWithCallsign = rawCommandWithArgs.split(COMMAND_ARGS_SEPARATOR);
            var callsignOrSystemCommandName = commandArgSegmentsWithCallsign[commandOrCallsignIndex];
            // effectively a slice of the array that returns everything but the first item
            var commandArgSegments = (0, _tail3.default)(commandArgSegmentsWithCallsign);

            if (this._isSystemCommand(callsignOrSystemCommandName)) {
                this._buildSystemCommandModel(commandArgSegmentsWithCallsign);

                return;
            }

            this._buildTransmitCommandModels(callsignOrSystemCommandName, commandArgSegments);
        }

        /**
         * Build a `CommandModel` for a System command then add that model to the `commandList`
         *
         * @for CommandParser
         * @method _buildSystemCommandModel
         * @private
         */

    }, {
        key: '_buildSystemCommandModel',
        value: function _buildSystemCommandModel(commandArgSegments) {
            var commandIndex = 0;
            var argIndex = 1;
            var commandName = commandArgSegments[commandIndex];
            var commandModel = new _CommandModel2.default(commandName);
            commandModel.args.push(commandArgSegments[argIndex]);

            this.command = commandName;
            this.commandList.push(commandModel);

            this._validateAndParseCommandArguments();
        }

        /**
         * Build `CommandModel` objects for each transmit commands then add them to the `commandList`
         *
         * @private
         */

    }, {
        key: '_buildTransmitCommandModels',
        value: function _buildTransmitCommandModels(callsignOrSystemCommandName, commandArgSegments) {
            this.command = _commandMap.SYSTEM_COMMANDS.transmit;
            this.callsign = callsignOrSystemCommandName;
            this.commandList = this._buildCommandList(commandArgSegments);

            this._validateAndParseCommandArguments();
        }

        /**
         * Loop through the commandArgSegments array and either create a new `CommandModel` or add
         * arguments to a `CommandModel`.
         *
         * commandArgSegments will contain both commands and arguments (very contrived example):
         * - `[cmd, arg, arg, cmd, cmd, arg, arg, arg]`
         *
         * this method is expecting that
         * the first item it receives, that is not a space, is a command. we then push each successive
         * array item to the args array until we find another command. then we repeat the process.
         *
         * this allows us to create several `CommandModel` with arguments and only loop over them once.
         *
         * @for CommandParser
         * @method _buildCommandList
         * @param commandArgSegments {array<string>}
         * @return {array<CommandModel>}
         * @private
         */

    }, {
        key: '_buildCommandList',
        value: function _buildCommandList(commandArgSegments) {
            var _this = this;

            var commandModel = void 0;

            // TODO: this still feels icky and could be simplified some more
            var commandList = (0, _map3.default)(commandArgSegments, function (commandOrArg) {
                if (commandOrArg === '') {
                    return;
                } else if (_globalConstants.REGEX.UNICODE.test(commandOrArg)) {
                    var commandString = (0, _generalUtilities.unicodeToString)(commandOrArg);
                    commandModel = new _CommandModel2.default(_commandMap.COMMAND_MAP[commandString]);

                    return commandModel;
                } else if ((0, _has3.default)(_commandMap.COMMAND_MAP, commandOrArg) && !_this._isAliasCommandAnArg(commandModel, commandOrArg)) {
                    commandModel = new _CommandModel2.default(_commandMap.COMMAND_MAP[commandOrArg]);

                    return commandModel;
                } else if (typeof commandModel === 'undefined') {
                    // if we've made it here and commandModel is still undefined, a command was not found
                    return;
                }

                commandModel.args.push(commandOrArg);
            });

            return (0, _compact3.default)(commandList);
        }

        /**
         * This method is used for addressing a very specific situation
         *
         * When the current command is `heading` and one of the arguments is `l`, the parser interprets
         * the `l` as another command. `l` is an alias for the `land` command.
         *
         * This method expects that a commandString will look like:
         * `AA321 t l 042`
         *
         * We look for the `heading` command and no existing arguments, as the `l` would become the
         * first argument in this situation.
         *
         * @for CommandParser
         * @method _isAliasCommandAnArg
         * @param commandModel {CommandModel}
         * @param commandOrArg {string}
         * @return {boolean}
         */

    }, {
        key: '_isAliasCommandAnArg',
        value: function _isAliasCommandAnArg(commandModel, commandOrArg) {
            if (!commandModel) {
                return false;
            }

            return commandModel.name === 'heading' && commandModel.args.length === 0 && commandOrArg === 'l';
        }

        /**
         * Fire off the `_validateCommandArguments` method and throws any errors returned
         *
         * @for CommandParser
         * @method _validateAndParseCommandArguments
         * @private
         */

    }, {
        key: '_validateAndParseCommandArguments',
        value: function _validateAndParseCommandArguments() {
            var validationErrors = this._validateCommandArguments();

            if (validationErrors.length > 0) {
                (0, _forEach3.default)(validationErrors, function (error) {
                    throw error;
                });
            }
        }

        /**
         * For each `CommandModel` in the `commandList`, first validate it's arguments
         * then parse those arguments into a consumable array.
         *
         * @for CommandParser
         * @method _validateCommandArguments
         * @private
         */

    }, {
        key: '_validateCommandArguments',
        value: function _validateCommandArguments() {
            return (0, _compact3.default)((0, _map3.default)(this.commandList, function (command) {
                var hasError = command.validateArgs();

                if (hasError) {
                    // we only return here so all the errors can be thrown at once
                    // from within the calling method
                    return hasError;
                }

                command.parseArgs();
            }));
        }

        /**
         * Encapsulation of boolean logic used to determine if the `callsignOrSystemCommandName`
         * is in fact a system command.
         *
         *
         * @for CommandParser
         * @method _isSystemCommand
         * @param callsignOrSystemCommandName {string}
         * @return {boolean}
         */

    }, {
        key: '_isSystemCommand',
        value: function _isSystemCommand(callsignOrSystemCommandName) {
            return (0, _has3.default)(_commandMap.SYSTEM_COMMANDS, callsignOrSystemCommandName) && callsignOrSystemCommandName !== _commandMap.SYSTEM_COMMANDS.transmit;
        }
    }, {
        key: 'args',
        get: function get() {
            if (this.command !== _commandMap.SYSTEM_COMMANDS.transmit) {
                return this.commandList[0].args;
            }

            return (0, _map3.default)(this.commandList, function (command) {
                return command.nameAndArgs;
            });
        }
    }]);

    return CommandParser;
}();

exports.default = CommandParser;

},{"../constants/globalConstants":573,"../utilities/generalUtilities":592,"./CommandModel":563,"./commandMap":568,"lodash/compact":462,"lodash/forEach":468,"lodash/has":470,"lodash/isString":489,"lodash/map":496,"lodash/tail":505}],565:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.holdParser = exports.findHoldCommandByType = exports.headingParser = exports.altitudeParser = undefined;

var _argumentValidators = require('./argumentValidators');

var _unitConverters = require('../utilities/unitConverters');

/**
 * Enumeration of possible the hold command argument names.
 *
 * Enumerated here base these nanes are shared accross several functions and this
 * provides a single source of truth.
 *
 * @property HOLD_COMMAND_ARG_NAMES
 * @type {Object}
 * @final
 */
var HOLD_COMMAND_ARG_NAMES = {
    TURN_DIRECTION: 'turnDirection',
    LEG_LENGTH: 'legLength',
    FIX_NAME: 'fixName'
};

/**
 * Converts a flight level altitude to a number in thousands and converts second arg to a boolean
 *
 * @function altitudeParser
 * @param args {array}
 * @return {array<number, boolean>}
 */
var altitudeParser = exports.altitudeParser = function altitudeParser(args) {
    var altitude = (0, _unitConverters.convertToThousands)(args[0]);
    // the validator will have already caught an invalid value here. if one exists, it is assumed to be valid and
    // thus we return true. otherwise its false
    var shouldExpedite = typeof args[1] !== 'undefined';

    return [altitude, shouldExpedite];
};

/**
 * Accepts a direction string:
 * - `left / l / right / r`
 *
 * and returns `left / right`
 *
 * @function directionNormalizer
 * @param direction {string}
 * @return normalizedDirection {string}
 */
var directionNormalizer = function directionNormalizer(direction) {
    var normalizedDirection = direction;

    if (direction === 'l') {
        normalizedDirection = 'left';
    } else if (direction === 'r') {
        normalizedDirection = 'right';
    }

    return normalizedDirection;
};

/**
 * Returns a consistent array with the same shape no matter the number of arguments received
 *
 * Converts a flight level altitude to a number in thousands and converts second arg to a boolean
 *
 * @function headingParser
 * @param args {array}
 * @return {array<string, number, boolean>}
 */
var headingParser = exports.headingParser = function headingParser(args) {
    var direction = void 0;
    var heading = void 0;
    var isIncremental = false;

    switch (args.length) {
        case 1:
            // existing api is expeting undefined values to be exactly null
            direction = null;
            heading = (0, _unitConverters.convertStringToNumber)(args[0]);

            return [direction, heading, isIncremental];
        case 2:
            isIncremental = args[1].length === 2;
            direction = directionNormalizer(args[0]);
            heading = (0, _unitConverters.convertStringToNumber)(args[1]);

            return [direction, heading, isIncremental];
        default:
            throw new Error('An error ocurred parsing the Heading arguments');
    }
};

/**
 * Abstracted boolean logic used to detmine if a string contains `min` or `nm`.
 *
 * This is useful specifically with the `findHoldCommandByType`.
 *
 * @function isLegLengthArg
 * @param arg {string}
 * @return {boolean}
 */
var isLegLengthArg = function isLegLengthArg(arg) {
    return arg.indexOf('min') !== -1 || arg.indexOf('nm') !== -1;
};

/**
 * Given a type and an argument list, find the first occurance of `type` from within the argument list.
 *
 * We are looking for one of three things here:
 * - `turnDirection` - a variation of left or right
 * - `legLength` - length of hold leg in either minutes (min) or nautical miles (nm)
 * - `fixName` - assumed to be a string that isn't a `turnDirection` or `legLength`. The parser has no way of
 *               knowing if a certain string is an actual `fixName`. We can only determine that it isn't a
 *               `turnDirection` or `legLength`. This will error from within the `runHold` method if the
 *               `fixName` is not valid.
 *
 * @function findHoldCommandByType
 * @param type {HOLD_COMMAND_ARG_NAMES}
 * @param args {array}
 * @return {string|null}
 */
var findHoldCommandByType = exports.findHoldCommandByType = function findHoldCommandByType(type, args) {
    for (var i = 0; i < args.length; i++) {
        var arg = args[i];

        switch (type) {
            case HOLD_COMMAND_ARG_NAMES.TURN_DIRECTION:
                if (!(0, _argumentValidators.isValidDirectionString)(arg)) {
                    continue;
                }

                return directionNormalizer(arg);
            case HOLD_COMMAND_ARG_NAMES.LEG_LENGTH:
                if (!isLegLengthArg(arg)) {
                    continue;
                }

                return arg;
            case HOLD_COMMAND_ARG_NAMES.FIX_NAME:
                if ((0, _argumentValidators.isValidDirectionString)(arg) || isLegLengthArg(arg)) {
                    continue;
                }

                return arg;
            default:
                return null;
        }
    }

    return null;
};

/**
 * The `hold` command accepts arguments in any order thus, we use the `findHoldCommandByType` helper
 * method to do that for us. This provides an easy way tp find the correct argument, no matter the order,
 * and consistently return an array of the same shape.
 *
 * @function holdParser
 * @param args {array}
 * @return {array<string>}
 */
var holdParser = exports.holdParser = function holdParser(args) {
    // existing api is expeting undefined values to be exactly null
    var fixName = findHoldCommandByType(HOLD_COMMAND_ARG_NAMES.FIX_NAME, args);
    var turnDirection = findHoldCommandByType(HOLD_COMMAND_ARG_NAMES.TURN_DIRECTION, args);
    var legLength = findHoldCommandByType(HOLD_COMMAND_ARG_NAMES.LEG_LENGTH, args);

    return [turnDirection, legLength, fixName];
};

},{"../utilities/unitConverters":595,"./argumentValidators":566}],566:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.holdValidator = exports.headingValidator = exports.isValidDirectionString = exports.fixValidator = exports.altitudeValidator = exports.oneOrThreeArgumentsValidator = exports.oneToThreeArgumentsValidator = exports.oneOrTwoArgumentValidator = exports.zeroOrOneArgumentValidator = exports.singleArgumentValidator = exports.zeroArgumentsValidator = undefined;

var _isNaN2 = require('lodash/isNaN');

var _isNaN3 = _interopRequireDefault(_isNaN2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _unitConverters = require('../utilities/unitConverters');

var _commandMap = require('./commandMap');

var _commandParserMessages = require('./commandParserMessages');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Check that `args` has exactly zero values
 *
 * @function zeroArgumentsValidator
 * @param args {array}
 * @return {string|undefined}
 */
var zeroArgumentsValidator = exports.zeroArgumentsValidator = function zeroArgumentsValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (args.length !== 0) {
        return _commandParserMessages.ERROR_MESSAGE.ZERO_ARG_LENGTH;
    }
};

/**
 * Checks that `args` has exactly one value
 *
 * @function singleArgumentValidator
 * @param args {array}
 * @return {string|undefined}
 */
var singleArgumentValidator = exports.singleArgumentValidator = function singleArgumentValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (args.length !== 1) {
        return _commandParserMessages.ERROR_MESSAGE.SINGLE_ARG_LENGTH;
    }
};

/**
 * Checks that `args` has exactly zero or one value
 *
 * @function zeroOrOneArgumentValidator
 * @param args {array}
 * @return {string|undefined}
 */
var zeroOrOneArgumentValidator = exports.zeroOrOneArgumentValidator = function zeroOrOneArgumentValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (args.length > 1) {
        return _commandParserMessages.ERROR_MESSAGE.ZERO_OR_ONE_ARG_LENGTH;
    }
};

/**
 * Checks that `args` has exactly one or two values
 *
 * @function oneOrTwoArgumentValidator
 * @param args {array}
 * @return {string|undefined}
 */
var oneOrTwoArgumentValidator = exports.oneOrTwoArgumentValidator = function oneOrTwoArgumentValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (args.length < 1 || args.length > 2) {
        return _commandParserMessages.ERROR_MESSAGE.ONE_OR_TWO_ARG_LENGTH;
    }
};

/**
 * Checks that `args` has exactly one, two or three values
 *
 * @function oneToThreeArgumentsValidator
 * @param args {array}
 * @return {string|undefined}
 */
var oneToThreeArgumentsValidator = exports.oneToThreeArgumentsValidator = function oneToThreeArgumentsValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (args.length === 0 || args.length > 3) {
        return _commandParserMessages.ERROR_MESSAGE.ONE_TO_THREE_ARG_LENGTH;
    }
};

/**
 * Checks that `args` has exactly one or three values
 *
 * @function oneOrThreeArgumentsValidator
 * @param args {array}
 * @return {string|undefined}
 */
var oneOrThreeArgumentsValidator = exports.oneOrThreeArgumentsValidator = function oneOrThreeArgumentsValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (args.length !== 1 && args.length !== 3) {
        return _commandParserMessages.ERROR_MESSAGE.ONE_OR_THREE_ARG_LENGTH;
    }
};

/**
 * Checks that args is the required length and the data is of the correct type
 *
 * ```
 * Allowed argument shapes:
 * - ['030']
 * - ['030', 'expedite']
 * - ['030', 'x']
 * ```
 *
 * @function altitudeValidator
 * @param args {array}
 * @return {string|undefined}
 */
var altitudeValidator = exports.altitudeValidator = function altitudeValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var hasLengthError = oneOrTwoArgumentValidator(args);

    if (hasLengthError) {
        return hasLengthError;
    }

    if (args.length === 2 && _commandMap.EXPEDITE.indexOf(args[1]) === -1) {
        return _commandParserMessages.ERROR_MESSAGE.ALTITUDE_EXPEDITE_ARG;
    }
};

/**
 * Verifies a list of fix names are all strings and that there is at least one
 *
 * @function fixValidator
 * @param args {array}
 * @return {array<string>}
 */
var fixValidator = exports.fixValidator = function fixValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var hasTypeError = void 0;

    if (args.length < 1) {
        return _commandParserMessages.ERROR_MESSAGE.ONE_OR_MORE_ARG_LENGTH;
    }

    (0, _forEach3.default)(args, function (arg) {
        if (!(0, _isString3.default)(arg) && !hasTypeError) {
            hasTypeError = _commandParserMessages.ERROR_MESSAGE.MUST_BE_STRING;
        }
    });

    if (hasTypeError) {
        return hasTypeError;
    }
};

/**
 * Returns true if value is one of `left / l / right / r`
 *
 * @function isValidDirectionString
 * @param value {string}
 * @return {boolean}
 */
var isValidDirectionString = exports.isValidDirectionString = function isValidDirectionString(value) {
    return value === 'left' || value === 'l' || value === 'right' || value === 'r';
};

/**
 * Checks that args is the required length and the data is of the correct type for the number of arguments
 *
 * ```
 * Allowed arguments shapes:
 * - ['180']
 * - ['left', '180']
 * - ['l', '180']
 * - ['left', '80']
 * - ['l', '80']
 * ```
 *
 * @function headingValidator
 * @param args {array}
 * @return {string|undefined}
 */
var headingValidator = exports.headingValidator = function headingValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    var length = args.length;
    var hasLengthError = oneOrTwoArgumentValidator(args);
    var numberFromString = void 0;

    if (hasLengthError) {
        return hasLengthError;
    }

    switch (length) {
        case 1:
            numberFromString = (0, _unitConverters.convertStringToNumber)(args[0]);

            if ((0, _isNaN3.default)(numberFromString)) {
                return _commandParserMessages.ERROR_MESSAGE.HEADING_MUST_BE_NUMBER;
            }

            break;
        case 2:
            numberFromString = (0, _unitConverters.convertStringToNumber)(args[1]);

            if (!isValidDirectionString(args[0])) {
                return _commandParserMessages.ERROR_MESSAGE.INVALID_DIRECTION_STRING;
            }

            if (isNaN(numberFromString)) {
                return _commandParserMessages.ERROR_MESSAGE.HEADING_MUST_BE_NUMBER;
            }

            break;
        // default case is included only for semtantics, this should not ever be reachable
        // istanbul ignore next
        default:
            throw new Error('An error ocurred parsing the Heading arguments');
    }
};

/**
 * Checks that args is the required length and the data is of the correct type
 *
 * ```
 * Allowed argument shapes:
 * - ['dumba']
 * - ['dumba', 'left', '2min']
 * - ['dumba', 'left', '2nm']
 * - ['dumba', 'right', '2min']
 * - ['dumba', 'right', '2nm']
 * ```
 *
 * @function holdValidator
 * @param args {array}
 * @return {array<string>}
 */
var holdValidator = exports.holdValidator = function holdValidator() {
    var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

    if (args.length > 3) {
        return _commandParserMessages.ERROR_MESSAGE.ZERO_TO_THREE_ARG_LENGTH;
    }

    for (var i = 0; i < args.length; i++) {
        if (!(0, _isString3.default)(args[i])) {
            return _commandParserMessages.ERROR_MESSAGE.MUST_BE_STRING;
        }
    }
};

},{"../utilities/unitConverters":595,"./commandMap":568,"./commandParserMessages":569,"lodash/forEach":468,"lodash/isNaN":484,"lodash/isString":489}],567:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.COMMAND_DEFINITION = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**
                                                                                                                                                                                                                                                                   * Root commands defined in the `commandMap` have a matching definition defined here. This definition
                                                                                                                                                                                                                                                                   * give us access to vaildate and parse functions. Some commands don't require either function and simply
                                                                                                                                                                                                                                                                   * pass the arguments through via `noop`. Other commands commands have very unique demands for how
                                                                                                                                                                                                                                                                   * arguments are formatted, these functions let us validate and parse on a case by case basis.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * Keys are lowercased here so they can be accessed programatically using input string segments
                                                                                                                                                                                                                                                                   * that are converted to lowercase for ease of comparison.
                                                                                                                                                                                                                                                                   *
                                                                                                                                                                                                                                                                   * @fileoverview
                                                                                                                                                                                                                                                                   */


var _unitConverters = require('../utilities/unitConverters');

var _argumentValidators = require('./argumentValidators');

var _argumentParsers = require('./argumentParsers');

/**
 * A no-op function used for command definitions that do not need a parser
 *
 * This function will immediately return any arguments passed to it and is
 * used in place of an actual parser. this way `command.parse` can still
 * be called even with commands that don't need to be parsed.
 *
 * @function noop
 * @param args {*}
 * @return {*}
 */
var noop = function noop(args) {
    return args;
};

/**
 * System and Aircraft command definitions that accept zero arguments
 *
 * @property ZERO_ARG_COMMANDS
 * @type {Object}
 * @final
 */
var ZERO_ARG_COMMANDS = {
    // system commands
    auto: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    clear: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    pause: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    tutorial: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    version: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },

    // Aircraft commands
    abort: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    clearedAsFiled: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    climbViaSID: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    debug: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    delete: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    descendViaSTAR: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    flyPresentHeading: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    sayRoute: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    },
    takeoff: {
        validate: _argumentValidators.zeroArgumentsValidator,
        parse: noop
    }
};

/**
 * System and Aircraft commands that accept a single argument
 *
 * these commands accept a single argument and may require further parsing, eg: (string -> number)
 *
 * @property SINGLE_ARG_COMMANDS
 * @type {Object}
 * @final
 */
var SINGLE_ARG_COMMANDS = {
    '`': {
        validate: _argumentValidators.singleArgumentValidator,
        // calling method is expecting an array with values that will get spread later, thus we purposly
        // return an array here
        parse: function parse(args) {
            return [(0, _unitConverters.convertStringToNumber)(args)];
        }
    },
    airport: {
        validate: _argumentValidators.singleArgumentValidator,
        parse: noop
    },
    rate: {
        validate: _argumentValidators.singleArgumentValidator,
        // calling method is expecting an array with values that will get spread later, thus we purposly
        // return an array here
        parse: function parse(args) {
            return [(0, _unitConverters.convertStringToNumber)(args)];
        }
    },
    timewarp: {
        validate: _argumentValidators.singleArgumentValidator,
        // calling method is expecting an array with values that will get spread later, thus we purposly
        // return an array here
        parse: function parse(args) {
            return [(0, _unitConverters.convertStringToNumber)(args)];
        }
    },

    direct: {
        validate: _argumentValidators.singleArgumentValidator,
        parse: noop
    },
    land: {
        validate: _argumentValidators.singleArgumentValidator,
        // TODO: split this out to custom parser once the null value is defined
        parse: function parse(args) {
            return [null, args[0]];
        }
    },
    moveDataBlock: {
        validate: _argumentValidators.singleArgumentValidator,
        parse: noop
    },
    route: {
        validate: _argumentValidators.singleArgumentValidator,
        parse: noop
    },
    reroute: {
        validate: _argumentValidators.singleArgumentValidator,
        parse: noop
    },
    sid: {
        validate: _argumentValidators.singleArgumentValidator,
        parse: noop
    },
    speed: {
        validate: _argumentValidators.singleArgumentValidator,
        // calling method is expecting an array with values that will get spread later, thus we purposly
        // return an array here
        parse: function parse(arg) {
            return [(0, _unitConverters.convertStringToNumber)(arg)];
        }
    },
    star: {
        validate: _argumentValidators.singleArgumentValidator,
        parse: noop
    }
};

/**
 * System and Aircraft commands that accept arguments specific to the command
 *
 * These definitions will likely reference functions for validate and parse that are specific only
 * to one command
 *
 * @property CUSTOM_ARG_COMMANDS
 * @type {Object}
 * @final
 */
var CUSTOM_ARG_COMMANDS = {
    taxi: {
        validate: _argumentValidators.zeroOrOneArgumentValidator,
        parse: noop
    },

    // these commands have specific argument requirements and may need to be parsed
    // into the correct type (sting -> number)
    altitude: {
        validate: _argumentValidators.altitudeValidator,
        parse: _argumentParsers.altitudeParser
    },
    fix: {
        validate: _argumentValidators.fixValidator,
        parse: noop
    },
    heading: {
        validate: _argumentValidators.headingValidator,
        parse: _argumentParsers.headingParser
    },
    hold: {
        validate: _argumentValidators.holdValidator,
        parse: _argumentParsers.holdParser
    }
};

/**
 * Single exported constant that combines all the definitions above
 *
 * @property COMMAND_DEFINITION
 * @type {Object}
 * @final
 */
var COMMAND_DEFINITION = exports.COMMAND_DEFINITION = _extends({}, ZERO_ARG_COMMANDS, SINGLE_ARG_COMMANDS, CUSTOM_ARG_COMMANDS);

},{"../utilities/unitConverters":595,"./argumentParsers":565,"./argumentValidators":566}],568:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

/**
 * List of System Commands
 *
 * When a command is parsed, the value here will be used for the `name` property
 * of the `CommandParser`
 *
 * @property SYSTEM_COMMANDS
 * @type {Object}
 * @final
 */
var SYSTEM_COMMANDS = exports.SYSTEM_COMMANDS = {
  auto: 'auto',
  clear: 'clear',
  pause: 'pause',
  tutorial: 'tutorial',
  version: 'version',

  // single arg commands
  '`': 'moveDataBlock',
  airport: 'airport',
  rate: 'rate',
  timewarp: 'timewarp',
  transmit: 'transmit'
};

/**
 * Some commands are converted to unicode (to provide arrow characters) for specific shortkeys
 *
 * This maps those unicode values, converted to a string, to the correct root command
 *
 * @property UNICODE_COMMANDS
 * @type {Object}
 * @final
 */
var UNICODE_COMMANDS = {
  '\\u2B61': 'altitude',
  '\\u2B63': 'altitude',
  '\\u2BA2': 'heading',
  '\\u2BA3': 'heading',
  '\\u2B50': 'land'
};

/**
 * Complete map of commands
 *
 * This list includes both System and Unicode commands, as well as all the various aircraft
 * commands.
 *
 * Aliased commands map to a single root command that is shared among all aliases. The values
 * here then map to a `COMMAND_DEFINITION` which contains `validate` and `parse` functions for
 * each root command. Some commands have very unique demands for how arguments are formatted,
 * those functions let us do that on a case by case basis.
 *
 * Keys are lowercased here so they can be accessed programatically using input string segments
 * that are converted to lowercase for ease of comparison.
 *
 * @propery COMMAND_MAP
 * @type {Object}
 * @final
 */
var COMMAND_MAP = exports.COMMAND_MAP = _extends({}, SYSTEM_COMMANDS, UNICODE_COMMANDS, {

  taxi: 'taxi',
  wait: 'taxi',
  w: 'taxi',
  sid: 'sid',
  star: 'star',
  clearedAsFiled: 'clearedAsFiled',
  caf: 'clearedAsFiled',
  climbViaSID: 'climbViaSID',
  cvs: 'climbViaSID',
  descendViaSTAR: 'descendViaSTAR',
  dvs: 'descendViaSTAR',
  climb: 'altitude',
  c: 'altitude',
  descend: 'altitude',
  d: 'altitude',
  altitude: 'altitude',
  a: 'altitude',
  takeoff: 'takeoff',
  to: 'takeoff',
  cto: 'takeoff',
  fph: 'flyPresentHeading',
  heading: 'heading',
  fh: 'heading',
  h: 'heading',
  turn: 'heading',
  t: 'heading',
  speed: 'speed',
  slow: 'speed',
  sp: 'speed',
  '+': 'speed',
  '-': 'speed',
  ils: 'land',
  i: 'land',
  land: 'land',
  l: 'land',
  '*': 'land',
  reroute: 'reroute',
  rr: 'reroute',
  route: 'route',
  sr: 'sayRoute',
  f: 'fix',
  fix: 'fix',
  track: 'fix',
  direct: 'direct',
  pd: 'direct',
  dct: 'direct',
  abort: 'abort',
  hold: 'hold',
  delete: 'delete',
  del: 'delete',
  kill: 'delete'
});

/**
 * @property EXPEDITE
 * @type {array}
 * @final
 */
var EXPEDITE = exports.EXPEDITE = ['expedite', 'x'];

},{}],569:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/* eslint-disable max-len */
/**
 * @property INVALID_ARG
 * @type {string}
 * @final
 */
var INVALID_ARG = 'Invalid argument';

/**
 * @property INVALID_ARG_LENGTH
 * @type {string}
 * @final
 */
var INVALID_ARG_LENGTH = INVALID_ARG + ' length';

/**
 * Encapsulation of error messaging used with `argumentValidators` functions
 *
 * @property ERROR_MESSAGE
 * @type {Object}
 * @final
 */
var ERROR_MESSAGE = exports.ERROR_MESSAGE = {
  ZERO_ARG_LENGTH: INVALID_ARG_LENGTH + '. Expected exactly zero arguments',
  SINGLE_ARG_LENGTH: INVALID_ARG_LENGTH + '. Expected exactly one argument',
  ZERO_OR_ONE_ARG_LENGTH: INVALID_ARG_LENGTH + '. Expected zero or one argument',
  ZERO_TO_THREE_ARG_LENGTH: INVALID_ARG_LENGTH + '. Expected zero to three arguments',
  ONE_OR_MORE_ARG_LENGTH: INVALID_ARG_LENGTH + '. Expected one or more arguments',
  ONE_OR_TWO_ARG_LENGTH: INVALID_ARG_LENGTH + '. Expected one or two arguments',
  ONE_TO_THREE_ARG_LENGTH: INVALID_ARG_LENGTH + '. Expected one, two, or three arguments',
  ONE_OR_THREE_ARG_LENGTH: INVALID_ARG_LENGTH + '. Expected one or three arguments',
  ALTITUDE_EXPEDITE_ARG: INVALID_ARG + '. Altitude accepts only "expedite" or "x" as a second argument',
  HEADING_MUST_BE_NUMBER: INVALID_ARG + '. Heading must be a number',
  MUST_BE_STRING: INVALID_ARG + '. Must be a string',
  INVALID_DIRECTION_STRING: INVALID_ARG + '. Expected one of \'left / l / right / r\' as the first argument when passed three arguments',
  HEADING_ACCEPTS_BOOLEAN_AS_THIRD_ARG: INVALID_ARG + '. Heading accepts a boolean for the third argument when passed three arguments'
};

},{}],570:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * @property FLIGHT_MODES
 * @type {Object}
 * @final
 */
var FLIGHT_MODES = exports.FLIGHT_MODES = {
    // - 'apron' is the initial status of a new departing plane. After
    //   the plane is issued the 'taxi' command, the plane transitions to
    //   'taxi' mode
    // - 'taxi' describes the process of getting ready for takeoff. After
    //   a delay, the plane becomes ready and transitions into 'waiting' mode
    // - 'waiting': the plane is ready for takeoff and awaits clearence to
    //   take off
    // - 'takeoff' is assigned to planes in the process of taking off. These
    //   planes are still on the ground or have not yet reached the minimum
    //   altitude
    // - 'cruse' describes, that a plane is currently in flight and
    //   not following an ILS path. Planes of category 'arrival' entering the
    //   playing field also have this state. If an ILS path is picked up, the
    //   plane transitions to 'landing'
    // - 'landing' the plane is following an ILS path or is on the runway in
    //   the process of stopping. If an ILS approach or a landing is aborted,
    //   the plane reenters 'cruise' mode
    APRON: 'apron',
    TAXI: 'taxi',
    WAITING: 'waiting',
    TAKEOFF: 'takeoff',
    CRUISE: 'cruise',
    LANDING: 'landing'
};

/**
 * @property FLIGHT_CATEGORY
 * @type {Object}
 * @final
 */
var FLIGHT_CATEGORY = exports.FLIGHT_CATEGORY = {
    ARRIVAL: 'arrival',
    DEPARTURE: 'departure'
};

/**
 * @property WAYPOINT_NAV_MODE
 * @type {Object}
 * @final
 */
var WAYPOINT_NAV_MODE = exports.WAYPOINT_NAV_MODE = {
    FIX: 'fix',
    HEADING: 'heading',
    HOLD: 'hold',
    RWY: 'rwy'
};

/**
 * Enumeration of possible FLight Plan Leg types.
 *
 * @property FP_LEG_TYPE
 * @type {Object}
 * @final
 */
var FP_LEG_TYPE = exports.FP_LEG_TYPE = {
    SID: 'sid',
    STAR: 'star',
    IAP: 'iap',
    AWY: 'awy',
    FIX: 'fix',
    MANUAL: '[manual]'
};

},{}],571:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @property AIRPORT_CONSTANTS
 * @type {Object}
 * @final
 */
var AIRPORT_CONSTANTS = exports.AIRPORT_CONSTANTS = {
  /**
   * @property DEFAULT_SPAWN_ALTITUDE_MIN
   * @type {number}
   * @final
   */
  DEFAULT_SPAWN_ALTITUDE_MIN: 10000,

  /**
   * @property DEFAULT_SPAWN_ALTITUDE_MAX
   * @type {number}
   * @final
   */
  DEFAULT_SPAWN_ALTITUDE_MAX: 10000,

  /**
   * @property DEFAULT_SPAWN_AIRCRAFT_SPEED_KTS
   * @type {number}
   * @final
   */
  DEFAULT_SPAWN_AIRCRAFT_SPEED_KTS: 250,

  /**
   * @property MIN_ENTRAIL_DISTANCE_NM
   * @type {number}
   * @final
   */
  MIN_ENTRAIL_DISTANCE_NM: 5.5
};

},{}],572:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
/* eslint-disable max-len, import/prefer-default-export */
/**
 * Name enumeration of available game options
 *
 * @property GAME_OPTION_NAMES
 * @type {Object}
 * @final
 */
var GAME_OPTION_NAMES = exports.GAME_OPTION_NAMES = {
    CONTROL_METHOD: 'controlMethod',
    DRAW_PROJECTED_PATHS: 'drawProjectedPaths',
    SIMPLIFY_SPEEDS: 'simplifySpeeds',
    SOFT_CEILING: 'softCeiling'
};

/**
 * User options
 *
 * These options are presented in a modal and are stored in localStorage
 *
 * @property GAME_OPTION_VALUES
 * @type {array<object>}
 * @final
 */
var GAME_OPTION_VALUES = exports.GAME_OPTION_VALUES = [{
    name: GAME_OPTION_NAMES.CONTROL_METHOD,
    defaultValue: 'classic',
    description: 'Control Method',
    type: 'select',
    data: [['Classic', 'classic'], ['Arrow Keys', 'arrows']]
}, {
    name: GAME_OPTION_NAMES.DRAW_PROJECTED_PATHS,
    defaultValue: 'selected',
    description: 'Draw aircraft projected path',
    type: 'select',
    data: [['Always', 'always'], ['Selected', 'selected'], ['Never', 'never']]
}, {
    name: GAME_OPTION_NAMES.SIMPLIFY_SPEEDS,
    defaultValue: 'yes',
    description: 'Use simplified airspeeds',
    help: 'Controls use of a simplified calculation which results in aircraft always moving across the ground at the speed assigned.  In reality aircraft will move faster as they increase altitude.',
    type: 'select',
    data: [['Yes', 'yes'], ['No', 'no']]
}, {
    name: GAME_OPTION_NAMES.SOFT_CEILING,
    defaultValue: 'no',
    description: 'Allow departures via climb',
    help: 'Normally aircraft departs the airspace by flying beyond the horizontal bounds.  If set to yes, aircraft may also depart the airspace by climbing above it.',
    type: 'select',
    data: [['Yes', 'yes'], ['No', 'no']]
}];

},{}],573:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Commonly used time conversion rates
 *
 * @property TIME
 * @type {Object}
 * @final
 */
var TIME = exports.TIME = {
    ONE_HOUR_IN_SECONDS: 3600,
    ONE_HOUR_IN_MINUTES: 60,
    ONE_HOUR_IN_MILLISECONDS: 3600000,
    ONE_MINUTE_IN_HOURS: 1 / 60,
    ONE_MINUTE_IN_SECONDS: 60,
    ONE_MINUTE_IN_MILLISECONDS: 60000,
    ONE_SECOND_IN_HOURS: 1 / 3600,
    ONE_SECOND_IN_MINUTES: 1 / 60,
    ONE_SECOND_IN_MILLISECONDS: 1000,
    ONE_MILLISECOND_IN_HOURS: 1 / 3600000,
    ONE_MILLISECOND_IN_MINUTES: 1 / 60000,
    ONE_MILLISECOND_IN_SECONDS: 1 / 1000
};

/**
 * Regular expressions
 *
 * @property REGEX
 * @type {Object}
 * @final
 */
var REGEX = exports.REGEX = {
    COMPASS_DIRECTION: /^[NESW]/,
    SW: /[SW]/,
    LAT_LONG: /^([NESW])(\d+(\.\d+)?)([d °](\d+(\.\d+)?))?([m '](\d+(\.\d+)?))?$/,
    UNICODE: /[^\u0000-\u00ff]/
};

},{}],574:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * @property LOG
 * @type {Object}
 * @final
 */
var LOG = exports.LOG = {
    DEBUG: 0,
    INFO: 1,
    WARNING: 2,
    ERROR: 3,
    FATAL: 4
};

},{}],575:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SELECTORS = exports.IDS = exports.CLASSNAMES = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _mapValues2 = require('lodash/mapValues');

var _mapValues3 = _interopRequireDefault(_mapValues2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * CSS classnames used throught the app.
 *
 * @property CLASSNAMES
 * @type {Object}
 * @final
 */
var CLASSNAMES = exports.CLASSNAMES = {
    ACTIVE: 'active',
    AIRCRAFT: 'aircraft',
    ALL_SET: 'allSet',
    ALTITUDE: 'altitude',
    ARRIVAL: 'arrival',
    CALLSIGN: 'callsign',
    CONTROL: 'control',
    DEPARTURE: 'departure',
    DESTINATION: 'destination',
    FAST_FORWARDS: 'fast-forwards',
    FOLLOWING_STAR: 'followingSTAR',
    HEADING: 'heading',
    HIDDEN: 'hidden',
    HOLD: 'hold',
    LEFT: 'left',
    LOOKING_GOOD: 'lookingGood',
    MESSAGE: 'message',
    NEGATIVE: 'negative',
    NEXT: 'next',
    NOT_SELECTABLE: 'notSelectable',
    OPEN: 'open',
    PAUSED: 'paused',
    PAUSE_TOGGLE: 'pause-toggle',
    PREV: 'prev',
    RIGHT: 'right',
    RUNWAY: 'runway',
    SPEECH_TOGGLE: 'speech-toggle',
    SPEED: 'speed',
    SPEED_2: 'speed-2',
    SPEED_5: 'speed-5',
    STRIP: 'strip',
    SWITCH_AIRPORT: 'switch-airport',
    TOGGLE_LABELS: 'toggle-labels',
    TOGGLE_RESTRICTED_AREAS: 'toggle-restricted-areas',
    TOGGLE_TERRAIN: 'toggle-terrain',
    TOGGLE_TUTORIAL: 'toggle-tutorial',
    TOGGLE_SIDS: 'toggle-sids',
    WARN: 'warn',
    WARNING_BUTTON: 'warning-button'
};

/**
 * CSS IDs used throughout the app.
 *
 * @property SELECTOR_IDS
 * @type {Object}
 * @final
 */
var IDS = exports.IDS = {
    AIRPORT_LIST: 'airport-list',
    AIRPORT_LIST_NOTES: 'airport-list-notes',
    AIRPORT_SWITCH: 'airport-switch',
    CANVASES: 'canvases',
    CLOCK: 'clock',
    COMMAND: 'command',
    LOADING: 'loading',
    LOADING_INDICATOR: 'loadingIndicator',
    LOG: 'log',
    NAVAIDS_CANVAS: 'navaids-canvas',
    OPTIONS_DIALOG: 'options-dialog',
    PAUSED: 'paused',
    TOGGLE_OPTIONS: 'toggle-options',
    TUTORIAL: 'tutorial',
    SCORE: 'score',
    SIDEBAR: 'sidebar',
    STRIPS: 'strips'
};

/**
 * Take a classname string and return a classname selector that can be used by jQuery to find an HTML Element.
 *
 * @function buildSelectorsFromClassnames
 * @return {object}
 */
var buildSelectorsFromClassnames = function buildSelectorsFromClassnames() {
    var classnameSelectors = (0, _mapValues3.default)(CLASSNAMES, function (value) {
        return '.' + value;
    });

    return classnameSelectors;
};

/**
 *
 * @function buildSelectorsFromIds
 * @return {object}
 */
var buildSelectorsFromIds = function buildSelectorsFromIds() {
    var idSelectors = (0, _mapValues3.default)(IDS, function (value) {
        return '#' + value;
    });

    return idSelectors;
};

/**
 * @property DOM_SELECTORS
 * @type {Object}
 * @final
 */
var DOM_SELECTORS = _extends({}, buildSelectorsFromClassnames(), buildSelectorsFromIds());

/**
 * Combinator constant.
 *
 * Allows for a single import that has access to both CLASSNAMES, IDS and DOM_SELECTORS
 *
 * @property SELECTORS
 * @type {Object}
 * @final
 */
var SELECTORS = exports.SELECTORS = {
    CLASSNAMES: CLASSNAMES,
    IDS: IDS,
    DOM_SELECTORS: DOM_SELECTORS
};

},{"lodash/mapValues":497}],576:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @property STORAGE_KEY
 * @type {Object}
 * @final
 */
var STORAGE_KEY = exports.STORAGE_KEY = {
  ATC_SCALE: 'atc-scale',
  ATC_LAST_AIRPORT: 'atc-last-airport',
  ATC_SPEECH_ENABLED: 'atc-speech-enabled',
  FIRST_RUN_TIME: 'first-run-time'
};

},{}],577:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _LoadableContentModel = require('./LoadableContentModel');

var _LoadableContentModel2 = _interopRequireDefault(_LoadableContentModel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Asynchronous JSON asset loading framework.
 *
 * Allows queueing assets to be loaded, assets may queued at a higher
 * priority by specifying the `immediate` option.  All assets with the
 * `immediate` option will be loaded before other assets.
 *
 * Events:
 *   startLoading - When an asset start being loaded, asset url as data
 *   stopLoading - When the last asset in the queue is downloaded
 *
 * Example:
 *  var promise = zlsa.atc.loadAsset({url: 'assets/aircraft/b747.json'});
 *
 * @module zlsa.atc.loadAsset
 */
/**
* Implementation of the queueing
*/
var ContentQueueClass = function () {
    function ContentQueueClass(loadingView) {
        _classCallCheck(this, ContentQueueClass);

        this.loadingView = loadingView;
        this.isLoading = false;
        this.lowPriorityQueue = [];
        this.highPriorityQueue = [];
        this.queuedContent = {};
    }

    /**
     * Adds or updates a piece of content
     *
     * Supports a url becoming an `immediate` load
     *
     * @for ContentQueue
     * @method add
     * @param options {object}
     * @return {Promise}
     */


    _createClass(ContentQueueClass, [{
        key: 'add',
        value: function add(options) {
            var c = new _LoadableContentModel2.default(options);

            if (c.url in this.queuedContent) {
                c = this.queuedContent[c.url];

                if (c.immediate && !this.queuedContent[c.url].immediate) {
                    var idx = _jquery2.default.inArray(c.url, this.lowPriorityQueue);

                    if (idx > -1) {
                        this.highPriorityQueue.push(this.lowPriorityQueue.splice(idx, 1));
                    }
                }
            } else {
                this.queuedContent[c.url] = c;

                if (c.immediate) {
                    this.highPriorityQueue.push(c.url);
                } else {
                    this.lowPriorityQueue.push(c.url);
                }
            }

            if (!this.isLoading) {
                this.startLoad();
            }

            return c.deferred.promise();
        }

        /**
         * @for ContentQueue
         * @method startLoad
         * @return {boolean}
         */

    }, {
        key: 'startLoad',
        value: function startLoad() {
            if (this.highPriorityQueue.length) {
                this.load(this.highPriorityQueue.shift());

                return true;
            } else if (this.lowPriorityQueue.length) {
                this.load(this.lowPriorityQueue.shift());

                return true;
            }

            return false;
        }

        /**
         * @for contentQueue
         * @method load
         * @param url {string}
         * @return {Promise}
         */

    }, {
        key: 'load',
        value: function load(url) {
            var _this = this;

            var c = this.queuedContent[url];
            this.loadingView.startLoad(c.url);

            _jquery2.default.getJSON(c.url).done(function (data, textStatus, jqXHR) {
                c.deferred.resolve(data, textStatus, jqXHR);
            }).fail(function (jqXHR, textStatus, errorThrown) {
                c.deferred.reject(jqXHR, textStatus, errorThrown);
            }).always(function () {
                delete _this.queuedContent[c.url];

                if (!_this.startLoad()) {
                    _this.loadingView.stopLoad();
                }
            });
        }
    }]);

    return ContentQueueClass;
}();

exports.default = ContentQueueClass;

},{"./LoadableContentModel":578,"jquery":296}],578:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Simple container for a given piece of content
 *
 * @class LoadableContentModel
 */
var LoadableContentModel = function LoadableContentModel(options) {
    _classCallCheck(this, LoadableContentModel);

    this.url = options.url;
    this.immediate = (0, _get3.default)(options, 'immediate', false);
    this.type = 'json';
    this.deferred = _jquery2.default.Deferred();
};

exports.default = LoadableContentModel;

},{"jquery":296,"lodash/get":469}],579:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _radioUtilities = require('../utilities/radioUtilities');

var _selectors = require('../constants/selectors');

var _globalConstants = require('../constants/globalConstants');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Manages a clock that stays in sync with the current game time
 * @class GameClockView
 */
var GameClockView = function () {
    /**
     * @for GameClockView
     * @constructor
     */
    function GameClockView($element) {
        _classCallCheck(this, GameClockView);

        this.$element = $element;
        this.startTime = 0;
        this.time = 0;

        return this._init($element);
    }

    /**
    * Get current time in the user's time zone
    * @for GameClockView
    * @property realWorldCurrentLocalTime
    * @return {number} ms since 01/01/1970, 00:00:00 (user's time zone)
    */


    _createClass(GameClockView, [{
        key: 'destroy',


        /**
        * @for GameClockView
        * @method destroy
        * @chainable
        */
        value: function destroy() {
            this.$element = null;
            this.startTime = 0;
            this.time = 0;

            return this;
        }

        /**
        * Generates a string of the current game time in a human-readable format
        * @for GameClockView
        * @property timeString
        * @return clockTime {string} current game time formatted like '03:44:17'
        */

    }, {
        key: 'generateCurrentTimeString',
        value: function generateCurrentTimeString() {
            var gameTime = window.gameController.game.time;
            var clockDate = new Date(this.startTime + gameTime * _globalConstants.TIME.ONE_SECOND_IN_MILLISECONDS);
            var hours = (0, _radioUtilities.digits_integer)(clockDate.getHours(), 2);
            var minutes = (0, _radioUtilities.digits_integer)(clockDate.getMinutes(), 2);
            var seconds = (0, _radioUtilities.digits_integer)(clockDate.getSeconds(), 2);
            var clockTime = hours + ':' + minutes + ':' + seconds;

            return clockTime;
        }

        /**
        * Updates the stored time and displayed time in webpage
        * @for GameClockView
        * @method update
        */

    }, {
        key: 'update',
        value: function update() {
            this._tick();
            this._render();
        }

        /**
        * @for GameClockView
        * @method _init
        * @private
        */

    }, {
        key: '_init',
        value: function _init($element) {
            this.$element = $element.find(_selectors.SELECTORS.DOM_SELECTORS.CLOCK);
            this.$element.addClass(_selectors.SELECTORS.CLASSNAMES.NOT_SELECTABLE);
            this.startTime = this.realWorldCurrentZuluTime;

            return this;
        }

        /**
        * Updates the DOM with the new game time
        * @for GameClockView
        * @method _render
        * @private
        */

    }, {
        key: '_render',
        value: function _render() {
            this.$element.text(this.generateCurrentTimeString());
        }

        /**
        * Updates the time stored in the clock
        * @for GameClockView
        * @method _tick
        * @private
        */

    }, {
        key: '_tick',
        value: function _tick() {
            var elapsedTime = window.gameController.game.time * _globalConstants.TIME.ONE_SECOND_IN_MILLISECONDS;
            this.time = this.startTime + elapsedTime;
        }
    }, {
        key: 'realWorldCurrentLocalTime',
        get: function get() {
            return new Date().getTime();
        }

        /**
        * Get current zulu time in milliseconds
        * @for GameClockView
        * @property realWorldCurrentZuluTime
        * @return utc {number} ms since 01/01/1970, 00:00:00 UTC
        */

    }, {
        key: 'realWorldCurrentZuluTime',
        get: function get() {
            var date = new Date();
            var utc = date.getTime() + date.getTimezoneOffset() * _globalConstants.TIME.ONE_MINUTE_IN_MILLISECONDS;

            return utc;
        }
    }]);

    return GameClockView;
}();

exports.default = GameClockView;

},{"../constants/globalConstants":573,"../constants/selectors":575,"../utilities/radioUtilities":593}],580:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.GAME_EVENTS = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable camelcase, no-underscore-dangle, no-mixed-operators, func-names, object-shorthand,
no-undef, class-methods-use-this */


var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _GameOptions = require('./GameOptions');

var _GameOptions2 = _interopRequireDefault(_GameOptions);

var _core = require('../math/core');

var _selectors = require('../constants/selectors');

var _globalConstants = require('../constants/globalConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Temporary const declaration here to attach to the window AND use as internal property
var game = {};

// TODO: Remember to move me to wherever the constants end up being moved to
/**
 * Definitions of point values for given game events
 * @type {Object}
 */
var GAME_EVENTS_POINT_VALUES = {
    AIRSPACE_BUST: -200,
    ARRIVAL: 10,
    COLLISION: -1000,
    DEPARTURE: 10,
    EXTREME_CROSSWIND_OPERATION: -15,
    EXTREME_TAILWIND_OPERATION: -75,
    GO_AROUND: -50,
    HIGH_CROSSWIND_OPERATION: -5,
    HIGH_TAILWIND_OPERATION: -25,
    ILLEGAL_APPROACH_CLEARANCE: -10,
    NOT_CLEARED_ON_ROUTE: -25,
    SEPARATION_LOSS: -200
};

/**
 * List of game events
 * @type {Object}
 */
var GAME_EVENTS = exports.GAME_EVENTS = {
    AIRSPACE_BUST: 'AIRSPACE_BUST',
    ARRIVAL: 'ARRIVAL',
    COLLISION: 'COLLISION',
    DEPARTURE: 'DEPARTURE',
    EXTREME_CROSSWIND_OPERATION: 'EXTREME_CROSSWIND_OPERATION',
    EXTREME_TAILWIND_OPERATION: 'EXTREME_TAILWIND_OPERATION',
    GO_AROUND: 'GO_AROUND',
    HIGH_CROSSWIND_OPERATION: 'HIGH_CROSSWIND_OPERATION',
    HIGH_TAILWIND_OPERATION: 'HIGH_TAILWIND_OPERATION',
    ILLEGAL_APPROACH_CLEARANCE: 'ILLEGAL_APPROACH_CLEARANCE',
    NOT_CLEARED_ON_ROUTE: 'NOT_CLEARED_ON_ROUTE',
    SEPARATION_LOSS: 'SEPARATION_LOSS'
};

/**
 * @class GameController
 */

var GameController = function () {
    /**
     * @constructor
     */
    function GameController(getDeltaTime) {
        _classCallCheck(this, GameController);

        this.getDeltaTime = getDeltaTime;
        this.game = game;
        this.game.paused = true;
        this.game.focused = true;
        this.game.speedup = 1;
        this.game.frequency = 1;
        this.game.time = 0;
        this.game.startTime = 0;
        this.game.delta = 0;
        this.game.events = {};
        this.game.timeouts = [];
        this.game.last_score = 0;
        this.game.score = 0;
        this.game.option = new _GameOptions2.default();
    }

    /**
     * @for GameController
     * @method init_pre
     */


    _createClass(GameController, [{
        key: 'init_pre',
        value: function init_pre() {
            this.game_initializeBlurFunctions();
            this.events_initializeEventCount();
        }

        /**
        * Initialize `GameController.events` to contain appropriate properties with values of 0
        * @for GameController
        * @method events_initializeEventCount
        * @return
        */

    }, {
        key: 'events_initializeEventCount',
        value: function events_initializeEventCount() {
            var _this = this;

            (0, _forEach3.default)(GAME_EVENTS, function (gameEvent, key) {
                _this.game.events[key] = 0;
            });
        }

        /**
        * Record a game event to this.game.events, and update this.game.score
        * @for GameController
        * @method events_recordNew
        * @param gameEvent {String} one of the events listed in GAME_EVENTS
        */

    }, {
        key: 'events_recordNew',
        value: function events_recordNew(gameEvent) {
            if (!(0, _has3.default)(GAME_EVENTS, gameEvent)) {
                throw new TypeError('Expected a game event listed in GAME_EVENTS, but instead received ' + gameEvent);
            }

            this.game.events[gameEvent] += 1;
            this.game.score += GAME_EVENTS_POINT_VALUES[gameEvent];
        }

        /**
        * Initialize blur functions used during game pausing
        * @for GameController
        * @method game_initializeBlurFunctions
        * @return
        */

    }, {
        key: 'game_initializeBlurFunctions',
        value: function game_initializeBlurFunctions() {
            var _this2 = this;

            // Set blurring function
            (0, _jquery2.default)(window).blur(function () {
                _this2.game.focused = false;
            });

            // Set un-blurring function
            (0, _jquery2.default)(window).focus(function () {
                _this2.game.focused = true;
            });
        }

        /**
         * @for GameController
         * @method game_get_weighted_score
         */

    }, {
        key: 'game_get_weighted_score',
        value: function game_get_weighted_score() {
            var hoursPlayed = this.game_time() / _globalConstants.TIME.ONE_HOUR_IN_SECONDS;
            var scorePerHour = this.game.score / hoursPlayed;

            return scorePerHour;
        }

        /**
         * @for GameController
         * @method game_reset_score_and_events
         */

    }, {
        key: 'game_reset_score_and_events',
        value: function game_reset_score_and_events() {
            var _this3 = this;

            // Reset events
            (0, _forEach3.default)(this.game.events, function (gameEvent, key) {
                _this3.game.events[key] = 0;
            });

            // Reset score
            this.game.score = 0;
        }

        /**
         * @for GameController
         * @method game_timewarp_toggle
         */

    }, {
        key: 'game_timewarp_toggle',
        value: function game_timewarp_toggle() {
            var $fastForwards = (0, _jquery2.default)('.' + _selectors.SELECTORS.CLASSNAMES.FAST_FORWARDS);

            if (this.game.speedup === 5) {
                this.game.speedup = 1;

                $fastForwards.removeClass(_selectors.SELECTORS.CLASSNAMES.SPEED_5);
                $fastForwards.prop('title', 'Set time warp to 2');
            } else if (this.game.speedup === 1) {
                this.game.speedup = 2;

                $fastForwards.addClass(_selectors.SELECTORS.CLASSNAMES.SPEED_2);
                $fastForwards.prop('title', 'Set time warp to 5');
            } else {
                this.game.speedup = 5;

                $fastForwards.removeClass(_selectors.SELECTORS.CLASSNAMES.SPEED_2);
                $fastForwards.addClass(_selectors.SELECTORS.CLASSNAMES.SPEED_5);
                $fastForwards.prop('title', 'Reset time warp');
            }
        }

        /**
         * @for GameController
         * @method game_pause
         */

    }, {
        key: 'game_pause',
        value: function game_pause() {
            var $pauseToggle = (0, _jquery2.default)('.' + _selectors.SELECTORS.CLASSNAMES.PAUSE_TOGGLE);
            this.game.paused = true;

            $pauseToggle.addClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
            $pauseToggle.attr('title', 'Resume simulation');
            (0, _jquery2.default)('html').addClass(_selectors.SELECTORS.CLASSNAMES.PAUSED);
        }

        /**
         * @for GameController
         * @method game_unpause
         */

    }, {
        key: 'game_unpause',
        value: function game_unpause() {
            var $pauseToggle = (0, _jquery2.default)('.' + _selectors.SELECTORS.CLASSNAMES.PAUSE_TOGGLE);
            this.game.paused = false;

            $pauseToggle.removeClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
            $pauseToggle.attr('title', 'Pause simulation');
            (0, _jquery2.default)('html').removeClass(_selectors.SELECTORS.CLASSNAMES.PAUSED);
        }

        /**
         * @for GameController
         * @method game_pause_toggle
         */

    }, {
        key: 'game_pause_toggle',
        value: function game_pause_toggle() {
            // TODO: simplify if/else logic. should only need an if with an early exit
            if (this.game.paused) {
                this.game_unpause();
            } else {
                this.game_pause();
            }
        }

        /**
         * @for GameController
         * @method game_paused
         * @return
         */

    }, {
        key: 'game_paused',
        value: function game_paused() {
            return !this.game.focused || this.game.paused;
        }

        /**
         * @for GameController
         * @method game_time
         * @return {number}
         */

    }, {
        key: 'game_time',
        value: function game_time() {
            return this.game.time;
        }

        /**
         * @for GameController
         * @method game_delta
         * @return {number}
         */

    }, {
        key: 'game_delta',
        value: function game_delta() {
            return this.game.delta;
        }

        /**
         * @for GameController
         * @method game_speedup
         * @return
         */

    }, {
        key: 'game_speedup',
        value: function game_speedup() {
            return !this.game_paused() ? this.game.speedup : 0;
        }

        /**
         * @for GameController
         * @method game_timeout
         * @param func {function}
         * @pram delay {number}
         * @param that
         * @param data
         * @return gameTimeout
         */

    }, {
        key: 'game_timeout',
        value: function game_timeout(func, delay, that, data) {
            var gameTimeout = [func, this.game_time() + delay, data, delay, false, that];

            this.game.timeouts.push(gameTimeout);

            return gameTimeout;
        }

        /**
         * @for GameController
         * @method game_interval
         * @param func {function}
         * @pram delay {number}
         * @param that
         * @param data
         * @return to
         */

    }, {
        key: 'game_interval',
        value: function game_interval(func, delay, that, data) {
            var to = [func, this.game_time() + delay, data, delay, true, that];

            this.game.timeouts.push(to);

            return to;
        }

        /**
         * @for GameController
         * @method game_clear_timeout
         * @param gameTimeout
         */

    }, {
        key: 'game_clear_timeout',
        value: function game_clear_timeout(gameTimeout) {
            this.game.timeouts.splice(this.game.timeouts.indexOf(gameTimeout), 1);
        }

        /**
         * @for GameController
         * @method game_updateScore
         * @param score {number}
         */

    }, {
        key: 'game_updateScore',
        value: function game_updateScore(score) {
            var $score = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.SCORE);
            $score.text((0, _core.round)(score));

            if (score < -0.51) {
                $score.addClass(_selectors.SELECTORS.CLASSNAMES.NEGATIVE);
            } else {
                $score.removeClass(_selectors.SELECTORS.CLASSNAMES.NEGATIVE);
            }

            this.game.last_score = score;
        }

        /**
         * @for GameController
         * @method update_pre
         */

    }, {
        key: 'update_pre',
        value: function update_pre() {
            if (this.game.score !== this.game.last_score) {
                this.game_updateScore(this.game.score);
            }

            this.game.delta = Math.min(this.getDeltaTime() * this.game.speedup, 100);

            if (this.game_paused()) {
                this.game.delta = 0;
            } else {
                (0, _jquery2.default)('html').removeClass(_selectors.SELECTORS.CLASSNAMES.PAUSED);
            }

            this.game.time += this.game.delta;

            for (var i = this.game.timeouts.length - 1; i >= 0; i--) {
                var remove = false;
                var timeout = this.game.timeouts[i];

                if (this.game_time() > timeout[1]) {
                    timeout[0].call(timeout[5], timeout[2]);

                    if (timeout[4]) {
                        timeout[1] += timeout[3];
                    } else {
                        remove = true;
                    }
                }

                if (remove) {
                    this.game.timeouts.splice(i, 1);
                    i -= 1;
                }
            }
        }

        /**
         * @for GameController
         * @method complete
         */

    }, {
        key: 'complete',
        value: function complete() {
            this.game.paused = false;
        }
    }]);

    return GameController;
}();

exports.default = GameController;

},{"../constants/globalConstants":573,"../constants/selectors":575,"../math/core":584,"./GameOptions":581,"jquery":296,"lodash/forEach":468,"lodash/has":470}],581:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable camelcase, no-underscore-dangle, no-mixed-operators, func-names, object-shorthand */


var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _gameOptionConstants = require('../constants/gameOptionConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Set, store and retrieve game options.
 *
 * @class GameOptions
 */
var GameOptions = function () {
    /**
     * @for GameOptions
     * @constructor
     */
    function GameOptions() {
        _classCallCheck(this, GameOptions);

        this._options = {};

        this.addGameOptions();
    }

    /**
     * @for GameOptions
     * @method addGameOptions
     */


    _createClass(GameOptions, [{
        key: 'addGameOptions',
        value: function addGameOptions() {
            for (var i = 0; i < _gameOptionConstants.GAME_OPTION_VALUES.length; i++) {
                var option = _gameOptionConstants.GAME_OPTION_VALUES[i];

                this.addOption(option);
            }
        }

        /**
         * @for GameOptions
         * @method addOption
         */

    }, {
        key: 'addOption',
        value: function addOption(data) {
            var optionStorageName = 'zlsa.atc.option.' + data.name;
            this._options[data.name] = data;

            var dataName = data.defaultValue;
            if ((0, _has3.default)(localStorage, optionStorageName)) {
                dataName = localStorage[optionStorageName];
            }

            this[data.name] = dataName;
        }

        /**
         * @for GameOptions
         * @method getDescriptions
         */

    }, {
        key: 'getDescriptions',
        value: function getDescriptions() {
            return this._options;
        }

        /**
         * @for GameOptions
         * @method get
         * @param name {string}
         */

    }, {
        key: 'get',
        value: function get(name) {
            return this[name];
        }

        /**
         * @for GameOptions
         * @method set
         * @param name {string}
         * @param value
         */

    }, {
        key: 'set',
        value: function set(name, value) {
            localStorage['zlsa.atc.option.' + name] = value;
            this[name] = value;

            return value;
        }
    }]);

    return GameOptions;
}();

exports.default = GameOptions;

},{"../constants/gameOptionConstants":572,"lodash/has":470}],582:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('babel-polyfill');

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _App = require('./App');

var _App2 = _interopRequireDefault(_App);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable */
require('raf').polyfill();

/**
 * Entry point for the application.
 *
 * Provides a way to grab the `body` element of the document and pass it to the app.
 */
exports.default = function () {
  var airportLoadList = window.AIRPORT_LOAD_LIST;
  var $body = (0, _jquery2.default)('body');
  var app = new _App2.default($body, airportLoadList);
}();

},{"./App":519,"babel-polyfill":1,"jquery":296,"raf":517}],583:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.distanceToPoint = exports.radians_normalize = exports.degrees_normalize = exports.angle_offset = exports.tau = undefined;

var _core = require('./core');

var _unitConverters = require('../utilities/unitConverters');

/**
 * 2x Pi
 *
 * @function tau
 * @return {number}
 */
var tau = exports.tau = function tau() {
    return Math.PI * 2;
};

/**
 * Returns the angle difference between two headings
 *
 * @function angle_offset
 * @param {number} a     heading, in radians
 * @param {number} b     heading, in radians
 * @return {number}
 */
var angle_offset = exports.angle_offset = function angle_offset(a, b) {
    a = (0, _unitConverters.radiansToDegrees)(a);
    b = (0, _unitConverters.radiansToDegrees)(b);
    var invert = false;

    if (b > a) {
        invert = true;
        var temp = a;

        a = b;
        b = temp;
    }

    var offset = (0, _core.mod)(a - b, 360);
    if (offset > 180) {
        offset -= 360;
    }

    if (invert) {
        offset *= -1;
    }

    offset = (0, _unitConverters.degreesToRadians)(offset);

    return offset;
};

/**
 * normalize angles to within 0° - 360°
 * @param  {number} degrees an angle
 * @return {number}         an angle within [0,360]
 */
var degrees_normalize = exports.degrees_normalize = function degrees_normalize(degrees) {
    if (degrees >= 0) {
        return degrees % 360;
    }

    return 360 + degrees % 360;
};

/**
 * normalize angles to within 0 - 2π
 * @param  {number} radians an angle
 * @return {number}         an angle within [0,2π]
 */
var radians_normalize = exports.radians_normalize = function radians_normalize(radians) {
    if (radians >= 0) {
        return radians % tau();
    }

    return tau() + radians % tau();
};

/**
 * Calculate the distance between two lat/long coordinates in km
 *
 * This is a javascript implementation of the Haversine Formula
 *
 * for more information on the math see:
 * - http://www.movable-type.co.uk/scripts/latlong.html
 * - http://stackoverflow.com/questions/27928/calculate-distance-between-two-latitude-longitude-points-haversine-formula
 *
 * @function distanceToPoint
 * @param startLatitude {number}
 * @param startLongitude {number}
 * @param endLatitude {number}
 * @param endLongitude {number}
 * return {number}
 */
var distanceToPoint = exports.distanceToPoint = function distanceToPoint(startLatitude, startLongitude, endLatitude, endLongitude) {
    // TODO: add to global constants
    var EARTH_RADIUS_KM = 6371;
    var startLatitudeRadians = (0, _unitConverters.degreesToRadians)(startLatitude);
    var endLatitudeRadians = (0, _unitConverters.degreesToRadians)(endLatitude);
    var distanceLatitude = (0, _unitConverters.degreesToRadians)(startLatitude - endLatitude);
    var distanceLongitude = (0, _unitConverters.degreesToRadians)(startLongitude - endLongitude);

    // the square of half the chord length between points
    var a = Math.pow(Math.sin(distanceLatitude / 2), 2) + Math.cos(startLatitudeRadians) * Math.cos(endLatitudeRadians) * Math.pow(Math.sin(distanceLongitude / 2), 2);

    var angularDistanceInRadians = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return angularDistanceInRadians * EARTH_RADIUS_KM;
};

// /**
//  *
//  * @function distEuclid
//  * @param
//  * @param
//  * @return
//  */
// export const distEuclid = (lat1, lon1, lat2, lon2) => {
//     // TODO: add to global constants
//     const EARTH_RADIUS_KM = 6371;
//     const lat1 = degreesToRadians(lat1);
//     const lat2 = degreesToRadians(lat2);
//     const dlat = degreesToRadians(lat2 - lat1);
//     const dlon = degreesToRadians(lon2 - lon1);
//
//     const a = Math.sin(dlat / 2) * Math.sin(dlat / 2) + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dlon / 2) * Math.sin(dlon / 2);
//     const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
//     const d = EARTH_RADIUS_KM * c;
//
//     return d; // distance, in kilometers
// };

},{"../utilities/unitConverters":595,"./core":584}],584:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.extrapolate_range_clamp = exports.clamp = exports.mod = exports.calculateMiddle = exports.within = exports.s = exports.randint = exports.fl = exports.tan = exports.cos = exports.sin = exports.abs = exports.round = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @function round
 * @return {number}
 */
var round = exports.round = function round(n) {
    var factor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    return Math.round(n / factor) * factor;
};

/**
 * @function abs
 * @return {number}
 */
var abs = exports.abs = function abs(n) {
    return Math.abs(n);
};

/**
 * @function sin
 * @return {number}
 */
var sin = exports.sin = function sin(a) {
    return Math.sin(a);
};

/**
 * @function cos
 * @return {number}
 */
var cos = exports.cos = function cos(a) {
    return Math.cos(a);
};

/**
 * @function tan
 * @return {number}
 */
var tan = exports.tan = function tan(a) {
    return Math.tan(a);
};

// TODO: rename to floor,
/**
 * @function fl
 * @return {number}
 */
var fl = exports.fl = function fl(n) {
    var number = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

    return Math.floor(n / number) * number;
};

// TODO: rename to randomInteger
/**
 * @function randint
 * @return {number}
 */
var randint = exports.randint = function randint(low, high) {
    return Math.floor(Math.random() * (high - low + 1)) + low;
};

// TODO: rename to pluralize
/**
 * @function s
 * @return {number}
 */
var s = exports.s = function s(i) {
    return i === 1 ? '' : 's';
};

// TODO: rename to isWithin
/**
 * @function within
 * @param n
 * @param c
 * @param r
 * @return {number}
 */
var within = exports.within = function within(n, c, r) {
    return n > c + r || n < c - r;
};

// TODO: add a divisor paramater that dfaults to `2`
/**
 * Given a number, find the middle value.
 *
 * @method calculateMiddle
 * @param  {number} value
 * @return {number}
 */
var calculateMiddle = exports.calculateMiddle = function calculateMiddle() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (!(0, _isNumber3.default)(value)) {
        throw new TypeError('Invalid parameter, expected a number but found ' + (typeof value === 'undefined' ? 'undefined' : _typeof(value)));
    }

    return round(value / 2);
};

/**
 *
 * @function mod
 * @param firstValue {number}
 * @param secondValue {number}
 * @return {number}
 */
var mod = exports.mod = function mod(firstValue, secondValue) {
    return (firstValue % secondValue + secondValue) % secondValue;
};

/**
 * Clamp a value to be within a certain range
 *
 * @function clamp
 * @param min {number}
 * @param valueToClamp {number}
 * @param max {number} (optional)
 * @return {number}
 */
var clamp = exports.clamp = function clamp(min, valueToClamp) {
    var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;

    var temp = void 0;

    if (!(0, _isNumber3.default)(valueToClamp)) {
        throw new TypeError('Invalid parameter. Expected `valueToClamp` to be a number');
    }

    if (max === Infinity) {
        if (min > valueToClamp) {
            return min;
        }

        return valueToClamp;
    }

    if (min > max) {
        temp = max;
        max = min;
        min = temp;
    }

    if (min > valueToClamp) {
        return min;
    }

    if (max < valueToClamp) {
        return max;
    }

    return valueToClamp;
};

/**
 * Takes a value's position relative to a given range, and extrapolates to another range.
 * Note: Return will be outside range2 if target_val is outside range1.
 *       If you wish to clamp it within range2, use extrapolate_range_clamp.
 * @function extrapolate_range
 * @param  {number} range1_min minimum value of range 1
 * @param  {number} target_val target value within range 1
 * @param  {number} range1_max maximum value of range 1
 * @param  {number} range2_min minimum value of range 2
 * @param  {number} range2_max maximum value of range 2
 * @return {number}            target value wihtin range 2
 */
var extrapolate_range = function extrapolate_range(range1_min, target_val, range1_max, range2_min, range2_max) {
    return range2_min + (range2_max - range2_min) * (target_val - range1_min) / (range1_max - range1_min);
};

/**
 * Takes a value's position relative to a given range, and extrapolates to (and clamps within) another range.
 * Note: Return will be clamped within range2, even if target_val is outside range1.
 *       If you wish to allow extrapolation beyond the bounds of range2, us extrapolate_range.
 * @function extrapolate_range_clamp
 * @param  {number} range1_min minimum value of range1
 * @param  {number} target_val target value relative to range1
 * @param  {number} range1_max maximum value of range1
 * @param  {number} range2_min minimum value of range2
 * @param  {number} range2_max maximum value of range2
 * @return {number}            target value within range2
 */
var extrapolate_range_clamp = exports.extrapolate_range_clamp = function extrapolate_range_clamp(range1_min, target_val, range1_max, range2_min, range2_max) {
    var extrapolation_result = extrapolate_range(range1_min, target_val, range1_max, range2_min, range2_max);

    return clamp(extrapolation_result, range2_min, range2_max);
};

},{"lodash/isNumber":486}],585:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Calculate distance in a 2d plane between two points
 *
 * @function distance2d
 * @param a {array}
 * @param b {array}
 * return {number}
 */
var distance2d = exports.distance2d = function distance2d(a, b) {
  var x = a[0] - b[0];
  var y = a[1] - b[1];

  return Math.sqrt(x * x + y * y);
};

},{}],586:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.calculateDistanceToBoundary = exports.isWithinAirspace = exports.fixRadialDist = exports.getOffset = exports.bearingToPoint = exports.calcTurnInitiationDistance = exports.calcTurnRadius = undefined;

var _core = require('./core');

var _distance = require('./distance');

var _vector = require('./vector');

var _unitConverters = require('../utilities/unitConverters');

/**
 * @property CONSTANTS
 * @type {Object}
 * @final
 */
var CONSTANTS = {
    /**
     * @property
     * @type {number}
     * @final
     */
    GRAVITATIONAL_MAGNITUDE: 9.81,

    /**
     * @property EARTH_RADIUS_NM
     * @type {number}
     * @final
     */
    EARTH_RADIUS_NM: 3440
};

/**
 * @function calcTurnRadius
 * @param speed {number} currentSpeed of an aircraft
 * @param bankAngle {number} bank angle of an aircraft
 * @return {number}
 */
var calcTurnRadius = exports.calcTurnRadius = function calcTurnRadius(speed, bankAngle) {
    return speed * speed / (CONSTANTS.GRAVITATIONAL_MAGNITUDE * (0, _core.tan)(bankAngle));
};

/**
 * @function calcTurnInitiationDistance
 * @param speed {number}            currentSpeed of an aircraft
 * @param bankAngle {number}        bank angle of an aircraft
 * @param courseChange {number}
 * @return {number}
 */
var calcTurnInitiationDistance = exports.calcTurnInitiationDistance = function calcTurnInitiationDistance(speed, bankAngle, courseChange) {
    var turnRadius = calcTurnRadius(speed, bankAngle);

    return turnRadius * (0, _core.tan)(courseChange / 2) + speed;
};

/**
 * Returns the bearing from `startPosition` to `endPosition`
 * @function bearingToPoint
 * @param startPosition {array}     positional array, start point
 * @param endPosition {array}       positional array, end point
 * @return {number}
 */
var bearingToPoint = exports.bearingToPoint = function bearingToPoint(startPosition, endPosition) {
    return (0, _vector.vradial)((0, _vector.vsub)(endPosition, startPosition));
};

// TODO: this may be better suited to live in an Aircraft model somewhere.
/**
 * Returns an offset array showing how far [fwd/bwd, left/right] 'aircraft' is of 'target'
 *
 * @param aircraft {Aircraft}           the aircraft in question
 * @param target {array}                positional array of the targeted position [x,y]
 * @param headingThruTarget {number}    (optional) The heading the aircraft should
 *                                      be established on when passing the target.
 *                                      Default value is the aircraft's heading.
 * @returns {array} with two elements:  retval[0] is the lateral offset, in km
 *                                      retval[1] is the longitudinal offset, in km
 *                                      retval[2] is the hypotenuse (straight-line distance), in km
 */
var getOffset = exports.getOffset = function getOffset(aircraft, target) {
    var headingThruTarget = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    if (!headingThruTarget) {
        headingThruTarget = aircraft.heading;
    }

    var offset = [0, 0, 0];
    var vector = (0, _vector.vsub)(target, aircraft.position); // vector from aircraft pointing to target
    var bearingToTarget = (0, _vector.vradial)(vector);

    offset[2] = (0, _vector.vlen)(vector);
    offset[0] = offset[2] * (0, _core.sin)(headingThruTarget - bearingToTarget);
    offset[1] = offset[2] * (0, _core.cos)(headingThruTarget - bearingToTarget);

    return offset;
};

/**
 * Get new position by fix-radial-distance method
 *
 * @param {array} fix       positional array of start point, in decimal-degrees [lat,lon]
 * @param {number} radial   heading to project along, in radians
 * @param {number} dist     distance to project, in nm
 * @returns {array}         location of the projected fix, in decimal-degrees [lat,lon]
 */
var fixRadialDist = exports.fixRadialDist = function fixRadialDist(fix, radial, dist) {
    // FIXME: if fix is a FixModel, there may already be a method for this. if there isnt there should be. `fix.positionInRadians`
    // convert GPS coordinates to radians
    fix = [(0, _unitConverters.degreesToRadians)(fix[0]), (0, _unitConverters.degreesToRadians)(fix[1])];

    var R = CONSTANTS.EARTH_RADIUS_NM;
    // TODO: abstract these two calculations to functions
    var lat2 = Math.asin((0, _core.sin)(fix[0]) * (0, _core.cos)(dist / R) + (0, _core.cos)(fix[0]) * (0, _core.sin)(dist / R) * (0, _core.cos)(radial));
    var lon2 = fix[1] + Math.atan2((0, _core.sin)(radial) * (0, _core.sin)(dist / R) * (0, _core.cos)(fix[0]), (0, _core.cos)(dist / R) - (0, _core.sin)(fix[0]) * (0, _core.sin)(lat2));

    return [(0, _unitConverters.radiansToDegrees)(lat2), (0, _unitConverters.radiansToDegrees)(lon2)];
};

/**
 *
 * @function isWithinAirspace
 * @param airport {AirportModel}
 * @param  pos {array}
 * @return {boolean}
 */
var isWithinAirspace = exports.isWithinAirspace = function isWithinAirspace(airport, pos) {
    var perim = airport.perimeter;

    if (perim) {
        return (0, _vector.point_in_area)(pos, perim);
    }

    return (0, _distance.distance2d)(pos, airport.position.position) <= airport.ctr_radius;
};

/**
 *
 * @function calculateDistanceToBoundary
 * @param airport {AirportModel}
 * @param pos {array}
 * @return {boolean}
 */
var calculateDistanceToBoundary = exports.calculateDistanceToBoundary = function calculateDistanceToBoundary(airport, pos) {
    var perim = airport.perimeter;

    if (perim) {
        // km
        return (0, _vector.distance_to_poly)(pos, (0, _vector.area_to_poly)(perim));
    }

    // TODO: hmm, `position.position`? that seems fishy
    return (0, _core.abs)((0, _distance.distance2d)(pos, airport.position.position) - airport.ctr_radius);
};

},{"../utilities/unitConverters":595,"./core":584,"./distance":585,"./vector":587}],587:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.positive_intersection_with_rect = exports.point_in_area = exports.area_to_poly = exports.point_to_mpoly = exports.point_in_poly = exports.distance_to_poly = exports.raysIntersect = exports.vturn = exports.vscale = exports.vadd = exports.vnorm = exports.vsub = exports.vradial = exports.vlen = undefined;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _core = require('./core');

var _unitConverters = require('../utilities/unitConverters');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Computes length of 2D vector
 *
 * @function vlen
 */
var vlen = exports.vlen = function vlen(v) {
    try {
        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
    } catch (err) {
        console.error('call to vlen() failed. v:' + v + ' | Err:' + err);
    }
};

/**
 * Compute angle of 2D vector, in radians
 *
 * @function vradial
 * @param v {}
 * @return {number}
 */
var vradial = exports.vradial = function vradial(v) {
    return Math.atan2(v[0], v[1]);
};

/**
 * Subtracts Vectors (all dimensions)
 *
 * @fuction vsub
 * @param v1 {number}
 * @param v2 {number}
 * @return {number}
 */
var vsub = exports.vsub = function vsub(v1, v2) {
    try {
        var v = [];
        var limit = Math.min(v1.length, v2.length);

        // TODO: this is easie rwith _map()
        for (var i = 0; i < limit; i++) {
            v.push(v1[i] - v2[i]);
        }

        return v;
    } catch (err) {
        console.error('call to vsub() failed. v1: ' + v1 + ' | v2:' + v2 + ' | Err: ' + err);
    }
};

// ************************ VECTOR FUNCTIONS ************************
// For more info, see http://threejs.org/docs/#Reference/Math/Vector3
// Remember: [x,y] convention is used, and doesn't match [lat,lon]

/**
 * Normalize a 2D vector
 * eg scaling elements such that net length is 1
 * Turns vector 'v' into a 'unit vector'
 */
var vnorm = exports.vnorm = function vnorm(v, length) {
    var x = v[0];
    var y = v[1];
    var angle = Math.atan2(x, y);

    if (!length) {
        length = 1;
    }

    return [(0, _core.sin)(angle) * length, (0, _core.cos)(angle) * length];
};

/**
 * Create a 2D vector
 * Pass a heading (rad) and this will return the corresponding unit vector
 */
var vectorize_2d = function vectorize_2d(direction) {
    return [(0, _core.sin)(direction), (0, _core.cos)(direction)];
};

/**
 * Adds Vectors (all dimensions)
 */
var vadd = exports.vadd = function vadd(v1, v2) {
    // TODO: why try/catch?
    try {
        var v = [];
        var limit = Math.min(v1.length, v2.length);

        // TODO: this can be done with a _map()
        for (var i = 0; i < limit; i++) {
            v.push(v1[i] + v2[i]);
        }

        return v;
    } catch (err) {
        console.error('call to vadd() failed. v1:' + v1 + ' | v2:' + v2 + ' | Err:' + err);
    }
};

/**
 * Multiplies Vectors (all dimensions)
 */
// const vmul = (v1, v2) => {
//     // TODO: why try/catch?
//     try {
//         const v = [];
//         const limit = Math.min(v1.length, v2.length);
//
//         // TODO: this can be done with a _map()
//         for (let i = 0; i < limit; i++) {
//             v.push(v1[i] * v2[i]);
//         }
//
//         return v;
//     } catch (err) {
//         console.error(`call to vmul() failed. v1:${v1} | v2:${v2} | Err:${err}`);
//     }
// };

/**
 * Divides Vectors (all dimensions)
 */
// const vdiv = (v1, v2) => {
//     // TODO: why try/catch?
//     try {
//         const v = [];
//         const lim = Math.min(v1.length, v2.length);
//
//         // TODO: this can be done with a _map()
//         for (let i = 0; i < lim; i++) {
//             v.push(v1[i] / v2[i]);
//         }
//
//         return v;
//     } catch (err) {
//         console.error(`call to vdiv() failed. v1:${v1} | v2:${v2} | Err:${err}`);
//     }
// };

/**
 * Scales vectors in magnitude (all dimensions)
 */
var vscale = exports.vscale = function vscale(vectors, factor) {
    return (0, _map3.default)(vectors, function (v) {
        return v * factor;
    });
};

/**
 * Vector dot product (all dimensions)
 */
// const vdp = (v1, v2) => {
//     let n = 0;
//     const lim = Math.min(v1.length, v2.length);
//
//     // TODO: mabye use _map() here?
//     for (let i = 0; i < lim; i++) {
//         n += v1[i] * v2[i];
//     }
//
//     return n;
// };

/**
 * Compute determinant of 2D/3D vectors
 * Remember: May return negative values (undesirable in some situations)
 */
var vdet = function vdet(v1, v2, /* optional */v3) {
    if (Math.min(v1.length, v2.length) === 2) {
        // 2x2 determinant
        return v1[0] * v2[1] - v1[1] * v2[0];
    } else if (Math.min(v1.length, v2.length, v3.length) === 3 && v3) {
        // 3x3 determinant
        return v1[0] * vdet([v2[1], v2[2]], [v3[1], v3[2]]) - v1[1] * vdet([v2[0], v2[2]], [v3[0], v3[2]]) + v1[2] * vdet([v2[0], v2[1]], [v3[0], v3[1]]);
    }
};

/**
 * Vector cross product (3D/2D*)
 * Passing 3D vector returns 3D vector
 * Passing 2D vector (classically improper) returns z-axis SCALAR
 * *Note on 2D implementation: http://stackoverflow.com/a/243984/5774767
 */
var vcp = function vcp(v1, v2) {
    if (Math.min(v1.length, v2.length) === 2) {
        // for 2D vector (returns z-axis scalar)
        return vcp([v1[0], v1[1], 0], [v2[0], v2[1], 0])[2];
    }

    if (Math.min(v1.length, v2.length) === 3) {
        // for 3D vector (returns 3D vector)
        return [vdet([v1[1], v1[2]], [v2[1], v2[2]]), -vdet([v1[0], v1[2]], [v2[0], v2[2]]), vdet([v1[0], v1[1]], [v2[0], v2[1]])];
    }
};

/**
 * Returns vector rotated by "radians" radians
 */
var vturn = exports.vturn = function vturn(radians, v) {
    if (!v) {
        v = [0, 1];
    }

    var x = v[0];
    var y = v[1];
    var cs = (0, _core.cos)(-radians);
    var sn = (0, _core.sin)(-radians);

    return [x * cs - y * sn, x * sn + y * cs];
};

/**
 * Determines if and where two rays will intersect. All angles in radians.
 * Variation based on http://stackoverflow.com/a/565282/5774767
 */
var raysIntersect = exports.raysIntersect = function raysIntersect(pos1, dir1, pos2, dir2, deg_allowance) {
    if (!deg_allowance) {
        // degrees divergence still considered 'parallel'
        deg_allowance = 0;
    }

    var p = pos1;
    var q = pos2;
    var r = vectorize_2d(dir1);
    var s = vectorize_2d(dir2);
    var t = (0, _core.abs)(vcp(vsub(q, p), s) / vcp(r, s));
    var t_norm = (0, _core.abs)(vcp(vsub(vnorm(q), vnorm(p)), s) / vcp(r, s));
    var u_norm = (0, _core.abs)(vcp(vsub(vnorm(q), vnorm(p)), r) / vcp(r, s));

    if ((0, _core.abs)(vcp(r, s)) < (0, _core.abs)(vcp([0, 1], vectorize_2d((0, _unitConverters.degreesToRadians)(deg_allowance))))) {
        // parallel (within allowance)
        var crossProduct = vcp(vsub(vnorm(q), vnorm(p)), r);

        if (crossProduct === 0) {
            // collinear
            return true;
        }

        // parallel, non-intersecting
        return false;
    } else if (t_norm >= 0 && t_norm <= 1 && u_norm >= 0 && u_norm <= 1) {
        // rays intersect here
        return vadd(p, vscale(r, t));
    }

    // diverging, non-intersecting
    return false;
};

/**
 * Determines if and where two runways will intersect.
 * Note: Please pass ONLY the runway identifier (eg '28r')
 */
// const runwaysIntersect = (rwy1_name, rwy2_name) => {
//     const airport = window.airportController.airport_get();
//
//     return raysIntersect(
//         airport.getRunway(rwy1_name).position,
//         airport.getRunway(rwy1_name).angle,
//         airport.getRunway(rwy2_name).position,
//         airport.getRunway(rwy2_name).angle,
//         9.9 // consider "parallel" if rwy hdgs differ by maximum of 9.9 degrees
//     );
// };

/**
 * 'Flips' vector's Y component in direction
 * Helper function for culebron's poly edge vector functions
 */
var vflipY = function vflipY(v) {
    return [-v[1], v[0]];
};

/**
 *
 *
 * solution by @culebron
 * turn poly edge into a vector.
 * the edge vector scaled by j and its normal vector scaled by i meet
 * if the edge vector points between the vertices,
 * then normal is the shortest distance.
 * --------
 * x1 + x2 * i == x3 + x4 * j
 * y1 + y2 * i == y3 + y4 * j
 * 0 < j < 1
 * --------
 *
 * i == (y3 + j y4 - y1) / y2
 * x1 + x2 y3 / y2 + j x2 y4 / y2 - x2 y1 / y2 == x3 + j x4
 * j x2 y4 / y2 - j x4 == x3 - x1 - x2 y3 / y2 + x2 y1 / y2
 * j = (x3 - x1 - x2 y3 / y2 + x2 y1 / y2) / (x2 y4 / y2 - x4)
 * i = (y3 + j y4 - y1) / y2
 *
 * i == (x3 + j x4 - x1) / x2
 * y1 + y2 x3 / x2 + j y2 x4 / x2 - y2 x1 / x2 == y3 + j y4
 * j y2 x4 / x2 - j y4 == y3 - y1 - y2 x3 / x2 + y2 x1 / x2
 * j = (y3 - y1 - y2 x3 / x2 + y2 x1 / x2) / (y2 x4 / x2 - y4)
 * i = (x3 + j x4 - x1) / x2
 *
 * @fnuction distance_to_poly
 * @param point {array}
 * @param poly {array}
 * @return number
 */
var distance_to_poly = exports.distance_to_poly = function distance_to_poly(point, poly) {
    var dists = (0, _map3.default)(poly, function (vertex1, i) {
        var prev = (i === 0 ? poly.length : i) - 1;
        var vertex2 = poly[prev];
        var edge = vsub(vertex2, vertex1);

        if (vlen(edge) === 0) {
            return vlen(vsub(point, vertex1));
        }

        // point + normal * i == vertex1 + edge * j
        var norm = vflipY(edge);
        var x1 = point[0];
        var x2 = norm[0];
        var x3 = vertex1[0];
        var x4 = edge[0];
        var y1 = point[1];
        var y2 = norm[1];
        var y3 = vertex1[1];
        var y4 = edge[1];
        var k = void 0;
        var j = void 0;

        if (y2 !== 0) {
            j = (x3 - x1 - x2 * y3 / y2 + x2 * y1 / y2) / (x2 * y4 / y2 - x4);
            k = (y3 + j * y4 - y1) / y2;
        } else if (x2 !== 0) {
            // normal can't be zero unless the edge has 0 length
            j = (y3 - y1 - y2 * x3 / x2 + y2 * x1 / x2) / (y2 * x4 / x2 - y4);
            k = (x3 + j * x4 - x1) / x2;
        }

        if (j < 0 || j > 1 || !j) {
            return Math.min(vlen(vsub(point, vertex1)), vlen(vsub(point, vertex2)));
        }

        return vlen(vscale(norm, k));
    });

    return Math.min.apply(Math, _toConsumableArray(dists));
};

// source: https://github.com/substack/point-in-polygon/
var point_in_poly = exports.point_in_poly = function point_in_poly(point, vs) {
    // ray-casting algorithm based on
    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html
    var x = point[0];
    var y = point[1];
    var j = vs.length - 1;
    var inside = false;

    // poly might not be the correct term here
    (0, _forEach3.default)(vs, function (poly, i) {
        var xi = poly[0];
        var yi = poly[1];
        var xj = vs[j][0];
        var yj = vs[j][1];
        var intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;

        if (intersect) {
            inside = !inside;
        }

        j = i;
    });

    return inside;
};

/**
 *
 * @function point_to_mpoly
 * @param point {array}
 * @param mpoly {array}
 * @return {object}
 */
var point_to_mpoly = exports.point_to_mpoly = function point_to_mpoly(point, mpoly) {
    // returns: boolean inside/outside & distance to the polygon
    var inside = false;

    (0, _forEach3.default)(mpoly, function (ring, k) {
        // ring = mpoly[k];

        if (point_in_poly(point, ring)) {
            if (k === 0) {
                // if inside outer ring, remember that and wait till the end
                inside = true;
            }

            // if by change in one of inner rings, it's out of poly, return distance to the inner ring
            return {
                inside: false,
                distance: distance_to_poly(point, ring)
            };
        }
    });

    // if not matched to inner circles, return the match to outer and distance to it
    return {
        inside: inside,
        distance: distance_to_poly(point, mpoly[0])
    };
};

/**
 * Converts an 'area' to a 'poly'
 */
var area_to_poly = exports.area_to_poly = function area_to_poly(area) {
    // TODO: this should be _map()
    // What is the significance of returning `[v.position]`? isnt position already an array?
    return _jquery2.default.map(area.poly, function (v) {
        return [v.position];
    });
};

/**
 * Checks to see if a point is in an area
 */
var point_in_area = exports.point_in_area = function point_in_area(point, area) {
    return point_in_poly(point, area_to_poly(area));
};

// TODO: this might be best accomplished with a Rectangle class, with this function working as the middleman
// creating the class and asking if there is an intersection.
/**
 * Compute a point of intersection of a ray with a rectangle.
 *
 * Args:
 *   pos: array of 2 numbers, representing ray source.
 *   dir: array of 2 numbers, representing ray direction.
 *   rectPos: array of 2 numbers, representing rectangle corner position.
 *   rectSize: array of 2 positive numbers, representing size of the rectangle.
 *
 * Returns:
 * - undefined, if pos is outside of the rectangle.
 * - undefined, in case of a numerical error.
 * - array of 2 numbers on a rectangle boundary, in case of an intersection.
 */
var positive_intersection_with_rect = exports.positive_intersection_with_rect = function positive_intersection_with_rect(pos, dir, rectPos, rectSize) {
    var left = rectPos[0];
    var right = rectPos[0] + rectSize[0];
    var top = rectPos[1];
    var bottom = rectPos[1] + rectSize[1];
    var t = void 0;
    var x = void 0;
    var y = void 0;

    dir = vnorm(dir);

    // Check if pos is outside of rectangle.
    if ((0, _core.clamp)(left, pos[0], right) !== pos[0] || (0, _core.clamp)(top, pos[1], bottom) !== pos[1]) {
        return undefined;
    }

    // Check intersection with top segment.
    if (dir[1] < 0) {
        t = (top - pos[1]) / dir[1];
        x = pos[0] + dir[0] * t;

        if ((0, _core.clamp)(left, x, right) === x) {
            return [x, top];
        }
    }

    // Check intersection with bottom segment.
    if (dir[1] > 0) {
        t = (bottom - pos[1]) / dir[1];
        x = pos[0] + dir[0] * t;

        if ((0, _core.clamp)(left, x, right) === x) {
            return [x, bottom];
        }
    }

    // Check intersection with left segment.
    if (dir[0] < 0) {
        t = (left - pos[0]) / dir[0];
        y = pos[1] + dir[1] * t;

        if ((0, _core.clamp)(top, y, bottom) === y) {
            return [left, y];
        }
    }

    // Check intersection with right segment.
    if (dir[0] > 0) {
        t = (right - pos[0]) / dir[0];
        y = pos[1] + dir[1] * t;

        if ((0, _core.clamp)(top, y, bottom) === y) {
            return [right, y];
        }
    }

    // Failed to compute intersection due to numerical precision.
    return undefined;
};

},{"../utilities/unitConverters":595,"./core":584,"jquery":296,"lodash/forEach":468,"lodash/map":496}],588:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.speech_toggle = exports.speech_say = exports.speech_init = undefined;

var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _radioUtilities = require('./utilities/radioUtilities');

var _storageKeys = require('./constants/storageKeys');

var _selectors = require('./constants/selectors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * @function speech_init
 */
/* eslint-disable no-underscore-dangle, no-unused-vars, no-undef, global-require */
var speech_init = exports.speech_init = function speech_init() {
    prop.speech = {};
    prop.speech.synthesis = window.speechSynthesis;
    prop.speech.enabled = false;

    if ((0, _get3.default)(localStorage, _storageKeys.STORAGE_KEY.ATC_SPEECH_ENABLED, false) === true) {
        prop.speech.enabled = true;
        (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.SPEECH_TOGGLE).addClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
    }
};

/**
 *
 * @function speech_say
 * @param sentence
 */
var speech_say = exports.speech_say = function speech_say(sentence) {
    if (prop.speech.synthesis != null && prop.speech.enabled) {
        var textToSay = '';

        for (var i = 0; i < sentence.length; i++) {
            var singleSentence = sentence[i];

            switch (singleSentence.type) {
                case 'callsign':
                    textToSay += ' ' + singleSentence.content.getRadioCallsign() + ' ';
                    break;
                case 'altitude':
                    textToSay += ' ' + (0, _radioUtilities.radio_altitude)(singleSentence.content) + ' ';
                    break;
                case 'speed':case 'heading':
                    textToSay += ' ' + (0, _radioUtilities.radio_heading)(singleSentence.content) + ' ';
                    break;
                case 'text':
                    textToSay += ' ' + singleSentence.content + ' ';
                    break;
                default:
                    break;
            }
        }

        var utterance = new SpeechSynthesisUtterance(textToSay); // make the object
        utterance.lang = 'en-US'; // set the language
        utterance.voice = prop.speech.synthesis.getVoices().filter(function (voice) {
            // set the voice
            return voice.name === 'Google US English';
        })[0];
        utterance.rate = 1.125; // speed up just a touch

        // say the words
        prop.speech.synthesis.speak(utterance);
    }
};

/**
 *
 * @function speech_toggle
 */
var speech_toggle = exports.speech_toggle = function speech_toggle() {
    var $speechToggle = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.SPEECH_TOGGLE);
    prop.speech.enabled = !prop.speech.enabled;

    if (prop.speech.enabled) {
        $speechToggle.addClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
    } else {
        $speechToggle.removeClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
        prop.speech.synthesis.cancel();
    }

    localStorage[_storageKeys.STORAGE_KEY.ATC_SPEECH_ENABLED] = prop.speech.enabled;
};

},{"./constants/selectors":575,"./constants/storageKeys":576,"./utilities/radioUtilities":593,"jquery":296,"lodash/get":469,"lodash/has":470}],589:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var INIT_POSITION_PADDING = [0, 0];

/**
 * Model representing a single tutorial step.
 *
 * Consumed by tutorial.js
 *
 * @class TutorialStep
 */

var TutorialStep = function () {
    /**
     * @for TutorialStep
     * @constructor
     */
    function TutorialStep() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, TutorialStep);

        this.title = (0, _get3.default)(options, 'title', '?');
        this.text = (0, _get3.default)(options, 'text', '?');
        this.parse = (0, _get3.default)(options, 'parse', null);
        this.side = (0, _get3.default)(options, 'side', 'none');
        this.position = (0, _get3.default)(options, 'position', INIT_POSITION_PADDING);
        this.padding = (0, _get3.default)(options, 'padding', INIT_POSITION_PADDING);
    }

    /**
     * @for TutorialStep
     * @method getText
     * @return {string}
     */


    _createClass(TutorialStep, [{
        key: 'getText',
        value: function getText() {
            if (this.parse) {
                return this.parse(this.text);
            }

            return this.text;
        }
    }]);

    return TutorialStep;
}();

exports.default = TutorialStep;

},{"lodash/get":469}],590:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-disable max-len */


var _jquery = require('jquery');

var _jquery2 = _interopRequireDefault(_jquery);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _TutorialStep = require('./TutorialStep');

var _TutorialStep2 = _interopRequireDefault(_TutorialStep);

var _core = require('../math/core');

var _timeHelpers = require('../utilities/timeHelpers');

var _unitConverters = require('../utilities/unitConverters');

var _storageKeys = require('../constants/storageKeys');

var _selectors = require('../constants/selectors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var tutorial = {};

var TUTORIAL_TEMPLATE = '' + '<div id="tutorial">' + '   <h1></h1>' + '   <main></main>' + '   <div class="prev"><img src="assets/images/prev.png" title="Previous step" /></div>' + '   <div class="next"><img src="assets/images/next.png" title="Next step" /></div>' + '</div>';

/**
 * @class TutorialView
 */

var TutorialView = function () {
    /**
     * @constructor
     */
    function TutorialView() {
        var $element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

        _classCallCheck(this, TutorialView);

        /**
         * Root DOM element
         *
         * @property $element
         * @type {jquery|HTML Element}
         * @default $element
         */
        this.$element = $element;

        /**
         * Root tutorial DOM element
         *
         * @property $tutorialView
         * @type {jquery|HTML Element}
         * @default `#tutorial`
         */
        this.$tutorialView = null;

        /**
         * @property $tutorialToggle
         * @type {jquery|HTML Element}
         * @default `.toggle-tutorial`
         */
        this.$tutorialToggle = null;

        /**
         * Previous tutorial step button
         *
         * @property $tutorialPrevious
         * @type {jquery|HTML Element}
         * @default `.prev`
         */
        this.$tutorialPrevious = null;

        /**
         * Next tutorial step button
         *
         * @property $tutorialNext
         * @type {jquery|HTML Element}
         * @default `.next`
         */
        this.$tutorialNext = null;

        prop.tutorial = tutorial;
        this.tutorial = tutorial;
        this.tutorial.steps = [];
        this.tutorial.step = 0;
        this.tutorial.open = false;

        this._init().layout().enable();
    }

    /**
     * Lifecycle method should be run once on application init.
     *
     * Caches selectors in variabls so they only need to be looked up one time.
     *
     * @for tutorialView
     * @method _init
     * @chainable
     */


    _createClass(TutorialView, [{
        key: '_init',
        value: function _init() {
            this.$tutorialView = (0, _jquery2.default)(TUTORIAL_TEMPLATE);
            this.$tutorialToggle = (0, _jquery2.default)(_selectors.SELECTORS.DOM_SELECTORS.TOGGLE_TUTORIAL);
            this.$tutorialPrevious = this.$tutorialView.find(_selectors.SELECTORS.DOM_SELECTORS.PREV);
            this.$tutorialNext = this.$tutorialView.find(_selectors.SELECTORS.DOM_SELECTORS.NEXT);

            return this;
        }

        /**
         * Lifecycle method should be run once on application init.
         *
         * Adds the TUTORIAL_TEMPLATE to the view
         *
         * @for tutorialView
         * @method layout
         * @chainable
         */

    }, {
        key: 'layout',
        value: function layout() {
            if (!this.$element) {
                throw new Error('Expected $element to be defined. `body` tag does not exist in the DOM');
            }

            prop.tutorial.html = this.$tutorialView;
            this.$element.append(this.$tutorialView);

            return this;
        }

        /**
         * Lifecycle method should be run once on application init.
         *
         * @for tutorialView
         * @method enable
         * @chainable
         */

    }, {
        key: 'enable',
        value: function enable() {
            var _this = this;

            this.$tutorialPrevious.on('click', function (event) {
                return _this.tutorial_prev(event);
            });
            this.$tutorialNext.on('click', function (event) {
                return _this.tutorial_next(event);
            });

            return this;
        }

        /**
         * Disable any click handlers.
         *
         * @for tutorialView
         * @method disable
         * @chainable
         */

    }, {
        key: 'disable',
        value: function disable() {
            var _this2 = this;

            this.$tutorialPrevious.off('click', function (event) {
                return _this2.tutorial_prev(event);
            });
            this.$tutorialNext.off('click', function (event) {
                return _this2.tutorial_next(event);
            });

            return this.destroy();
        }

        /**
         * Tear down the view and unset any properties.
         *
         * @for tutorialView
         * @method destroy
         * @chainable
         */

    }, {
        key: 'destroy',
        value: function destroy() {
            this.$tutorialView = null;
            this.$tutorialToggle = null;
            this.$tutorialPrevious = null;
            this.$tutorialNext = null;

            this.tutorial = {};
            this.tutorial.steps = [];
            this.tutorial.step = 0;
            this.tutorial.open = false;

            return this;
        }

        /**
         * @for TutorialView
         * @method tutorial_init_pre
         */

    }, {
        key: 'tutorial_init_pre',
        value: function tutorial_init_pre() {
            prop.tutorial = {};
            prop.tutorial.steps = [];
            prop.tutorial.step = 0;
            prop.tutorial.open = false;

            var tutorial_position = [0.1, 0.85];

            this.tutorial_step({
                title: 'Welcome!',
                text: ['Welcome to Air Traffic Control simulator. It&rsquo;s not easy', 'to control dozens of aircraft while maintaining safe distances', 'between them; to get started with the ATC simulator tutorial, click the arrow on', 'the right. You can also click the graduation cap icon in the lower right corner', 'of the window at any time to close this tutorial.'].join(' '),
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Departing aircraft',
                text: ['Let&rsquo;s route some planes out of here. On the right side of the screen, there', 'should be a strip with a blue bar on the left, meaning the strip represents a departing aircraft.', 'Click the first one ({CALLSIGN}). The aircraft&rsquo;s callsign will appear in the command entry box', 'and the strip will move to the left and change color. This means that the aircraft is selected.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{CALLSIGN}', prop.aircraft.list[0].getCallsign());
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Taxiing',
                text: ['Now type in &lsquo;taxi&rsquo; or &lsquo;wait&rsquo; into the command box after the callsign and hit Return;', 'the messages area above it will show that the aircraft is taxiing to runway ({RUNWAY}) in', 'preparation for takeoff. (You could also specify to which runway to taxi the aircraft by', 'entering the runway name after &lsquo;taxi&rsquo; or &lsquo;wait&rsquo;.)'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length < 0) {
                        return t;
                    }

                    return t.replace('{RUNWAY}', prop.aircraft.list[0].fms.currentWaypoint.runway);
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Takeoff, part 1',
                text: ['When it appears at the start of runway ({RUNWAY}) (which may take a couple of seconds), click it (or press the up arrow once)', 'and type in &lsquo;caf&rsquo; (for &lsquo;cleared as filed&rsquo;). This tells the aircraft it is cleared to follow its flightplan.', 'Just as in real life, this step must be done before clearing the aircraft for takeoff, so they know where they\'re supposed to go.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{RUNWAY}', prop.aircraft.list[0].fms.currentWaypoint.runway);
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Takeoff, part 2',
                text: ['Now the aircraft is ready for take off. Click the aircraft again (or press up arrow once)', 'and type &lsquo;takeoff&rsquo; (or &lsquo;to&rsquo;) to clear the aircraft for take off.', 'Once it\'s going fast enough, it should lift off the ground and you should', 'see its altitude increasing. Meanwhile, read the next step.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{RUNWAY}', prop.aircraft.list[0].fms.currentWaypoint.runway);
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Aircraft strips, part 1',
                text: ['On the right, there&rsquo;s a row of strips, one for each aircraft.', 'Each strip has a bar on its left side, colored blue for departures and', 'red for arrivals.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{RUNWAY}', prop.aircraft.list[0].fms.currentWaypoint.runway);
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Aircraft strips, part 2',
                text: ['The top row shows the aircraft&rsquo;s callsign, what it\'s doing (parked at apron,', 'using a runway, flying to a fix, on a heading, etc), and its assigned altitude. The bottom row shows the model', '({MODEL} here, which is a {MODELNAME}) to the left, its destination in the middle, and its assigned speed to the right.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{MODEL}', prop.aircraft.list[0].model.icao).replace('{MODELNAME}', prop.aircraft.list[0].model.name);
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Moving aircraft',
                text: ['Once {CALLSIGN} has taken off, you\'ll notice it will climb to {INIT_ALT} by itself. This is one of the instructions ', 'we gave them when we cleared them &lsquo;as filed&rsquo;. Aircraft perform better when they are able to climb directly', 'from the ground to their cruise altitude without leveling off, so let\'s keep them climbing! Click it and type &lsquo;cvs&rsquo; (for', '&lsquo;climb via SID&rsquo;). Then they will follow the altitudes and speeds defined in the {SID_NAME} departure', 'procedure. Feel free to click the speedup button on the right side of the input box (it&rsquo;s two small arrows)', 'to watch the departure climb along the SID. Then just click it again to return to 1x speed.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{CALLSIGN}', prop.aircraft.list[0].getCallsign()).replace('{INIT_ALT}', window.airportController.airport_get().initial_alt).replace('{SID_NAME}', prop.aircraft.list[0].destination);
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Departure destinations',
                text: ['If you zoom out (using the mouse wheel) and click', 'on {CALLSIGN}, you will see a blue dashed line that shows where they are heading. At the end of the', 'line is its &lsquo;departure fix&rsquo;. Your goal is to get every departure cleared to their filed departure fix. As', 'you have probably noticed, this is very easy with SIDs, as the aircraft do all the hard work themselves.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{CALLSIGN}', prop.aircraft.list[0].getCallsign());
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Basic Control Instructions: Altitude',
                text: ['You can assign altitudes with the &lsquo;climb&rsquo; command, or any of its aliases (other words that', 'act identically). Running the command &lsquo;climb&rsquo; is the same as the commands &lsquo;descend&rsquo;, &lsquo;d&rsquo;,', '&lsquo;clear&rsquo;, &lsquo;c&rsquo;, &lsquo;altitude&rsquo;, or &lsquo;a&rsquo;. Just use whichever feels correct in your situation.', 'Remember, just as in real ATC, altitudes are ALWAYS written in hundreds of feet, eg. &lsquo;descend 30&rsquo; for 3,000ft or &lsquo;climb', ' 100&rsquo; for 10,000ft.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{CALLSIGN}', prop.aircraft.list[0].getCallsign());
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Basic Control Instructions: Radar Vectors',
                text: ['Radar vectors are an air traffic controller\'s way of telling aircraft to fly a specific magnetic heading. We can give aircraft radar', 'vectors in three ways. Usually, you will use &lsquo;t l ###&rsquo; or &lsquo;t r ###&rsquo;. Be careful, as it is both easy', 'and dangerous to give a turn in the wrong direction. If the heading is only slightly left or right, to avoid choosing the wrong direction,', 'you can tell them to &lsquo;fly heading&rsquo; by typing &lsquo;fh###&rsquo;, and the aircraft will simply turn the shortest direction', 'to face that heading.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Basic Control Instructions: Speed',
                text: ['Speed control is the TRACON controller\'s best friend. Making good use of speed control can help keep the pace manageable and allow', 'you to carefully squeeze aircraft closer and closer to minimums while still maintaining safety. To enter speed instructions, use the', '&lsquo;+&rsquo; and &lsquo;-&rsquo; keys on the numpad, followed by the speed, in knots. Note that this assigned speed is indicated', 'airspeed, and our radar scope can only display groundspeed; so, the values may be different.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace(/{ANGLE}/g, (0, _unitConverters.heading_to_string)(prop.aircraft.list[0].destination));
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Fixes',
                text: ['Instead of guiding each aircraft based on heading, you can also clear each aircraft to proceed to a fix or navaid (shown on the map', 'as a small triangle). Just use the command &lsquo;fix&rsquo; and the name of a fix, and the aircraft will fly to it. Upon passing the', 'fix, it will continue flying along its present heading.'].join(' '),
                parse: function parse(t) {
                    if (prop.aircraft.list.length <= 0) {
                        return t;
                    }

                    return t.replace('{CALLSIGN}', prop.aircraft.list[0].getCallsign());
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Shortcuts',
                text: ['You can give an aircraft a shortcut in a chain of fixes through use of the &lsquo;direct&rsquo;', 'command (&lsquo;dct&rsquo;). Also, you can add more fixes to the end of that list with the', '&lsquo;proceed&rsquo; (&lsquo;pr&rsquo;) command. This is useful with overflights, and while you can have', 'departing aircraft use these commands, it is probably easier to assign them a SID if one is available at your airport.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Bon voyage, aircraft!',
                text: ['When the aircraft crosses the airspace boundary, it will ', 'automatically remove itself from the flight strip bay on the right.', 'Congratulations, you&rsquo;ve successfully taken off one aircraft.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Arrivals',
                text: ['Now, onto arrivals. Click on any arriving aircraft in the radar screen; after', 'you&rsquo;ve selected it, use the altitude/heading/speed controls you\'ve learned in', 'order to guide it to be in front of a runway. Make sure to get the aircraft down to', 'around 4,000ft, and 10-15 nautical miles (2-3 range rings) away from the airport.', 'While you work the airplane, read the next step.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Approach Clearances, part 1',
                text: ['You can clear aircraft for an ILS approach with the &quot;ILS&quot; command, followed by a runway name. Before you can do so, however,', 'it must be on a heading that will cross the runway\'s extended centerline, that is no more than 30 degrees offset from the', 'runway\'s heading. Once we eventually give them an approach clearance, you can expect aircraft to capture the ILS\'s localizer', 'once they\'re within a few degrees of the extended centerline.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Approach Clearances, part 2',
                text: ['When you have the aircraft facing the right direction, just select it and type &lsquo;i &lt;runway&gt;&rsquo;', 'with the runway that&rsquo;s in front of it. Once it\'s close enough to capture the localizer, the assigned altitude on its strip', 'will change to &lsquo;ILS locked&rsquo; (meaning the aircraft is capable of guiding itself down to the runway via', 'the Instrument Landing System), and the assigned heading should now show the runway to which it has an approach clearance.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Approach Clearances, part 3',
                text: ['You may choose to enter one command at a time, but air traffic controllers usually do multiple. Particularly in approach clearances,', 'they follow an acronym &ldquo;PTAC&rdquo; for the four elements of an approach clearance, the &lsquo;T&rsquo; and &lsquo;C&rsquo; of which', 'stand for &lsquo;Turn&rsquo; and &lsquo;Clearance&rsquo;, both of which we entered separately in this tutorial. Though longer, it is both ', 'easier and more real-world accurate to enter them together, like this: &lsquo;fh250 i 28r&rsquo;.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Aborting landings',
                text: ['If the aircraft is established on the ILS, it should be able to land on the runway. However, say there&rsquo;s another', 'aircraft that&rsquo;s planning to take off from the same runway. To abort the landing, use the command &lsquo;abort&rsquo;.', '(If the aircraft is navigating to a fix, the &lsquo;abort&rsquo; command will clear the fix instead.)'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Wind sock',
                text: ['In the lower right corner of the map is a small circle with a line. It\'s like a flag: the line trails in the direction', 'the wind is blowing toward. If it&rsquo;s pointing straight down, the wind is blowing from the North', 'to the South. Aircraft must be assigned to different runways such that they always take off and land into the wind, unless the', 'wind is less than 5 knots.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Score',
                text: ['The lower-right corner of the page has a small number in it; this is your score.', 'Whenever you successfully route an aircraft to the ground or out of the screen, you earn points. As you make mistakes,', 'like directing aircraft to a runway with a strong crosswind/tailwind, losing separation between aircraft, or ignoring an', 'aircraft, you will also lose points. If you&rsquo;d like, you can just ignore the score; it doesn&rsquo;t have any effect', 'with the simulation.'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });

            this.tutorial_step({
                title: 'Good job!',
                text: ['If you&rsquo;ve gone through this entire tutorial, you should do pretty well with the pressure.', 'In the TRACON, minimum separation is 3 miles laterally or 1000 feet vertically. Keep them separated,', 'keep them moving, and you\'ll be a controller in no time!'].join(' '),
                parse: function parse(v) {
                    return v;
                },
                side: 'left',
                position: tutorial_position
            });
        }

        /**
         * @for TutorialView
         * @method tutorial_toggle
         */

    }, {
        key: 'tutorial_toggle',
        value: function tutorial_toggle() {
            if (prop.tutorial.open) {
                this.tutorial_close();
            } else {
                this.tutorial_open();
            }
        }

        /**
         * @method tutorial_get
         */

    }, {
        key: 'tutorial_get',
        value: function tutorial_get() {
            var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

            if (!step) {
                step = prop.tutorial.step;
            }

            return prop.tutorial.steps[step];
        }

        /**
         * @method tutorial_move
         */

    }, {
        key: 'tutorial_move',
        value: function tutorial_move() {
            var step = this.tutorial_get();
            var padding = [30, 10];
            var left = step.position[0] * ((0, _jquery2.default)(window).width() - this.$tutorialView.outerWidth() - padding[0]);
            var top = step.position[1] * (0, _jquery2.default)(window).height();
            top -= this.$tutorialView.outerHeight() - padding[1];

            //  left += step.padding[0];
            //  top  += step.padding[1];

            this.$tutorialView.offset({
                top: (0, _core.round)(top),
                left: (0, _core.round)(left)
            });
        }

        /**
         * @method tutorial_step
         */

    }, {
        key: 'tutorial_step',
        value: function tutorial_step(options) {
            prop.tutorial.steps.push(new _TutorialStep2.default(options));
        }

        /**
         * @method tutorial_update_content
         */

    }, {
        key: 'tutorial_update_content',
        value: function tutorial_update_content() {
            var step = this.tutorial_get();

            this.$tutorialView.find('h1').html(step.title);
            this.$tutorialView.find('main').html(step.getText());
            this.$tutorialView.removeClass('left right');

            if (step.side === _selectors.SELECTORS.CLASSNAMES.LEFT) {
                this.$tutorialView.addClass(_selectors.SELECTORS.CLASSNAMES.LEFT);
            } else if (step.side === _selectors.SELECTORS.CLASSNAMES.RIGHT) {
                this.$tutorialView.addClass(_selectors.SELECTORS.CLASSNAMES.RIGHT);
            }

            this.tutorial_move();
        }

        /**
         * @method tutorial_open
         */

    }, {
        key: 'tutorial_open',
        value: function tutorial_open() {
            prop.tutorial.open = true;

            this.$tutorialView.addClass(_selectors.SELECTORS.CLASSNAMES.OPEN);
            this.$tutorialToggle.addClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
            this.$tutorialToggle.prop('title', 'Close tutorial');

            this.tutorial_update_content();
        }

        /**
         * @method tutorial_close
         */

    }, {
        key: 'tutorial_close',
        value: function tutorial_close() {
            prop.tutorial.open = false;

            this.$tutorialView.removeClass(_selectors.SELECTORS.CLASSNAMES.OPEN);
            this.$tutorialToggle.removeClass(_selectors.SELECTORS.CLASSNAMES.ACTIVE);
            this.$tutorialToggle.prop('title', 'Open tutorial');

            this.tutorial_move();
        }

        // TODO: this function never gets called in this file
        /**
         * @method tutorial_complete
         */

    }, {
        key: 'tutorial_complete',
        value: function tutorial_complete() {
            if (!(0, _has3.default)(localStorage, _storageKeys.STORAGE_KEY.FIRST_RUN_TIME)) {
                this.tutorial_open();
            }

            localStorage[_storageKeys.STORAGE_KEY.FIRST_RUN_TIME] = (0, _timeHelpers.time)();
        }

        /**
         * @method tutorial_next
         */

    }, {
        key: 'tutorial_next',
        value: function tutorial_next() {
            if (prop.tutorial.step === prop.tutorial.steps.length - 1) {
                this.tutorial_close();

                return;
            }

            prop.tutorial.step = (0, _core.clamp)(0, prop.tutorial.step + 1, prop.tutorial.steps.length - 1);

            this.tutorial_update_content();
        }

        /**
         * @method tutorial_prev
         */

    }, {
        key: 'tutorial_prev',
        value: function tutorial_prev() {
            prop.tutorial.step = (0, _core.clamp)(0, prop.tutorial.step - 1, prop.tutorial.steps.length - 1);

            this.tutorial_update_content();
        }

        // TODO: this function never gets called in this file
        /**
         * @method tutorial_resize
         */

    }, {
        key: 'tutorial_resize',
        value: function tutorial_resize() {
            this.tutorial_move();
        }
    }]);

    return TutorialView;
}();

exports.default = TutorialView;

},{"../constants/selectors":575,"../constants/storageKeys":576,"../math/core":584,"../utilities/timeHelpers":594,"../utilities/unitConverters":595,"./TutorialStep":589,"jquery":296,"lodash/has":470}],591:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _radioUtilities = require('./utilities/radioUtilities');

var _logLevel = require('./constants/logLevel');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *
 * The functions contained in this file should be migrated over to the `math/`
 * files as soon as possible.
 *
 * These functions are all attached to the `window` and are global to the
 * entire app. This is a problem because it polutes the global namespace,
 * and files that don't need it have access to it. These functions should be imported
 * only as needed.
 *
 * These functions should also have corresponding tests.
 *
 */

window.AudioContext = window.AudioContext || window.webkitAudioContext;

/*eslint-disable*/
// TODO: this should be replaced with lodash _clone()
function clone(obj) {
    if (null == obj || 'object' != (typeof obj === 'undefined' ? 'undefined' : _typeof(obj))) {
        return obj;
    }

    var copy = obj.constructor();
    for (var attr in obj) {
        if ((0, _has3.default)(obj, attr)) {
            copy[attr] = obj[attr];
        }
    }

    return copy;
};

// String repetition copied from http://stackoverflow.com/a/5450113
if (!String.prototype.hasOwnProperty('repeat')) {
    String.prototype.repeat = function (count) {
        if (count < 1) {
            return '';
        }

        var result = '';
        var pattern = this.valueOf();

        while (count > 1) {
            if (count & 1) result += pattern;
            count >>= 1, pattern += pattern;
        }

        return result + pattern;
    };
}

/**
 * Necessary for Internet Explorer 11 (IE11) to not die while using String.fromCodePoint()
 * This function is not natively available in IE11, as noted on this MSDN page:
 * https://msdn.microsoft.com/en-us/library/dn890630(v=vs.94).aspx
 *
 * Apparently, it is fine with pre-Win8.1 MS Edge 11, but never okay in IE.
 * Here, the function is added to the String prototype to make later code usable.
 *
 * Solution from: http://xahlee.info/js/js_unicode_code_point.html
*/
if (!String.fromCodePoint) {
    // ES6 Unicode Shims 0.1 , © 2012 Steven Levithan , MIT License
    String.fromCodePoint = function fromCodePoint() {
        var chars = [];
        var point = void 0;
        var offset = void 0;
        var units = void 0;

        for (var i = 0; i < arguments.length; i++) {
            point = arguments[i];
            offset = point - 0x10000;
            units = point > 0xFFFF ? [0xD800 + (offset >> 10), 0xDC00 + (offset & 0x3FF)] : [point];
            chars.push(String.fromCharCode.apply(null, units));
        }

        return chars.join('');
    };
}

var log = function log(message) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _logLevel.LOG.INFO;

    var logStrings = {
        0: 'DEBUG',
        1: 'INFO',
        2: 'WARN',
        3: 'ERROR',
        4: 'FATAL'
    };

    if (prop.log <= level) {
        var text = '[ ' + logStrings[level] + ' ]';

        if (level >= _logLevel.LOG.WARNING) {
            console.warn(text, message);
        } else {
            console.log(text, message);
        }
    }
};
window.log = log;

/*eslint-enable*/

// TODO: is this being used? and why are we cloning radio_names here?
var radio_runway_names = clone(_radioUtilities.radio_names);
radio_runway_names.l = 'left';
radio_runway_names.c = 'center';
radio_runway_names.r = 'right';

// TODO: rename leftPad
/**
 * Prepends zeros to front of str/num to make it the desired width
 */
function lpad(n, width) {
    if (n.toString().length >= width) {
        return n.toString();
    }

    var x = '0000000000000' + n;

    return x.substr(x.length - width, width);
}

// FIXME: unused
// function endsWith(str, suffix) {
//     return str.indexOf(suffix, str.length - suffix.length) !== -1;
// }
// window.endsWith = endsWith;


// TODO: lodash _compact() might be useful here
/**
 * Splices all empty elements out of an array
 */
function array_clean(array, deleteValue) {
    for (var i = 0; i < array.length; i++) {
        if (array[i] === deleteValue) {
            array.splice(i, 1);
            i--;
        }
    }

    return array;
}

// TODO: this can be done with .reduce()
/**
 * Returns the sum of all numerical values in the array
 */
function array_sum(array) {
    var total = 0;

    for (var i = 0; i < array.length; i++) {
        total += parseFloat(array[i]);
    }

    return total;
}

window.clone = clone;
// window.distEuclid = distEuclid;
window.lpad = lpad;
window.array_clean = array_clean;
window.array_sum = array_sum;

},{"./constants/logLevel":574,"./utilities/radioUtilities":593,"lodash/has":470}],592:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.choose_weight = exports.choose = exports.unicodeToString = undefined;

var _isArray2 = require('lodash/isArray');

var _isArray3 = _interopRequireDefault(_isArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Helper method to translate a unicode character into a readable string value
 *
 * @method unicodeToString
 * @param char {characterCode}
 * @return {string}
 */
var unicodeToString = exports.unicodeToString = function unicodeToString(char) {
    return '\\u' + char.charCodeAt(0).toString(16).toUpperCase();
};

/**
 *
 * @function choose
 */
var choose = exports.choose = function choose(l) {
    var randomIndexFromLength = Math.floor(Math.random() * l.length);

    return l[randomIndexFromLength];
};

/**
 *
 * @function choose_weight
 */
var choose_weight = exports.choose_weight = function choose_weight(l) {
    if (l.length === 0) {
        return;
    }

    if (!(0, _isArray3.default)(l[0])) {
        return choose(l);
    }

    // l = [[item, weight], [item, weight] ... ];
    var weight = 0;
    for (var i = 0; i < l.length; i++) {
        weight += l[i][1];
    }

    var randomWeight = Math.random() * weight;
    weight = 0;

    for (var _i = 0; _i < l.length; _i++) {
        weight += l[_i][1];

        if (weight > randomWeight) {
            return l[_i][0];
        }
    }

    console.log('OHSHIT');

    return null;
};

},{"lodash/isArray":476}],593:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getCardinalDirection = exports.radio_trend = exports.radio_altitude = exports.radio_spellOut = exports.radio_heading = exports.radio_runway = exports.groupNumbers = exports.getGrouping = exports.digits_decimal = exports.digits_integer = exports.radio_runway_names = exports.radio_cardinalDir_names = exports.radio_names = undefined;

var _clone2 = require('lodash/clone');

var _clone3 = _interopRequireDefault(_clone2);

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

var _map2 = require('lodash/map');

var _map3 = _interopRequireDefault(_map2);

var _core = require('../math/core');

var _circle = require('../math/circle');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @property CARDINAL_DIRECTION
 * @type {Array}
 * @final
 */
var CARDINAL_DIRECTION = ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', 'N'];

/**
 * @property radio_names
 * @type {Object}
 * @final
 */
var radio_names = exports.radio_names = {
    0: 'zero',
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four',
    5: 'five',
    6: 'six',
    7: 'seven',
    8: 'eight',
    9: 'niner',
    10: 'ten',
    11: 'eleven',
    12: 'twelve',
    13: 'thirteen',
    14: 'fourteen',
    15: 'fifteen',
    16: 'sixteen',
    17: 'seventeen',
    18: 'eighteen',
    19: 'nineteen',
    20: 'twenty',
    30: 'thirty',
    40: 'fourty',
    50: 'fifty',
    60: 'sixty',
    70: 'seventy',
    80: 'eighty',
    90: 'ninety',
    a: 'alpha',
    b: 'bravo',
    c: 'charlie',
    d: 'delta',
    e: 'echo',
    f: 'foxtrot',
    g: 'golf',
    h: 'hotel',
    i: 'india',
    j: 'juliet',
    k: 'kilo',
    l: 'lima',
    m: 'mike',
    n: 'november',
    o: 'oscar',
    p: 'papa',
    q: 'quebec',
    r: 'romeo',
    s: 'sierra',
    t: 'tango',
    u: 'uniform',
    v: 'victor',
    w: 'whiskey',
    x: 'x-ray',
    y: 'yankee',
    z: 'zulu',
    '-': 'dash',
    '.': 'point'
};

// TODO: this and CARDINAL_DIRECTION seem to be duplicating logic. look into smoothing that out by using
// just this enum and `toUpperCase()` where necessary.
/**
 * @property radio_cardinalDir_names
 * @type {Object}
 * @final
 */
var radio_cardinalDir_names = exports.radio_cardinalDir_names = {
    n: 'north',
    nw: 'northwest',
    w: 'west',
    sw: 'southwest',
    s: 'south',
    se: 'southeast',
    e: 'east',
    ne: 'northeast'
};

// TODO: probably do this with Object.assign
var radio_runway_names = exports.radio_runway_names = (0, _clone3.default)(radio_names);
radio_runway_names.l = 'left';
radio_runway_names.c = 'center';
radio_runway_names.r = 'right';

// TODO: how is this different from lpad?
// NOT IN USE
/**
 * Force a number to a string with a specific # of digits
 *
 * If the rounded integer has more digits than requested, it will be returned
 * anyway, as chopping them off the end would change the value by orders of
 * magnitude, which is almost definitely going to be undesirable.
 *
 * @param number
 * @param digits
 * @truncate {boolean}
 * @return {string} with leading zeros to reach 'digits' places
 */
var digits_integer = exports.digits_integer = function digits_integer(number, digits) {
    var truncate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (truncate) {
        number = Math.floor(number).toString();
    } else {
        number = Math.round(number).toString();
    }

    if (number.length > digits) {
        return number;
    }

    // add leading zeros
    while (number.length < digits) {
        number = '0' + number;
    }

    return number;
};

/**
 * Round a number to a specific # of digits after the decimal
 *
 * Also supports negative digits. Ex: '-2' would do 541.246 --> 500
 *
 * @param {boolean} force - (optional) Forces presence of trailing zeros.
 *                          Must be set to true if you want '3' to be able to go to '3.0', or
 *                          for '32.168420' to not be squished to '32.16842'. If true, fxn will
 *                          return a string, because otherwise, js removes all trailing zeros.
 * @param {boolean} truncate - (optional) Selects shortening method.
 *                          to truncate: 'true', to round: 'false' (default)
 * @return {number}         if !force
 * @return {string}         if force
 */
var digits_decimal = exports.digits_decimal = function digits_decimal(number, digits, force, truncate) {
    var shorten = truncate ? Math.floor : Math.round;

    if (!force) {
        return shorten(number * Math.pow(10, digits)) / Math.pow(10, digits);
    }

    // check if needs extra trailing zeros
    if (digits <= 0) {
        return (shorten(number * Math.pow(10, digits)) / Math.pow(10, digits)).toString();
    }

    number = number.toString();

    for (var i = 0; i < number.length; i++) {
        if (number[i] === '.') {
            var trailingDigits = number.length - (i + 1);

            if (trailingDigits === digits) {
                return number.toString();
            } else if (trailingDigits < digits) {
                // add trailing zeros
                return number + Array(digits - trailingDigits + 1).join('0');
            } else if (trailingDigits > digits) {
                if (truncate) {
                    return number.substr(0, number.length - (trailingDigits - digits));
                }

                var len = number.length - (trailingDigits - digits + 1);
                var part1 = number.substr(0, len);
                var part2 = digits === 0 ? '' : shorten(parseInt(number.substr(len, 2), 10) / 10).toString();

                return part1 + part2;
            }
        }
    }
};

/**
 *
 * @function getGrouping
 * @param groupable {array}
 * @return {string}
 */
var getGrouping = exports.getGrouping = function getGrouping(groupable) {
    var digit1 = groupable[0];
    var digit2 = groupable[1];

    if (digit1 === 0) {
        if (digit2 === 0) {
            return 'hundred';
        }
        // just digits (eg 'zero seven')
        return radio_names[digit1] + ' ' + radio_names[digit2];
    } else if (digit1 === 1) {
        // exact number (eg 'seventeen')
        return radio_names[groupable];
    } else if (digit1 >= 2) {
        var firstDigit = digit1 + '0';

        if (digit2 === 0) {
            // to avoid 'five twenty zero'
            return radio_names[firstDigit];
        }
        // combo number (eg 'fifty one')
        return radio_names[firstDigit] + ' ' + radio_names[digit2];
    }

    return radio_names[digit1] + ' ' + radio_names[digit2];
};

// TODO: this needs to be simplified
/**
 *
 * @function groupNumbers
 * @param callsign {string}
 * @param airline {string} (optional)
 * @return
 */
var groupNumbers = exports.groupNumbers = function groupNumbers(callsign, airline) {
    if (!/^\d+$/.test(callsign)) {
        // GA, eg '117KS' = 'one-one-seven-kilo-sierra')
        if (airline === 'November') {
            // callsign "November"
            var _s = [];

            for (var k in callsign) {
                // one after another (eg 'one one seven kilo sierra')
                _s.push(radio_names[callsign[k]]);
            }

            return _s.join(' ');
        }

        // airline grouped, eg '3110A' = 'thirty-one-ten-alpha'
        // divide callsign into alpha/numeric sections
        var sections = [];
        var cs = callsign;
        var thisIsDigit = void 0;
        var index = cs.length - 1;
        var lastWasDigit = !isNaN(parseInt(cs[index], 10));
        index--;

        while (index >= 0) {
            thisIsDigit = !isNaN(parseInt(cs[index], 10));

            while (thisIsDigit === lastWasDigit) {
                index--;
                thisIsDigit = !isNaN(parseInt(cs[index], 10));

                if (index < 0) {
                    break;
                }
            }
            sections.unshift(cs.substr(index + 1));
            cs = cs.substr(0, index + 1);
            lastWasDigit = thisIsDigit;
        }

        // build words, section by section
        var s = [];

        for (var i in sections) {
            if (isNaN(parseInt(sections[i], 10))) {
                // alpha section
                s.push(radio_spellOut(sections[i]));
            } else {
                // numeric section
                switch (sections[i].length) {
                    case 0:
                        s.push(sections[i]);
                        break;
                    case 1:
                        s.push(radio_names[sections[i]]);
                        break;
                    case 2:
                        s.push(getGrouping(sections[i]));
                        break;
                    case 3:
                        s.push(radio_names[sections[i][0]] + ' ' + getGrouping(sections[i].substr(1)));
                        break;
                    case 4:
                        s.push(getGrouping(sections[i].substr(0, 2)) + ' ' + getGrouping(sections[i].substr(2)));
                        break;
                    default:
                        s.push(radio_spellOut(sections[i]));
                        break;
                }
            }
        }

        return s.join(' ');
    } else {
        // FIXME: this block is unreachable
        switch (callsign.length) {
            case 0:
                return callsign;break;
            case 1:
                return radio_names[callsign];break;
            case 2:
                return getGrouping(callsign);break;
            case 3:
                return radio_names[callsign[0]] + ' ' + getGrouping(callsign.substr(1));
                break;
            case 4:
                return getGrouping(callsign.substr(0, 2)) + ' ' + getGrouping(callsign.substr(2));
                break;
            default:
                return callsign;
        }
    }
};

/**
 *
 * @funtion radio_runway
 * @param input {string}
 * @return
 */
var radio_runway = exports.radio_runway = function radio_runway(input) {
    input = input + ' ';
    input = input.toLowerCase();

    return (0, _compact3.default)((0, _map3.default)(input, function (letterOrNumber, i) {
        return radio_runway_names[input[i]];
    })).join(' ');
};

/**
 *
 * @function radio_heading
 * @param heading {string}
 * @return {string}
 */
var radio_heading = exports.radio_heading = function radio_heading(heading) {
    var str = heading.toString();

    switch (str.length) {
        case 1:
            return 'zero zero ' + radio_names[str];
        case 2:
            return 'zero ' + radio_names[str[0]] + ' ' + radio_names[str[1]];
        default:
            return radio_names[str[0]] + ' ' + radio_names[str[1]] + ' ' + radio_names[str[2]];
    }

    return heading;
};

/**
 *
 * @function radio_spellOut
 * @param alphanumeric
 * @return
 */
var radio_spellOut = exports.radio_spellOut = function radio_spellOut(alphanumeric) {
    var str = alphanumeric.toString();
    var arr = [];

    if (!str) {
        return;
    }

    // TODO: change to _map()
    for (var i = 0; i < str.length; i++) {
        arr.push(radio_names[str[i]]);
    }

    return arr.join(' ');
};

/**
 *
 * @function radio_altitude
 * @param altitude
 * @return
 */
var radio_altitude = exports.radio_altitude = function radio_altitude(altitude) {
    var alt_s = altitude.toString();
    var s = [];

    // TODO can this block be simplified?
    if (altitude >= 18000) {
        s.push('flight level', radio_names[alt_s[0]], radio_names[alt_s[1]], radio_names[alt_s[2]]);
    } else if (altitude >= 10000) {
        s.push(radio_names[alt_s[0]], radio_names[alt_s[1]], 'thousand');

        if (!(altitude % (Math.floor(altitude / 1000) * 1000) === 0)) {
            s.push(radio_names[alt_s[2]], 'hundred');
        }
    } else if (altitude >= 1000) {
        s.push(radio_names[alt_s[0]], 'thousand');

        if (!(altitude % (Math.floor(altitude / 1000) * 1000) === 0)) {
            s.push(radio_names[alt_s[1]], 'hundred');
        }
    } else if (altitude >= 100) {
        s.push(radio_names[alt_s[0]], 'hundred');
    } else {
        return altitude;
    }

    return s.join(' ');
};

/**
 *
 * @function radio_trend
 * @param category
 * @param measured
 * @param target
 * @return {string}
 */
var radio_trend = exports.radio_trend = function radio_trend(category, measured, target) {
    var CATEGORIES = {
        altitude: ['descend and maintain', 'climb and maintain', 'maintain'],
        speed: ['reduce speed to', 'increase speed to', 'maintain present speed of']
    };

    if (measured > target) {
        return CATEGORIES[category][0];
    }

    if (measured < target) {
        return CATEGORIES[category][1];
    }

    return CATEGORIES[category][2];
};

/**
 *
 * @function getCardinalDirection
 * @param angle
 * @return {string}
 */
var getCardinalDirection = exports.getCardinalDirection = function getCardinalDirection(angle) {
    return CARDINAL_DIRECTION[(0, _core.round)(angle / (0, _circle.tau)() * 8)];
};

},{"../math/circle":583,"../math/core":584,"lodash/clone":460,"lodash/compact":462,"lodash/map":496}],594:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * @property TIME_SECONDS_OFFSET
 * @type {number}
 * @final
 */
var TIME_SECONDS_OFFSET = 0.001;

// TODO: rename function
/**
 * @function time
 * @return {number} current time in seconds
 */
var time = exports.time = function time() {
  return new Date().getTime() * TIME_SECONDS_OFFSET;
};

/**
 * @function calculateDeltaTime
 * @param  {number} lastFrame
 * @return {number}
 */
var calculateDeltaTime = exports.calculateDeltaTime = function calculateDeltaTime(lastFrame) {
  return Math.min(time() - lastFrame, 1 / 20);
};

},{}],595:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseElevation = exports.parseCoordinate = exports.heading_to_string = exports.convertStringToNumber = exports.convertToThousands = exports.convertMinutesToSeconds = exports.km_to_px = exports.px_to_km = exports.degreesToRadians = exports.radiansToDegrees = exports.kn_ms = exports.ft_km = exports.km_ft = exports.m_ft = exports.nm = exports.km = exports.NUMBER_CONSTANTS = exports.UNIT_CONVERSION_CONSTANTS = undefined;

var _includes2 = require('lodash/includes');

var _includes3 = _interopRequireDefault(_includes2);

var _isNumber2 = require('lodash/isNumber');

var _isNumber3 = _interopRequireDefault(_isNumber2);

var _startsWith2 = require('lodash/startsWith');

var _startsWith3 = _interopRequireDefault(_startsWith2);

var _circle = require('../math/circle');

var _core = require('../math/core');

var _globalConstants = require('../constants/globalConstants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @property DECIMAL_RADIX
 * @type {number}
 * @final
 */
var DECIMAL_RADIX = 10;

// TODO: This should be moved to its own file once it has been filled in a little more
/**
 * @property UNIT_CONVERSION_CONSTANTS
 * @type {Object}
 */
var UNIT_CONVERSION_CONSTANTS = exports.UNIT_CONVERSION_CONSTANTS = {
  /**
   * nautical mile per kilometer ratio
   *
   * @property NM_KM
   * @type {number}
   * @final
   */
  NM_KM: 1.852,
  /**
   * Meters to feet ratio
   *
   * @property M_FT
   * @type {number}
   * @final
   */
  M_FT: 0.3048,
  /**
   * kilometer per foot ratio
   *
   * @property KM_FT
   * @type {number}
   * @final
   */
  KM_FT: 0.0003048,
  /**
   * knots per m/s ratio
   *
   * @property KN_MS
   * @type {number}
   * @final
   */
  KN_MS: 0.51444444,
  /**
   * Number used to obtain feet from a flight level number
   *
   * @property FL_TO_FT_MULTIPLIER
   * @type {number}
   * @final
   */
  FL_TO_FT_MULTIPLIER: 100
};

// TODO: This should be moved to its own file once it has been filled in a little more
/**
 * @property NUMBER_CONSTANTS
 * @type {Object}
 * @final
 */
var NUMBER_CONSTANTS = exports.NUMBER_CONSTANTS = {
  /**
   * Degrees in a circle
   *
   * @property FULL_CIRCLE_DEGREES
   * @type {number}
   * @final
   */
  FULL_CIRCLE_DEGREES: 360
};

/**
 * nautical miles --> kilometers
 *
 * @function km
 * @param nm {number}
 * @return {number}
 */
var km = exports.km = function km() {
  var nm = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return nm * UNIT_CONVERSION_CONSTANTS.NM_KM;
};

/**
 * kilometers --> nautical miles
 *
 * @function nm
 * @param kilometers {number}
 * @return {number}
 */
var nm = exports.nm = function nm() {
  var kilometers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return kilometers / UNIT_CONVERSION_CONSTANTS.NM_KM;
};

/**
 * meters -> feet
 *
 * @function m_ft
 * @param {number} [meters=0]
 * @return {number}
 */
var m_ft = exports.m_ft = function m_ft() {
  var meters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return meters / UNIT_CONVERSION_CONSTANTS.M_FT;
};

/**
 * kilometers --> feet
 *
 * @function km_ft
 * @param kilometers {number}
 * @return {number}
 */
var km_ft = exports.km_ft = function km_ft() {
  var kilometers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return kilometers / UNIT_CONVERSION_CONSTANTS.KM_FT;
};

/**
 * feet --> kilometers
 *
 * @function ft_km
 * @param nm {number}
 * @return {number}
 */
var ft_km = exports.ft_km = function ft_km() {
  var ft = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return ft * UNIT_CONVERSION_CONSTANTS.KM_FT;
};

/**
 * knots to m/s
 *
 * @function kn_ms
 * @param kn {number}
 * @return {number}
 */
var kn_ms = exports.kn_ms = function kn_ms() {
  var kn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  return kn * UNIT_CONVERSION_CONSTANTS.KN_MS;
};

/**
 * convert radians to degrees
 *
 * @function radiansToDegrees
 * @param radians {number}
 * @return {number}
 */
var radiansToDegrees = exports.radiansToDegrees = function radiansToDegrees(radians) {
  return radians / (0, _circle.tau)() * NUMBER_CONSTANTS.FULL_CIRCLE_DEGREES;
};

/**
 * convert degrees to radians
 *
 * @function degreesToRadians
 * @param degrees {number}
 * @return {number}
 */
var degreesToRadians = exports.degreesToRadians = function degreesToRadians(degrees) {
  return degrees / NUMBER_CONSTANTS.FULL_CIRCLE_DEGREES * (0, _circle.tau)();
};

/**
 * NOT IN USE
 * convert pixels to kilometers at the current scale
 *
 * @function px_to_km
 * @param  {number} pixels
 * @param  {number} scale
 * @return {number}
 */
var px_to_km = exports.px_to_km = function px_to_km(pixels, scale) {
  return pixels / scale;
};

/**
 * NOT IN USE
 * convert kilometers to pixels at the current scale
 *
 * @function km_to_px
 * @param  {number} kilometers
 * @return {number}
 */
var km_to_px = exports.km_to_px = function km_to_px(kilometers, scale) {
  return kilometers * scale;
};

/**
 * @function convertMinutesToSeconds
 * @param minutes {number}
 * @return {number}
 */
var convertMinutesToSeconds = exports.convertMinutesToSeconds = function convertMinutesToSeconds(minutes) {
  return minutes * 60;
};

/**
 * Utility function to convert a number to thousands.
 *
 * Given a flightlevel FL180, this function outputs 18,000
 *
 * @function covertToThousands
 * @param  {number} value
 * @return {number}
 */
var convertToThousands = exports.convertToThousands = function convertToThousands(value) {
  return parseInt(value, DECIMAL_RADIX) * UNIT_CONVERSION_CONSTANTS.FL_TO_FT_MULTIPLIER;
};

/**
 * Attempt to convert a string to a number
 *
 * The implementor will have to handle the case where `parseInt` returns `NaN`
 *
 * @function convertStringToNumber
 * @param  value {string|*}
 * @return {number|NaN}
 */
var convertStringToNumber = exports.convertStringToNumber = function convertStringToNumber(value) {
  return parseInt(value, DECIMAL_RADIX);
};

/**
 *
 * @function heading_to_string
 * @param heading {string}
 * @return {string}
 */
var heading_to_string = exports.heading_to_string = function heading_to_string(heading) {
  heading = (0, _core.round)((0, _core.mod)(radiansToDegrees(heading), 360)).toString();

  if (heading === '0') {
    heading = '360';
  }

  if (heading.length === 1) {
    heading = '00' + heading;
  }

  if (heading.length === 2) {
    heading = '0' + heading;
  }

  return heading;
};

/**
 * Accept a lat/long coordinate and return a value in decimal notation
 *
 * Latitude and Longitude numbers may be one of the following forms:
 *   Decimal degrees - 'N47.112388112'
 *   Decimal minutes - 'N38d38.109808'
 *   Decimal seconds - 'N58d27m12.138'
 *
 * @function parseCoordinate
 * @param coordinate {string}
 * @return transformedCoordinate {number}
 */
var parseCoordinate = exports.parseCoordinate = function parseCoordinate(coordinate) {
  var match = _globalConstants.REGEX.LAT_LONG.exec(coordinate);

  // If coordinate already in WGS84 ESPG:4326 form ('39.427618, -75.296011'), just return it as-is
  if (match == null) {
    return coordinate;
  }

  var degrees = parseFloat(match[2]);
  var minutes = 0;
  var seconds = 0;

  // Gather minutes/seconds as decimal of a degree, if available
  if (match[5] != null) {
    minutes = parseFloat(match[5]) * _globalConstants.TIME.ONE_MINUTE_IN_HOURS;

    if (match[8] != null) {
      seconds = parseFloat(match[8]) * _globalConstants.TIME.ONE_SECOND_IN_HOURS;
    }
  }

  var decimalDegrees = degrees + minutes + seconds;

  // Apply negative to value if coordinate is "South" or "West"
  if (_globalConstants.REGEX.SW.test(match[1])) {
    decimalDegrees *= -1;
  }

  return decimalDegrees;
};

/**
 * Accept a string elevation and return a number representing elevation in ft.
 *
 * @function parseElevation
 * @param elevation {string}    ex: 13.4ft, 3m, 5ft
 * @return {number}             elevation in feet
 */
var parseElevation = exports.parseElevation = function parseElevation(elevation) {
  // TODO: move to master REGEX constant
  // this regex will catch the following: `-`, `m`, `ft`, `Infinity`, and is used to extract a number
  // from a string containing these symbols.
  var REGEX = /(-)|(m|ft|Infinity)/gi;

  // if its a number, we're done here.
  // This will catch whole numbers, floats, Infinity and -Infinity.
  // This checks if strings are given will skip the regex and exit early
  // Also stops the function from returning NaN
  if ((0, _isNumber3.default)(elevation) || elevation === 'Infinity' || elevation === '-Infinity') {
    return parseFloat(elevation);
  }

  var parsedElevation = elevation.replace(REGEX, '');
  var elevationUnit = elevation.match(REGEX);

  // if its in meters, convert it to feet
  if ((0, _includes3.default)(elevationUnit, 'm')) {
    parsedElevation = m_ft(parsedElevation);
  }

  // if it came in as a negative number,return it as a negative number
  if ((0, _startsWith3.default)(elevation, '-')) {
    parsedElevation *= -1;
  }

  return parseFloat(parsedElevation);
};

},{"../constants/globalConstants":573,"../math/circle":583,"../math/core":584,"lodash/includes":474,"lodash/isNumber":486,"lodash/startsWith":502}]},{},[582])

//# sourceMappingURL=data:application/json;charset=utf-8;base64,